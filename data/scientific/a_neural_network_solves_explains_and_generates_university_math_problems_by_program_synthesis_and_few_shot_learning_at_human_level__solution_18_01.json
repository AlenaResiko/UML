{
  "authors": [
    "Iddo Drori",
    "Sarah Zhang",
    "Reece Shuttleworth",
    "Leonard Tang",
    "Albert Lu",
    "Elizabeth Ke",
    "Kevin Liu",
    "Linda Chen",
    "Sunny Tran",
    "Newman Cheng",
    "Roman Wang",
    "Nikhil Singh",
    "Taylor L. Patti",
    "Jayson Lynch",
    "Avi Shporer",
    "Nakul Verma",
    "Eugene Wu",
    "Gilbert Strang"
  ],
  "date_published": "2021-12-31",
  "raw_tex": "\\section{Solutions for MIT 18.01: Single Variable Calculus}\n\\label{sec:solution-18.01}\n\n\\paragraph{Prereq} None\n\\paragraph{Units} 5-0-7\n\\paragraph{Syllabus} Differentiation and integration of functions of one variable, with applications. Informal treatment of limits and continuity. Differentiation: definition, rules, application to graphing, rates, approximations, and extremum problems. Indefinite integration; separable first-order differential equations. Definite integral; fundamental theorem of calculus. Applications of integration to geometry and science. Elementary functions. Techniques of integration. Polar coordinates. L'Hopital's rule. Improper integrals. Infinite series: geometric, p-harmonic, simple comparison tests, power series for some elementary functions.\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 1: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nFunctions and Models\n\\\\\n\\hline\nOriginal question & \nSketch the graph of the function. $f(x)   x + |x|$\\\\\n\\hline\nCodex input &\nSame as original question\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx   np.linspace(-10, 10, 100)\ny   x + np.abs(x)\n\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.grid()\nplt.show()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \\newline \\includegraphics[height50mm]{18.01-q1-codex-output-plot.png}\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We import the numpy and matplotlib.pyplot libraries. \\newline\n2. We create an array of 100 evenly spaced numbers from -10 to 10.\\newline\n3. We create an array of the same size as x, where each element is the absolute value of the corresponding element in x. \\newline\n4. We plot the graph of y against x.\\newline\n5. We label the x-axis and y-axis.\\newline\n6. We display the grid.\\newline\n7. We display the graph.\n\\\\\n\\hline\nGPT-3 response & The graph of the function is a line with a slope of 1 and a y-intercept of 0. \\\\\n\\hline\nGPT-3 evaluation & Incorrect \\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 2: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nFunctions and Models\n\\\\\n\\hline\nOriginal question & \nFind $f\\circ g\\circ h$. $f(x)3x-2, g(x)\\sin(x), h(x)x^2$\\\\\n\\hline\nCodex input &\nSame as original question\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport math\n\ndef f(x):\n   return 3*x-2\n\ndef g(x):\n   return math.sin(x)\n\ndef h(x):\n   return x**2\n\ndef fgh(x):\n   return f(g(h(x)))\n\nprint(fgh(2))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $3 \\sin(x^2) - 2$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot \\\\\n\\hline\nCodex code explanation & \n1. fgh(2) \\newline\n2. h(2)\\newline\n3. g(4)\\newline\n4. f(sin(4))\\newline\n5. $3\\sin{4}-2$\n\\\\\n\\hline\nGPT-3 response & f\u25e6g\u25e6h   f(g(h(x)))   f(g(x**2))   f(sin(x**2))   3*sin(x**2)-2\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 3: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nFunctions and Models\n\\\\\n\\hline\nOriginal question & \nSolve each equation for $x$. $\\ln(x^2-1)3$\\\\\n\\hline\nCodex input &\nSame as original question\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy\n\nx   sympy.Symbol('x')\n\neq   sympy.log(x**2-1) - 3\n\nprint(sympy.solve(eq, x))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $-\\sqrt{1 + e^3}, \\sqrt{1 + e^3}$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We import the sympy module.\\newline\n2. We create a symbol x.\\newline\n3. We create an equation.\\newline\n4. We solve the equation for x.\n\\\\\n\\hline\nGPT-3 response & \nx**2-1e**3\n\nx**2e**3+1\n\nxsqrt(e**3+1)\n\\\\\n\\hline\nGPT-3 evaluation & Correct \\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 4: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nLimits and Derivatives\n\\\\\n\\hline\nOriginal question & \nDetermine the infinite limit. $\\lim_{x\\to 5^+} (x+1)/(x-5)$\\\\\n\\hline\nCodex input &\nUsing sympy determine the infinite limit. lim\\_x\\_5+ (x+1)/(x-5)\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import limit, Symbol, S\n\nx   Symbol('x')\n\nlimit((x+1)/(x-5), x, 5)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $\\infty$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation &\n1. We import the limit function from the sympy module. \\newline\n2. We create a Symbol object called x.\\newline\n3. We call the limit function and pass in the expression (x+1)/(x-5) and the variable x.\\newline\n4. We pass in the point 5 as the third argument.\n\\\\\n\\hline\nGPT-3 response & The limit does not exist because the function is not defined when x   5.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 5: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nLimits and Derivatives\n\\\\\n\\hline\nOriginal question & \nFind the limits as $x\\to\\infty$ and as $x\\to -\\infty$. Use this information, together with intercepts, to give a rough sketch of the graph as in Example 12. $yx^2 (x^2-1)^2 (x+2)$\\\\\n\\hline\nCodex input &\nSame as original question\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy as sym\nfrom sympy import Symbol\nfrom sympy import pprint\n\nsigma   Symbol('sigma')\nx   Symbol('x')\nmu   Symbol('mu')\n\npprint(2*sym.pi*sigma)\n\npprint(sym.sqrt(2*sym.pi*sigma))\n\npart_1   1/(sym.sqrt(2*sym.pi*sigma))\npart_2   sym.exp(-1*((x-mu)**2)/(2*sigma))\nmy_gauss_function   part_1*part_2\npprint(my_gauss_function)\n\nsym.plot(my_gauss_function.subs({mu:10,sigma:30}),(x,0,100),title'gauss distribution')\n\nx_values   []\ny_values   []\nfor value in range(-5,5):\n   y   my_gauss_function.subs({mu:10,sigma:30,x:value}).evalf()\n   y_values.append(y)\n   x_values.append(value)\n   print(value,y)\n\nimport matplotlib.pyplot as plt\n\nplt.plot(x_values,y_values)\nplt.show()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $\\infty$; -$\\infty$; \\newline \\includegraphics[height50mm]{18.01-q5-codex-output-plot.png}\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We create a list of x values from -5 to 5. \\newline\n2. We create an empty list to store the y values. \\newline\n3. We loop through the x values. \\newline\n4. For each x value, we calculate the y value. \\newline\n5. We append the y value to the list of y values. \\newline\n6. We plot the x values against the y values.\n\\\\\n\\hline\nGPT-3 response & \nAs x -> infinity, y -> infinity. As x -> - infinity, y -> infinity.\n\nThe graph will look like a parabola that opens up.\n\\\\\n\\hline\nGPT-3 evaluation & Incorrect \\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 6: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nLimits and Derivatives\n\\\\\n\\hline\nOriginal question & \nFind the derivative of the function using the definition of a derivative. $f(x)(x^2-1)/(2x-3)$\\\\\n\\hline\nCodex input &\nUsing Sympy find the derivative of the function using the definition of a derivative. f(x)(x**2-1)/(2*x-3)\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy as sp\n\nx   sp.Symbol('x')\n\nf   (x**2-1)/(2*x-3)\n\nprint(sp.diff(f,x))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $\\frac{2x}{2x - 3} - \\frac{2(x^2 - 1)}{2x - 3}$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We import sympy as sp \\newline\n2. We create a symbol x \\newline\n3. We create a function f \\newline\n4. We print the derivative of f with respect to x\n\\\\\n\\hline\nGPT-3 response & (2*x**2-1)/(2*x-3)**2\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 7: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nDifferentiation Rules\n\\\\\n\\hline\nOriginal question & \nFind the limit. $\\lim_{x\\to 0} \\csc(x)\\sin(\\sin(x))$\\\\\n\\hline\nCodex input &\nSame as original question\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import limit, csc, sin, Symbol\n\nx   Symbol('x')\n\nprint(limit(csc(x)*sin(sin(x)), x, 0))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $1$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We are finding the limit of csc(x)*sin(sin(x)) as x approaches 0. \\newline\n2. We are using the limit function from the sympy library. \\newline\n3. We are passing in the function csc(x)*sin(sin(x)) as the first argument.\\newline\n4. We are passing in the variable x as the second argument.\\newline\n5. We are passing in the number 0 as the third argument.\\newline\n\\\\\n\\hline\nGPT-3 response & The limit does not exist.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 8: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nDifferentiation Rules\n\\\\\n\\hline\nOriginal question & \nThe half-life of cesium-137 is 30 years. Suppose we have a 100-mg sample. How much of the sample remains after 100 years?\\\\\n\\hline\nCodex input &\nWrite a program. The half-life of cesium-137 is 30 years. Suppose we have a 100-mg sample. How much of the sample remains after 100 years?\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport math\n\ndef half_life(t, h):\n   return 100 * math.pow(0.5, t/h)\n\nprint(half_life(100, 30))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $9.92$ mg\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We import the math module. \\newline\n2. We define a function called half\\_life that takes two arguments: t and h.\\newline\n3. We return the value of 100 * 0.5\\^{}(t/h).\\newline\n4. We print the result of half\\_life(100, 30).\n\\\\\n\\hline\nGPT-3 response & After 100 years, 50 mg of the sample would remain.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 9: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nDifferentiation Rules\n\\\\\n\\hline\nOriginal question & \nThe radius of a sphere is increasing at a rate of 4 mm/s. How fast is the volume increasing when the diameter is 80 mm?\\\\\n\\hline\nCodex input &\nSame as original question\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy as sp\n\nr   sp.symbols('r')\n\nd   4*r\n\nv   4/3*sp.pi*r**3\n\ndv_dr   sp.diff(v,r)\n\nprint(dv_dr.subs(r,80))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $25600\\pi$\n\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & \n1. We define the radius as a symbol. \\newline\n2. We define the diameter as a function of the radius. \\newline\n3. We define the volume as a function of the radius. \\newline\n4. We take the derivative of the volume with respect to the radius. \\newline\n5. We substitute the radius with 80 and print the result.\n\\\\\n\\hline\nGPT-3 response & The volume of a sphere is increasing at a rate of approximately 201.06 mm3/s.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 10: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nApplications of Differentiation\n\\\\\n\\hline\nOriginal question & \nThe water level, measured in feet above mean sea level, of Lake Lanier in Georgia, USA, during 2012 can be modeled by the function $L(t)0.01441t^3-0.4177t^2+2.703t+1060.1$ where $t$ is measured in months since January 1, 2012. Estimate when the water level was highest during 2012.\n\\\\\n\\hline\nCodex input &\nSame as original question\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport math\n\ndef L(t):\n   return 0.01441*t**3-0.4177*t**2+2.703*t+1060.1\n\ndef dL(t):\n   return 0.04323*t**2-0.8354*t+2.703\n\ndef ddL(t):\n   return 0.08646*t-0.8354\n\ndef newton(f, df, x0, epsilon):\n   x   x0\n   while True:\n   x1   x - f(x)/df(x)\n   if abs(x1 - x) < epsilon:\n   return x1\n   x   x1\n\nprint(newton(dL, ddL, 0, 0.00001))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \\newline \\includegraphics[height50mm]{18.01-q10-codex-output-plot.png}\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We define the function L(t) \\newline\n2. We define the derivative of L(t) \\newline\n3. We define the second derivative of L(t) \\newline\n4. We define a function that uses Newton's method to find the root of a function f(x) \\newline\n5. We print the result of using Newton's method to find the root of the derivative of L(t)\\\\\n\\hline\nGPT-3 response & The water level was maximum at t2.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 11: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nApplications of Differentiation\n\\\\\n\\hline\nOriginal question & \nIf a resistor of R ohms is connected across a battery of E volts with internal resistance r ohms, then the power (in watts) in the external resistor is $P   E^2R/(R+r)^2$. If E and r are fixed but R varies, what is the maximum value of the power?\n\\\\\n\\hline\nCodex input &\nSame as original question\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy as sym\nfrom sympy import Symbol\nfrom sympy import pprint\n\nR   Symbol('R')\nE   Symbol('E')\nr   Symbol('r')\n\nP   E**2*R/(R+r)**2\n\nprint(P)\n\ndP   P.diff(R)\n\nprint(dP)\n\nR_sol   sym.solve(dP,R)\n\nprint(R_sol)\n\nR_max   R_sol[0].evalf()\n\nprint(R_max)\n\nP_max   P.subs({R:R_max})\n\nprint(P_max)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $\\frac{E^2}{4r}$\n\\\\\n\\hline\nSolution type & Automatic Few-Shot (5)\\\\\n\\hline\nCodex code explanation & \n1. Define the variables \\newline\n2. Define the function \\newline\n3. Take the derivative of the function \\newline\n4. Solve the derivative for R \\newline\n5. Evaluate the solution \\newline\n6. Substitute the solution into the original function\\\\\n\\hline\nGPT-3 response & The maximum value of the power is P   E\\^{}2R/(R+r)\\^{}2 when R   r.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 12: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nApplications of Differentiation\n\\\\\n\\hline\nOriginal question & \nUse Newton\u2019s method to find all the solutions of the equation correct to eight decimal places. Start by drawing a graph to find initial approximations.   $x^5-3x^4+x^3-x^2-x+60$\n\\\\\n\\hline\nCodex input &\nUse Newton\u2019s method to find all the solutions between -100 and 100 with integer initial values. x**5-3*x**4+x**3-x**2-x+60. Use initial points between -100 and 100. Round to 8 decimal places.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef f(x):\n   return x**5-3*x**4+x**3-x**2-x+6\n\ndef df(x):\n   return 5*x**4-12*x**3+3*x**2-2*x-1\n\ndef newton(x, f, df, epsilon1e-8, max_iter1000):\n   for i in range(max_iter):\n   x_new   x - f(x)/df(x)\n   if abs(x_new - x) < epsilon:\n   return x_new\n   x   x_new\n   return x_new\n\ndef main():\n   x   np.linspace(-100, 100, 1000)\n   y   f(x)\n   plt.plot(x, y)\n   plt.grid()\n   plt.show()\n   x_sols   []\n   for i in range(-100, 100):\n   x_sols.append(newton(i, f, df))\n   print(x_sols)\n   print(np.round(x_sols, 8))\n\nif __name__   '__main__':\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $-1.044503071109637, 2.7055120932482875$ \\newline\n\\includegraphics[height50mm]{18.01-q12-codex-output-plot.png}\n\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & \n1. Plotting the function f(x)   x**5-3*x**4+x**3-x**2-x+6 \\newline\n2. Finding the derivative of f(x) \\newline\n3. Using Newton's method to find the roots of f(x) \\newline\n4. Plotting the roots of f(x) \\\\\n\\hline\nGPT-3 response & There are five solutions.\n\n-1.46557123 \\newline\n-0.53728871 \\newline\n0.36082474 \\newline\n1.12403607 \\newline\n2.09132432 \\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 13: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nIntegrals\n\\\\\n\\hline\nOriginal question & \nEvaluate $\\int_1^1 \\sqrt{1+x^4} \\, dx$.\n\\\\\n\\hline\nCodex input &\nWrite a program to evaluate the integral from 1 to 1 of sqrt(1 + x\\^{}4) dx.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import Symbol, sqrt, Integral, pprint\n\nx   Symbol('x')\nk   Symbol('k')\n\np   sqrt(1 + x**4)\n\npprint(Integral(p, (x, 1, 1)).doit())\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $0.0$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We create a Symbol object called x.\\newline\n2. We create a Symbol object called k.\\newline\n3. We create a symbolic expression called p.\\newline\n4. We create an Integral object called p\\_integral.\\newline\n5. We call the doit() method on the Integral object.\\\\\n\\hline\nGPT-3 response & The integral from 1 to 1 of sqrt(1 + x\\^{}4) dx is equal to 2.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 14: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nIntegrals\n\\\\\n\\hline\nOriginal question & \nSketch the region enclosed by the given curves and calculate its area. $y   4-x^2, y0$\n\\\\\n\\hline\nCodex input &\nUsing numpy, graph the lines y0 and y4-x**2. Use fill\\_between().\n\nThen using Sympy, find the points of intersection between and y0 and y4-x**2.\n\nIntegrate between lines y4-x**2 and y0, over the points of intersection to calculate the area of the region. x should go from -5 to 5.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport sympy as sp\n\nx   np.linspace(-5, 5, 100)\ny1   0*x\ny2   4-x**2\n\nplt.plot(x, y1, '-b', label'y0')\nplt.plot(x, y2, '-r', label'y4-x**2')\nplt.fill_between(x, y1, y2, color'grey', alpha0.5)\nplt.legend(loc'best')\nplt.show()\n\nx, y   sp.symbols('x y')\nf   4-x**2\ng   0*x\n\nsols   sp.solve([f, g], [x, y])\n\nx1   sols[0][0]\ny1   sols[0][1]\nx2   sols[1][0]\ny2   sols[1][1]\n\narea   sp.integrate(f, (x, x1, x2)) + sp.integrate(g, (x, x1, x2))\nprint(area)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $\\frac{32}{3}$ \\newline\n\\includegraphics[height50mm]{18.01-q14-codex-output-plot.png}\n\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & \n1. We are using numpy to graph the lines y0 and y4-x**2. We are using fill\\_between() to fill in the area between the two lines. \\newline\n2. We are using Sympy to find the points of intersection between the two lines. \\newline\n3. We are using Sympy to integrate between the two lines, over the points of \\newline intersection, to calculate the area of the region.\\\\\n\\hline\nGPT-3 Response & The region is enclosed by the curves y4-x\\^{}2, y0, and x2. Its area is 16.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 15: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nIntegrals\n\\\\\n\\hline\nOriginal question & \nA bacteria population is 4000 at time $t   0$ and its rate of growth is $1000 \\cdot 2^t$ bacteria per hour after $t$ hours. What is the population after one hour?\n\\\\\n\\hline\nCodex input &\nA bacteria population is 4000 at time t   0 and its rate of growth is y   1000 * 2\\^{}x bacteria per hour after t hours. Write a function to calculate the population after one hour. Use sympy to integrate the symbol x from 0 to 1. Then add the initial population to the result.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy as sp\n\nx   sp.Symbol('x')\n\ndef bacteria_population(x):\n   return 1000 * 2**x\n\nprint(sp.integrate(bacteria_population(x), (x, 0, 1)) + 4000)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $\\frac{1000}{\\log 2} + 4000$\n\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & \n1. We import sympy as sp. \\newline\n2. We define x as a symbol. \\newline\n3. We define a function bacteria\\_population(x) that returns the population of bacteria after x hours. \\newline\n4. We print the result of integrating the function bacteria\\_population(x) from 0 to 1 and adding the initial population of 4000.\\\\\n\\hline\nGPT-3 response & 5000\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 16: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nApplications of Integration\n\\\\\n\\hline\nOriginal question & \nGraph the region between the curves and use your calculator to compute the area correct to five decimal places. $y   \\tan^2(x), y   \\sqrt{x}$\n\\\\\n\\hline\nCodex input &\nGraph the region between the curves y   tan\\^{}2(x) and y   sqrt(x) to find the two points where they intersect. Then, write a program to compute the area between the curves where they cross. Use sympy.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy\nimport math\n\nx   sympy.symbols('x')\n\ny1   sympy.tan(x)**2\ny2   sympy.sqrt(x)\n\n# find the intersection points\nintersection_points   sympy.solve(y1 - y2)\n\n# find the area between the two curves\narea   sympy.integrate(y1 - y2, (x, intersection_points[0], intersection_points[1]))\n\nprint(area)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $0.25142$\n\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & \n1. We import sympy and math. \\newline\n2. We create a variable x and set it equal to sympy.symbols('x'). This is how we tell sympy that we want to use x as a variable. \\newline\n3. We create two variables, y1 and y2, and set them equal to sympy.tan(x)**2 and sympy.sqrt(x), respectively. \\newline\n4. We create a variable called intersection\\_points and set it equal to sympy.solve(y1 - y2). This is how we tell sympy to find the intersection points of the two curves. \\newline\n5. We create a variable called area and set it equal to sympy.integrate(y1 - y2, (x, intersection\\_points[0], intersection\\_points[1])). This is how we tell sympy to find the area between the two curves. \\newline\n6. We print the area.\n\\\\\n\\hline\nGPT-3 response & The region between the curves is shaded in the graph.\\newline\nThe area is 1.04719.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 17: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nApplications of Integration\n\\\\\n\\hline\nOriginal question & \nA force of 10 lb is required to hold a spring stretched 4 in.~beyond its natural length. How much work is done in stretching it from its natural length to 6 in.~beyond its natural length?\n\\\\\n\\hline\nCodex input &\nA force of 10 lb is required to hold a spring stretched delta\\_x   1/3 foot. Write a function to calculate the work done in stretching it to delta\\_x   1/2 foot. Use Hooke's Law F   k*delta\\_x where delta\\_x is a sympy.symbols to find the spring constant k   10/(1/3) and integrate F with respect to delta\\_x from 0 to the stretched ratio 1/2. Use sympy for the integral. Then plug in for delta\\_x   1/2.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy\n\ndef work_done(delta_x):\n   k   10/(1/3)\n   F   k*delta_x\n   return sympy.integrate(F, (delta_x, 0, 1/2))\n\nprint(work_done(sympy.symbols('delta_x')))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $3.750$\n\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & \n1. We define a function called work\\_done that takes a variable delta\\_x as an argument. \\newline\n2. We define the spring constant k   10/(1/3) \\newline\n3. We define the force F   k*delta\\_x \\newline\n4. We return the integral of F with respect to delta\\_x from 0 to 1/2. \\newline\n5. We print the result of calling work\\_done with sympy.symbols('delta\\_x') as the argument.\n\\\\\n\\hline\nGPT-3 Response & The work done in stretching the spring from its natural length to 6 in. beyond its natural length is 60 lb-in.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 18: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\n\\\\ \\hline\nTopic & \nTechniques of Integration\n\\\\\n\\hline\nOriginal question & \nEvaluate the integral. $\\int_0^{0.5} x\\sqrt{1-4x^2} \\, dx$\n\\\\\n\\hline\nCodex input &\nUsing sympy evaluate the integral. 0 to 0.5 of x*sqrt(1-4x\\^{}2) dx.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\n\nx   Symbol('x')\n\nintegral   integrate(x*sqrt(1-4*x**2), (x, 0, 0.5))\n\nprint(integral)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $\\frac{1}{12}$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We import the sympy module.\\newline\n2. We create a symbol x. \\newline\n3. We create an integral object. \\newline\n4. We print the integral object. \\newline\n\\\\\n\\hline\nGPT-3 response & The integral is 0.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 19: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\n\\\\ \\hline\nTopic & \nTechniques of Integration\n\\\\\n\\hline\nOriginal question & \nFind the area of the region under the given curve from 1 to 2. $y   (x^2+1)/(3x-x^2)$\n\\\\\n\\hline\nCodex input &\nFind the area of the region under the given curve from 1 to 2. y   (x\\^{}2+1)/(3x-x\\^{}2)\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef f(x):\n   return (x**2+1)/(3*x-x**2)\n\ndef trapezoidal(f, a, b, n):\n   h   (b-a)/n\n   s   0.5*(f(a) + f(b))\n   for i in range(1, n):\n   s   s + f(a + i*h)\n   return h*s\n\ndef simpson(f, a, b, n):\n   h   (b-a)/n\n   s   f(a) + f(b)\n   for i in range(1, n, 2):\n   s   s + 4*f(a + i*h)\n   for i in range(2, n-1, 2):\n   s   s + 2*f(a + i*h)\n   return h*s/3\n\ndef gauss(f, a, b, n):\n   x, A   np.polynomial.legendre.leggauss(n)\n   return 0.5*(b-a)*np.dot(A, f(0.5*(b-a)*x + 0.5*(b+a)))\n\na   1\nb   2\nn   10\n\nprint(\"Trapezoidal:\", trapezoidal(f, a, b, n))\nprint(\"Simpson:\", simpson(f, a, b, n))\nprint(\"Gauss:\", gauss(f, a, b, n))\n\nx   np.linspace(a, b, 100)\ny   f(x)\nplt.plot(x, y)\nplt.show()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $1.5415321620760492$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. Define the function f(x)   (x\\^{}2+1)/(3x-x\\^{}2) \\newline\n2. Define the trapezoidal rule for numerical integration \\newline\n3. Define the Simpson's rule for numerical integration \\newline\n4. Define the Gauss-Legendre quadrature rule for numerical integration \\newline\n5. Define the limits of integration \\newline\n6. Define the number of intervals \\newline\n7. Print the results of the three methods \\newline\n8. Plot the function \\newline\n\\\\\n\\hline\nGPT-3 response & The area of the region under the given curve from 1 to 2 is approximately 1.4.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 20: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\n\\\\ \\hline\nTopic & \nTechniques of Integration\n\\\\\n\\hline\nOriginal question & \nEvaluate the integral. $\\ln(1+x^2)$\n\\\\\n\\hline\nCodex input &\nEvaluate the integral of ln(1+x**2). Cast to a string and add \" + C\".\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\n\nx   Symbol('x')\n\nprint(str(integrate(ln(1+x**2), x)) + \" + C\")\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $x\\log (x^2+1) - 2x + 2\\arctan{x} + C$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We import the sympy module. \\newline\n2. We create a symbol x. \\newline\n3. We create a variable integral and assign it the value of the integral of ln(1+x**2) with respect to x. \\newline\n4. We print the value of the integral. \\newline\n\\\\\n\\hline\nGPT-3 response & The integral of ln(1+x**2) is x*ln(1+x**2)-x\\\\\n\\hline\nGPT-3 evaluation & Incorrect \\\\\n\\hline\n\\end{longtable}\n\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 21: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nParametric Equations and Polar Coordinates\n\\\\\n\\hline\nOriginal question & \nGraph the curve $x   y - 2\\sin(\\pi y)$.\n\\\\\n\\hline\nCodex input &\nGraph the curve x   y - 2sin(pi*y) by sampling points and swapping the (x, y) pair locations.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef f(y):\n   return y - 2*np.sin(np.pi*y)\n\ny   np.linspace(-2, 2, 100)\nx   f(y)\n\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('x   y - 2sin(pi*y)')\nplt.show()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \\newline \\includegraphics[height100mm]{18.01-q27-codex-output-plot.png}\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. Define the function f(y)   y - 2sin(pi*y). \\newline\n2. Create an array of 100 evenly spaced numbers between -2 and 2. \\newline\n3. Create an array of the values of f(y) for each y in the array. \\newline\n4. Plot the curve x   f(y). \\newline\n\\\\\n\\hline\nGPT-3 response & A curve is defined by a set of parametric equations if the coordinates of each point on the curve are given by specific functions of a variable. The variable is called a parameter.\n\nThe parametric equations for a curve are usually written as x   f(t) and y   g(t). The parameter t is usually restricted to a certain interval, such as 0 $\\leq$ t $\\leq$ 1.\n\nThe graph of the parametric equations x   f(t) and y   g(t) is the set of points (f(t), g(t)) for all values of t in the interval.\n\nExample 1: Find the graph of the parametric equations x   t2 and y   t3.\n\nSolution: The graph of the parametric equations x   t2 and y   t3 is the set of points (t2, t3) for all values of t.\\\\\n\\hline\nGPT-3 evaluation & Incorrect \\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 22: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nParametric Equations and Polar Coordinates\n\\\\\n\\hline\nOriginal question & \nFind the distance between the points with polar coordinates $(4, 4\\pi/3)$ and $(6, 5\\pi/3)$.\n\\\\\n\\hline\nCodex input &\nUsing sympy find the distance between the points with polar coordinates $(4, 4pi/3)$ and $(6, 5pi/3)$.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\n\nr1, r2, theta1, theta2   symbols('r1 r2 theta1 theta2')\n\nx1   r1 * cos(theta1)\ny1   r1 * sin(theta1)\n\nx2   r2 * cos(theta2)\ny2   r2 * sin(theta2)\n\nd   sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\nprint(d.subs({r1: 4, theta1: 4*pi/3, r2: 6, theta2: 5*pi/3}))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $2*sqrt(7)$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We define the variables r1, r2, theta1, theta2 as symbols. \\newline\n2. We define x1, y1, x2, y2 as the cartesian coordinates of the points. \\newline\n3. We define d as the distance between the points. \\newline\n4. We substitute the values of r1, theta1, r2, theta2 and print the result.\n\\\\\n\\hline\nGPT-3 response & The distance between the points is 2.\\\\\n\\hline\nGPT-3 evaluation & Incorrect \\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 23: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nInfinite Sequences and Series\n\\\\\n\\hline\nOriginal question & \nDetermine whether the series is convergent or divergent. $\\sum_{n1}^\\infty 1/n^{\\sqrt{2}}$\n\\\\\n\\hline\nCodex input &\nUsing Sympy, calculate the value sum\\_{n1}\\^{}{inf} 1/n\\^{}{sqrt(2)} if it converges. Check if it converges.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import Sum, Symbol, oo, pprint, init_printing\n\ndef test_convergence(n):\n   x   Symbol('x')\n   s   Sum(1/x**(2**0.5), (x, 1, n))\n   pprint(s)\n   pprint(s.doit())\n\nif __name__   '__main__':\n   init_printing(order'rev-lex')\n   test_convergence(10)\n   test_convergence(oo)\n\\end{lstlisting}\nNOTE: $\\infty$ in SymPy is oo. This is because oo looks like $\\infty$.\\\\\n\\hline\nProgram solution & $\\sum_{n1}^{\\infty}n^{-\\sqrt{2}}$; $True$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We import the Sum function from sympy. \\newline\n2. We create a function that takes in a number n and creates a Sum object. \\newline\n3. We print the Sum object and the result of the summation. \\newline\n4. We call the function with n   10 and n   oo. \\newline\n\\\\\n\\hline\nGPT-3 response & The series is divergent.\\\\\n\\hline\nGPT-3 evaluation & Incorrect \\\\\n\\hline\n\\end{longtable}\n\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 24: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nInfinite Sequences and Series\n\\\\\n\\hline\nOriginal question & \nFind the sum of the series. $\\sum_{n1}^\\infty (-1)^{n-1}*(3^n/(n\\cdot 5^n))$\n\\\\\n\\hline\nCodex input &\nFind the sum of the series by running a large number of iterations. sum\\_\\{n1\\}\\^{}\\{inf\\} (-1)\\^{}\\{n-1\\}*(3\\^{}n/(n*5\\^{}n)). Return 0 if n < 1.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef sum_series(n):\n   \"\"\"\n   Find the sum of the series. sum n to infinity (-1)^{n-1}*(3^n/(n*5^n))\n   \"\"\"\n   sum   0\n   for i in range(1, n+1):\n   sum + ((-1)**(i-1))*(3**i)/(i*(5**i))\n   return sum\n\ndef main():\n   \"\"\"\n   Find the sum of the series. sum n to infinity (-1)^{n-1}*(3^n/(n*5^n))\n   \"\"\"\n   n   int(input())\n   print(sum_series(n))\n\nif __name__   '__main__':\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $0.47000362924573563$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We are taking input from the user. \\newline\n2. We are calling the function sum\\_series() with the input as the argument. \\newline\n3. The function sum\\_series() is returning the sum of the series. \\newline\n4. We are printing the sum of the series. \\newline\n\\\\\n\\hline\nGPT-3 response & The sum of the series is -1/4.\\\\\n\\hline\nGPT-3 evaluation & Incorrect \\\\\n\\hline \n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.01, Question 25: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nFurther Applications of Integration\n\\\\\n\\hline\nOriginal question & \nIf revenue flows into a company at a rate of f(t)   9000*sqrt(1+2t), where t is measured in years and f(t) is measured in dollars per year, find the total revenue obtained in the first four years.\n\\\\\n\\hline\nCodex input &\nUsing sympy if revenue flows into a company at a rate of f(t)   9000*sqrt(1+2t), where t is measured in years and f(t) is measured in dollars per year, find the total revenue obtained in the first four years.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\n\nt   symbols('t')\n\nf   9000*sqrt(1+2*t)\n\nprint(integrate(f, (t, 0, 4)))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $78000$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We import the sympy library. \\newline\n2. We define the variable t as a symbol. \\newline\n3. We define the function f(t)   9000*sqrt(1+2t). \\newline\n4. We integrate f(t) from t0 to t4. \\newline\n5. We print the result.\\\\\n\\hline\nGPT-3 response & The total revenue obtained in the first four years is f(4)   9000*sqrt(1+2*4)   9000*sqrt(9)   9000*3   27000.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}",
  "title": "A Neural Network Solves, Explains, and Generates University Math Problems by Program Synthesis and Few-Shot Learning at Human Level"
}
