{
  "authors": [
    "Iddo Drori",
    "Sarah Zhang",
    "Reece Shuttleworth",
    "Leonard Tang",
    "Albert Lu",
    "Elizabeth Ke",
    "Kevin Liu",
    "Linda Chen",
    "Sunny Tran",
    "Newman Cheng",
    "Roman Wang",
    "Nikhil Singh",
    "Taylor L. Patti",
    "Jayson Lynch",
    "Avi Shporer",
    "Nakul Verma",
    "Eugene Wu",
    "Gilbert Strang"
  ],
  "date_published": "2021-12-31",
  "raw_tex": "\\section{Solutions for MIT 18.03: Differential Equations}\n\\label{sec:solution-18.03}\n\n\\paragraph{Prereq} None. \\paragraph{Coreq} Calculus II (GIR)\n\\paragraph{Units} 5-0-7\n\\paragraph{Syllabus} Study of differential equations, including modeling physical systems. Solution of first-order ODEs by analytical, graphical, and numerical methods. Linear ODEs with constant coefficients. Complex numbers and exponentials. Inhomogeneous equations: polynomial, sinusoidal, and exponential inputs. Oscillations, damping, resonance. Fourier series. Matrices, eigenvalues, eigenvectors, diagonalization. First order linear systems: normal modes, matrix exponentials, variation of parameters. Heat equation, wave equation. Nonlinear autonomous systems: critical point analysis, phase plane diagrams.\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 1: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Integrals \\\\\n\\hline\nOriginal question & \nFind a function $y   f(x)$ satisfying the given differential equation and the prescribed initial condition. $\\frac{dy}{dx}2x+1;y(0)3$\\\\\n\\hline\nCodex input & Same as Original problem \\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy as sp\n\nx   sp.Symbol('x')\ny   sp.Function('y')\n\n# dy/dx2x+1\neq   sp.Eq(y(x).diff(x), 2*x+1)\n\n# y(0)3\nics   {y(0): 3}\n\n# Solve the differential equation\nsol   sp.dsolve(eq, icsics)\n\n# Print the solution\nprint(sol)\n\\end{lstlisting} \\\\\n\\hline\nProgram solution & \\includegraphics[height50mm]{18.03-q1-codex-output-plot.png} \\\\\n\\hline\nProgram solution & $4$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We import the sympy module and rename it as sp. \\newline\n2. We create a symbol x and a function y. \\newline \n3. We create an equation dy/dx2x+1. \\newline\n4. We create an initial condition y(0)3. \\newline\n5. We solve the differential equation using the dsolve() function. \\newline\n6. We print the solution.\\\\\n\\hline\nGPT-3 response & $y   f(x)   3x^2 + x + 3$\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 2: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nLogistic Equation\n\\\\\n\\hline\nOriginal question & \nFind general solutions (implicit if necessary, explicit if convenient) of the differential equations. Primes denote derivatives with respect to x. $dy/dx+2xy0$\\\\\n\\hline\nCodex input &\nUsing Sympy dsolve, find the general solution to the differential equation y'+2xy0\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import Function, dsolve, Eq, Derivative, symbols\n\nx, y   symbols('x y')\ny   Function('y')(x)\n\ndsolve(Derivative(y, x) + 2*x*y)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $y(x)   C_1e^{-x^2}$ \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We define a function f(x)\\newline\n2. We use dsolve to solve the differential equation \\newline\n3. We define the differential equation using Eq \\newline\n4. We define the derivative using Derivative \\newline\n5. We define the function f(x)\\\\\n\\hline\nGPT-3 response & $dy/dx+2xy0$\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 3: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nLinear First-Order Equations\n\\\\\n\\hline\nOriginal question & \nFind general solutions of the differential equations. If an initial condition is given, find the corresponding particular solution. Throughout, primes denote derivatives with respect to x. $y' + y   2, y(0)   0$\\\\\n\\hline\nCodex input &\nUsing Sympy dsolve, solve f'(x)+f(x)2. \\newline\nSubstitute f(0)0 and solve for C1.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\n\nx   symbols('x')\nf   Function('f')\n\neq   Eq(f(x).diff(x) + f(x), 2)\n\nsol   dsolve(eq, f(x))\n\nC1   symbols('C1')\n\nsol   sol.subs(C1, solve(sol.rhs.subs(x, 0), C1)[0])\n\nprint(sol)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $2 - 2e^{-x}$ \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We define a function f(x) \\newline\n2. We define the differential equation \\newline\n3. We solve the differential equation \\newline\n4. We define the differential equation again, but this time we also define the initial condition \\newline\n5. We solve the differential equation with the initial condition\\\\\n\\hline\nGPT-3 response & $f(x)Ce^x+1$\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 4: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nPopulation Models\n\\\\\n\\hline\nOriginal question & \nSeparate variables and use partial fractions to solve the initial value problem. Use either the exact solution or a computer-generated slope field to sketch the graphs of several solutions of the given differential equation, and highlight the indicated particular solution. $f'(x)3*f(x)(5-f(x)), f(0)8$\\\\\n\\hline\nCodex input &\nUsing Sympy dsolve, solve f'(x)3*f(x)(5-f(x)). \\newline\nFind the particular solution by substituting initial condition f(0)8 into f'(x) and solve for C1.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\n\nx   symbols('x')\nf   Function('f')\n\n# f'(x)3*f(x)(5-f(x))\neq   Eq(f(x).diff(x), 3*f(x)*(5-f(x)))\n\n# f(0)8\nics   {f(0): 8}\n\n# solve for C1\nsol   dsolve(eq, f(x), icsics)\n\n# particular solution\npart_sol   sol.rhs\n\n# general solution\ngen_sol   part_sol.subs({C1: symbols('C1')})\n\npprint(gen_sol)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $5 / \\left(1-\\frac{3 \\cdot e^{-15 \\cdot x}}{8} \\right)$ \\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & 1. Solve f'(x)3*f(x)(5-f(x)) for f(x) \\newline\n2. Find the particular solution by substituting initial condition f(0)8 into f'(x) and solve for C1 \\newline\n3. Substitute C1 into f(x) to get the particular solution \\newline\n4. Substitute C1 into f(x) to get the general solution\\\\\n\\hline\nGPT-3 response & $f'(x)3*f(x)(5-f(x)), f(0)8$\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 5: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nSecond-Order Linear Equations\n\\\\\n\\hline\nOriginal question & \nA homogeneous second-order linear differential equation, two functions $y_1$ and $y_2$, and a pair of initial conditions are given. First verify that $y_1$ and $y_2$ are solutions of the differential equation. Then find a particular solution of the form $y   c_1*y_1 + c_2*y_2$ that satisfies the given initial conditions. Primes denote derivatives with respect to x. $y''+4y0; y1\\cos2x, y2\\sin2x; y(0)3,   y'(0)8$\\\\\n\\hline\nCodex input &\nA differential equation is f''(x)+4*f(x)0. \\newline\nLet y\\_1cos(2*x) and y\\_2sin(2*x). \\newline\nUsing Sympy, show that f(x)c\\_1*y\\_1+c\\_2*y\\_2 is the solution. \\newline\nSubstitute initial conditions f(0)3 and f'(0)8 to find C1 and C2.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy as sp\n\nx   sp.Symbol('x')\ny1   sp.cos(2*x)\ny2   sp.sin(2*x)\n\nf   sp.Function('f')\n\neq   sp.Eq(f(x).diff(x, 2) + 4*f(x), 0)\n\nsol   sp.dsolve(eq, f(x))\n\nprint(sol)\n\nics   {f(0): 3, f(x).diff(x).subs(x, 0): 8}\n\nprint(sp.dsolve(eq, f(x), icsics))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $\\frac{4}{\\sin(2x)} + \\frac{3}{\\cos(2x)}$ \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. Define the differential equation f''(x)+4*f(x)0. \\newline\n2. Define y1cos(2*x) and y2sin(2*x). \\newline\n3. Define f(x)c1*y1+c2*y2. \\newline\n4. Find the solution to the differential equation f''(x)+4*f(x)0. \\newline\n5. Substitute initial conditions f(0)3 and f'(0)8 to find C1 and C2.\\\\\n\\hline\nGPT-3 response & y1 and y2 are solutions of the differential equation. A particular solution of the form $yc1*y1+c2*y2$ that satisfies the given initial conditions is $y3*\\cos{2x}+8*\\sin{2x}$.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 6: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nHomogeneous Equations with Constant Coefficients\n\\\\\n\\hline\nOriginal question & \nFind a general solution of $y'' - 2iy' + 3y   0.$\\\\\n\\hline\nCodex input &\nUsing Sympy, find a general solution of f''(x) - 2*i*f'(x) + 3*f(x)   0\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\n\nx   symbols('x')\n\nf   Function('f')\n\neq   Eq(f(x).diff(x, x) - 2*I*f(x).diff(x) + 3*f(x), 0)\n\nsol   dsolve(eq)\n\nprint(sol)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $C_1e^{-ix} + C_2e^{3ix}$ \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. Declare symbols \\newline\n2. Create a function f(x) \\newline\n3. Create an equation $f''(x) - 2*i*f'(x) + 3*f(x)   0$ \\newline\n4. Solve the equation \\newline\n5. Print the solution\\\\\n\\hline\nGPT-3 response & $y   c_1e^{3t} + c_2e^{-it}$\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 7: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nNon-homogeneous Equations and Undetermined Coefficients\n\\\\\n\\hline\nOriginal question & \nUse the method of variation of parameters to find a particular solution of the given differential equation. $f''(x) + 4*f(x)   \\cos(3*x)$\\\\\n\\hline\nCodex input &\nUsing Sympy, find the solution to the differential equation f''(x) + 4*f(x)   cos(3*x). \\newline \nFind a particular solution by substituting random values of C1 and C2.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy as sp\n\nx   sp.symbols('x')\nf   sp.Function('f')\n\n# Define the differential equation\neq   sp.Eq(f(x).diff(x, 2) + 4*f(x), sp.cos(3*x))\n\n# Solve the differential equation\nsol   sp.dsolve(eq, f(x))\n\n# Find the particular solution by substituting random values of C1 and C2\nC1, C2   sp.symbols('C1 C2')\npart_sol   sol.subs([(C1, sp.randprime(1, 10)), (C2, sp.randprime(1, 10))])\n\n# Print the solution\nprint(part_sol)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $7\\sin(2x) + 7\\cos(2x) - \\frac{\\cos(3x)}{5}$ \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We define a function f(x) and the differential equation f''(x) + 4*f(x)   cos(3*x). \\newline\n2. We solve the differential equation using the sympy.dsolve function. \\newline\n3. We find the particular solution by substituting random values of C1 and C2. \\newline\n4. We print the solution.\\\\\n\\hline\nGPT-3 response & $f(x)   \\frac{1}{4}\\cos{3x} -\\frac{1}{12}\\sin{3x}$\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 8: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nPower Series\n\\\\\n\\hline\nOriginal question & \nFind a power series solution of the given differential equation. $y'   y$\\\\\n\\hline\nCodex input &\nUsing Sympy find solution to f'(x)-f(x)0. \\newline\nFind the power series of the solution.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy as sp\n\nx   sp.Symbol('x')\nf   sp.Function('f')\n\neq   sp.Eq(f(x).diff(x)-f(x),0)\n\nsol   sp.dsolve(eq,f(x))\n\nprint(sol)\n\n# Power series solution\n\nprint(sol.rhs.series(x,0,10))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $f(x)C_1e^x$ \\newline $C_1 + C_1x + C_1\\frac{x^2}{2} + C_1\\frac{x^3}{6} + C_1\\frac{x^4}{24} + C_1\\frac{x^5}{120} + C_1\\frac{x^6}{720} + C_1\\frac{x^7}{5040} + C_1\\frac{x^8}{40320} + C_1\\frac{x^9}{362880} + O(x^{10})\n$ \\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & 1. Define the function f(x) \\newline\n2. Define the equation f'(x)-f(x)0 \\newline\n3. Solve the equation for f(x) \\newline\n4. Find the power series of the solution\\\\\n\\hline\nGPT-3 response & $y   c_1 e^x$\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 9: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Laplace Transforms and Inverse Transforms \\\\\n\\hline\nOriginal question & \nUse the transforms in Fig. 4.1.2 to find the inverse Laplace transforms of the functions. $\\frac{3}{(s-4)}$\\\\\n\\hline\nCodex input &\nUse the inverse\\_laplace\\_transform to find original function. The resulting laplace transform: 2/s**3.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import inverse_laplace_transform\nfrom sympy.abc import s, t\nfrom sympy import exp\n\nF   inverse_laplace_transform(2/s**3, s, t)\nprint(F)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $t^2*\\mathrm{Heaviside}(t)$ \\\\\n\\hline\nSolution type & Automatic Few-Shot (1)\\\\\n\\hline\nCodex code explanation & 1. First, we import the inverse\\_laplace\\_transform function from sympy.integrals.transforms.\\newline\n2. Next, we define the variable s and t. \\newline\n3. Then, we define the function F as the inverse\\_laplace\\_transform of $2/s^3$, with respect to s, and t. \\newline\n4. Finally, we print the result.\\\\\n\\hline\nGPT-3 response & The inverse Laplace transform of $3/(s-4)$ is $3e^{4t}$.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 10: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nTranslation and Partial Functions\n\\\\\n\\hline\nOriginal question & \nSuppose that $m1, k9, c0$, and $F(t)6\\cos(3t)$. Use the inverse transform given in Eq.(16) to derive the solution $x(t)   t \\sin(3t)$. Construct a figure that illustrates the resonance that occurs.\\\\\n\\hline\nCodex input &\nIn a spring system, m1, k9, c0. Add external force 6*cos(3*x).\\newline\nUse sympy dsolve with arg ics\\{f(0):0,f(x).diff(x).subs(x,0):0\\}. \\newline\nAfter everything is done, plot your solution.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy as sp\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx   sp.Symbol('x')\nf   sp.Function('f')\n\nm, k, c   1, 9, 0\n\n# external force\nw   6*sp.cos(3*x)\n\n# differential equation\ndiffeq   m*f(x).diff(x, x) + c*f(x).diff(x) + k*f(x) - w\n\n# solve differential equation\nsol   sp.dsolve(diffeq, f(x), ics{f(0):0, f(x).diff(x).subs(x,0):0})\n\n# convert sympy expression to numpy function\nf_np   sp.lambdify(x, sol.rhs, 'numpy')\n\n# plot\nx_np   np.linspace(0, 10, 100)\nplt.plot(x_np, f_np(x_np))\nplt.show()\n\\end{lstlisting} \\\\\n\\hline\nProgram solution & \\includegraphics[height50mm]{18.03-q10-codex-output-plot.png} \\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & 1. Define a symbol x, a function f(x), and a differential equation f(x).diff(x, x) + c*f(x).diff(x) + k*f(x)   w. \\newline\n2. Solve the differential equation using dsolve. \\newline\n3. Convert the sympy expression to a numpy function. \\newline\n4. Plot the function.\\\\\n\\hline\nGPT-3 response & Not an image\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 11: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nDerivatives, Integrals and Products of Transforms\n\\\\\n\\hline\nOriginal question & \nApply either Theorem 2 or Theorem 3 to find the Laplace transform of $f(t)$. $f(t) t^{2}\\cos(2t)$\\\\\n\\hline\nCodex input &\nFind the laplace transform of f(t) t**2*cos(2*t)\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\nfrom sympy.integrals import laplace_transform\nfrom sympy.abc import t,s,a\n\nf   t**2*cos(2*t)\n\nF   laplace_transform(f,t,s)\n\nprint(F)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $\\frac{2s(s^2 - 12)}{(s^2 + 4)^3}, s>0$ \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. Importing the laplace\\_transform function from the sympy.integrals module \\newline\n2. Declaring the variable t, s, and a \\newline\n3. Defining the function f(t) \\newline\n4. Calling the laplace\\_transform function on f(t) \\newline\n5. Printing the result\\\\\n\\hline\nGPT-3 response & The Laplace transform of f(t) is: $F(s)   (s^2 + 4) / (s^4 + 8s^2 + 16)$\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 12: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nPeriodic and Piecewise Continuous Input Functions\n\\\\\n\\hline\nOriginal question & \nFind the inverse Laplace transform $f(t)$. Then sketch the graph of f. $F(s)   \\frac{e^{-3s}}{s^2}.$\\\\\n\\hline\nCodex input &\nUse the inverse\\_laplace\\_transform to find original function from e**(-3*s)/s**2. \\newline\nGraph the solution.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\nfrom sympy.abc import s, t\nfrom sympy.integrals import inverse_laplace_transform\nfrom sympy.plotting import plot\n\nf   inverse_laplace_transform(exp(-3*s)/s**2, s, t)\nprint(f)\n\nplot(f, (t, 0, 5))\n\\end{lstlisting} \\\\\n\\hline\nProgram solution & $-(\\log(\\exp(-t)) + 3)*\\text{Heaviside}(t - 3)$\n \\newline \\includegraphics[height50mm]{18.03-q12-codex-output-plot.png} \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We import the inverse\\_laplace\\_transform function from sympy.integrals. \\newline\n2. We define the function f as the inverse\\_laplace\\_transform of e**(-3*s)/s**2. \\newline\n3. We print the function f. \\newline\n4. We plot the function f.\\\\\n\\hline\nGPT-3 response & $f(t)   t^2*e^{-3t}$\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 13: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nEuler's Method\n\\\\\n\\hline\nOriginal question & \nAn initial value problem and its exact solution $y(x)$ are given. Apply Euler\u2019s method twice to approximate to this solution on the interval $\\left[0, \\frac{1}{2}\\right]$, first with step size $h   0.25$, then with step size $h   0.1$. Compare the three-decimal-place values of the two approximations at $x   \\frac{1}{2}$ with the value $y(\\frac{1}{2})$ of the actual solution. $y'y+1, y(0)1; y(x)2e^x-1$\\\\\n\\hline\nCodex input &\nApply the Euler's method to y'y+1, y(0)1; y(x)2e**x-1 on interval [0,0.5] with step size 0.25 and step size 0.1. Show both approximations and the exact solutions.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef euler(x0,y0,h,x):\n   x   np.arange(x0,x+h,h)\n   y   np.zeros(len(x))\n   y[0]   y0\n   for i in range(1,len(x)):\n   y[i]   y[i-1] + h*(y[i-1]+1)\n   return x,y\n\ndef exact(x0,y0,h,x):\n   x   np.arange(x0,x+h,h)\n   y   np.zeros(len(x))\n   for i in range(len(x)):\n   y[i]   2*np.exp(x[i])-1\n   return x,y\n\nx0   0\ny0   1\nh   0.25\nx   0.5\n\nx1,y1   euler(x0,y0,h,x)\nx2,y2   euler(x0,y0,0.1,x)\nx3,y3   exact(x0,y0,h,x)\n\nplt.plot(x1,y1,'r',label'h0.25')\nplt.plot(x2,y2,'b',label'h0.1')\nplt.plot(x3,y3,'g',label'exact')\nplt.legend()\nplt.show()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \\newline \\includegraphics[height50mm]{18.03-q13-codex-output-plot.png} \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. Define the function euler(x0,y0,h,x) \\newline\n2. Define the function exact(x0,y0,h,x) \\newline\n3. Define the variables x0,y0,h,x \\newline\n4. Apply the euler function to x0,y0,h,x \\newline\n5. Apply the exact function to x0,y0,h,x \\newline\n6. Plot the results\\\\\n\\hline\nGPT-3 response & Euler's method with h0.25: 1.25,1.56,1.95,2.44 \\newline\nEuler's method with h0.1: 1.1,1.21,1.331,1.4641 \\newline\nThe actual solution at x1/2 is 1.46.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 14: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nEuler's Method\n\\\\\n\\hline\nOriginal question & \nApply the improved Euler method to approximate this solution on the interval $\\left[0,0.5\\right]$ with step size $h   0.1$ to approximate the solution $y'-y$ for initial conditions $y(0)2$ and $y(x)2e^{-x}$\\\\\n\\hline\nCodex input &\nUse the improved Euler's method on interval [0, 0.5] with step size h   0.1. \\newline\nApproximate the solution y'-y with the initial conditions y(0)2 and y(x)2*e**(-x). \\newline\nDo not cast n to an int when implementing improved Euler's method. \\newline\nGraph the approximated and actual values of y.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef improved_euler(f, x0, y0, h, xn):\n   x   np.arange(x0, xn + h, h)\n   y   np.zeros(len(x))\n   y[0]   y0\n   for i in range(1, len(x)):\n   y[i]   y[i - 1] + h * f(x[i - 1] + h / 2, y[i - 1] + h / 2 * f(x[i - 1], y[i - 1]))\n   return x, y\n\ndef f(x, y):\n   return -y\n\nx0   0\ny0   2\nh   0.1\nxn   0.5\n\nx, y   improved_euler(f, x0, y0, h, xn)\n\nplt.plot(x, y, label'Improved Euler')\nplt.plot(x, 2 * np.exp(-x), label'Actual')\nplt.legend()\nplt.show()\n\\end{lstlisting} \\\\\n\\hline\nProgram solution & \\newline \\includegraphics[height50mm]{18.03-q14-codex-output-plot.png} \\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & 1. Create an array of x values from x0 to xn with step size h. \\newline\n2. Create an array of y values from y0 to yn with step size h. \\newline\n3. Set the first value of y to y0.\\newline\n4. Loop through the x values.\\newline\n5. At each x value, calculate the next y value using the improved Euler's method.\\newline\n6. Add the calculated y value to the y array.\\newline\n7. Return the x and y arrays.\\\\\n\\hline\nGPT-3 response & Not an image\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 15: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nRunge-Kutta Method\n\\\\\n\\hline\nOriginal question & \nAn initial value problem and its exact solution are given. Apply the Runge-Kutta method to approximate this solution on the interval $\\left[0, 0.5\\right]$ with step size $h   0.25$. Construct a table showing five decimal place values of the approximate solution and actual solution at the points $x   0.25$ and $0.5$. $y'y-x-1$, and initial conditions $y(0)1;y(x)2+x-e^x$\\\\\n\\hline\nCodex input &\nGiven equation of y'y-x-1, and initial conditions y(0)1;y(x)2+x-e**x, print the exact solution for y(0.25) and y(0.5) without plotting. DO NOT PLOT. \\newline\nApply the Runge-Kutta method to approximate y(0.25) and also y(0.5). Use the interval [0, 0.5001]. Use step size 0.25.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef f(x,y):\n   return y-x-1\n\ndef runge_kutta(x0,y0,x,h):\n   n(int)((x-x0)/h)\n   yy0\n   for i in range(1,n+1):\n   k1h*f(x0,y)\n   k2h*f(x0+h/2,y+k1/2)\n   k3h*f(x0+h/2,y+k2/2)\n   k4h*f(x0+h,y+k3)\n   yy+(k1+2*k2+2*k3+k4)/6\n   x0x0+h\n   return y\n\nx00\ny01\nx0.25\nh0.25\nyrunge_kutta(x0,y0,x,h)\nprint(\"y(0.25) using Runge Kutta method is:\",y)\n\nx00\ny01\nx0.5\nh0.25\nyrunge_kutta(x0,y0,x,h)\nprint(\"y(0.5) using Runge Kutta method is:\",y)\n\nxnp.linspace(0,0.5,100)\ny2+x-np.exp(x)\nplt.plot(x,y)\nplt.show()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $y(0.25)$ using Runge Kutta method is: $0.9659830729166666$ \\newline $y(0.5)$ using Runge Kutta method is: $0.8513005309634738$ \\newline \n\\includegraphics[height50mm]{18.03-q15-codex-output-plot.png} \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We define the function f(x,y) which is the differential equation. \\newline\n2. We define the exact solution function.\\newline\n3. We define the rk4 function which takes in the x,y and h values and returns the approximate solution.\\newline\n4. We define the main function which takes in the initial values of x and y and the step size h.\\newline\n5. We create a list of x and y values.\\newline\n6. We run a while loop which runs till x<0.5 and in each iteration we calculate the approximate solution using the rk4 function and append the x and y values to the list.\\newline\n7. We print the exact and approximate solutions at x0.25 and x0.5.\\\\\n\\hline\nGPT-3 response & x   y   y'   k1   k2   k3   k4   y(i+1)\ny(0)1\n0.25   1.5   0.5   0.5   1.25   1.875   2.0625   1.8125\n0.5   2.0625   1.0625   1.0625   2.3125   3.59375   3.90625   3.28125\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 16: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nRunge-Kutta Method\n\\\\\n\\hline\nOriginal question & \nSuppose that a crossbow bolt is shot straight upward with initial velocity $288$ ft/s. If its deceleration due to air resistance is $(0.04)v$, then its height $x(t)$ satisfies the initial value problem $x''   -32 - (0.04)x'; x(0)   0, x'(0)   288$. Find the maximum height that the bolt attains and the time required for it to reach this height.\\\\\n\\hline\nCodex input &\nUsing Sympy, given x''(t)-32-0.04*x'(t) and ics\\{x(0): 0, x(t).diff(t).subs(t, 0): 288\\}. Calculate the maximum of soln and print x and t.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy as sp\n\nxsp.Function('x')\ntsp.Symbol('t')\n\n#Equation\nodesp.Eq(x(t).diff(t,2),-32-0.04*x(t).diff(t))\n\n#Initial conditions\nics{x(t).diff(t).subs(t,0):288,x(0):0}\n\n#Solve the equation\nsolnsp.dsolve(ode,x(t),icsics)\n\n#Find the maximum value of soln\nmax_solnsp.solve(soln.rhs.diff(t),t)\n\n#Print the maximum value of soln\nprint(\"The maximum value of soln is:\",max_soln[0])\n\n#Print the value of x at the maximum value of soln\nprint(\"The value of x at the maximum value of soln is:\",soln.rhs.subs(t,max_soln[0]))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & The maximum value of soln is: $7.68711749369902$ \\newline\nThe value of $x$ at the maximum value of soln is: $1050.30600504079$ \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. Define the function f(t, y) that returns the derivative of y. \\newline\n2. Define the Runge-Kutta 4th order method.\\newline\n3. Set the initial conditions.\\newline\n4. Run the RK4 method.\\newline\n5. Plot the results.\\newline\n6. Print the maximum height and the time to reach the maximum height.\\\\\n\\hline\nGPT-3 response & The maximum height that the bolt attains is 9600 ft and it reaches this height in 60 s.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 17: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nEquilibrium Solutions and Stability\n\\\\\n\\hline\nOriginal question & \nUse a computer system or graphing calculator to plot a slope field and/or enough solution curves to indicate the stability or instability of each critical point of the given differential equation. $dx/dt(x^2-4)^2$\\\\\n\\hline\nCodex input &\nUse plt.streamplot to plot (x**2-4)**2. plt.streamplot(X, Y, Z, np.ones(X.shape)). \\newline\nUse Sympy to find the roots of (k**2-4)**2.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport sympy as sp\n\nx, y   sp.symbols('x y')\n\nk   sp.symbols('k')\n\nf   (k**2-4)**2\n\nroots   sp.solve(f, k)\n\nprint(roots)\n\nX, Y   np.meshgrid(np.linspace(-5, 5, 100), np.linspace(-5, 5, 100))\n\nZ   (X**2-4)**2\n\nplt.streamplot(X, Y, Z, np.ones(X.shape))\n\nplt.show()\n\\end{lstlisting} \\\\\n\\hline\nProgram solution & \\newline \\includegraphics[height50mm]{18.03-q17-codex-output-plot.png} \\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & 1. We create a grid of x and y values. \\newline\n2. We create a function f(x, y)   (x**2-4)**2.\\newline\n3. We find the roots of f(x, y)   0.\\newline\n4. We plot the function f(x, y)   0.\\newline\n5. We plot the roots of f(x, y)   0.\\\\\n\\hline\nGPT-3 response & The critical points are at (2,0) and (-2,0).\\newline\nThe slope field and solution curves indicate that the critical point at (2,0) is unstable, while the critical point at (-2,0) is stable.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 18: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nStability and the Phase Plane\n\\\\\n\\hline\nOriginal question & \nFind the critical point or points of the given autonomous system, and thereby match each system with its phase portrait. $dx/dt2*x-y, dy/dtx-3y$\\\\\n\\hline\nCodex input &\ndx/dt2*x-y, dy/dtx-3y \\newline\nUse Sympy to print the critical points. \\newline\nAfterwards, plot dx/dt2*x-y, dy/dtx-3y using streamplot\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy as sp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx, y   sp.symbols('x y')\n\nf1   2*x - y\nf2   x - 3*y\n\ncritical_points   sp.solve([f1, f2], [x, y])\nprint(critical_points)\n\nx_range   np.linspace(-5, 5, 100)\ny_range   np.linspace(-5, 5, 100)\n\nx_mesh, y_mesh   np.meshgrid(x_range, y_range)\n\ndx   2*x_mesh - y_mesh\ndy   x_mesh - 3*y_mesh\n\nplt.streamplot(x_mesh, y_mesh, dx, dy)\n\\end{lstlisting} \\\\\n\\hline\nProgram solution & $\\{x: 0, y: 0\\}$ \\newline \\includegraphics[height50mm]{18.03-q18-codex-output-plot.png} \\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & 1. We create a grid of x and y values.\\newline\n2. We create a function for dx/dt and dy/dt.\\newline\n3. We plot dx/dt and dy/dt.\\newline\n4. We find the critical points.\\newline\n5. We plot the critical points.\\\\\n\\hline\nGPT-3 response & The critical point is (0,0).\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 19: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nLinear Systems\n\\\\\n\\hline\nOriginal question & \nThe system has a single critical point $(x_0, y_0)$. Apply Theorem 2 to classify this critical point as to type and stability.   $x'(x,y)x-2y$ and $y'(x,y)3x-4y-2$\\\\\n\\hline\nCodex input &\nFind the jacobian of x'(x,y)x-2y and y'(x,y)3x-4y-2 with df/dx, df/dy, dg/dx, dg/dy. Use all([sp.re(eigenvalue)<0 for eigenvalue in eigenvalues.keys()]). Use streamplot to plot x'(x,y)x-2y and y'(x,y)3x-4y-2.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy as sp\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx, y   sp.symbols('x y')\n\nf   x - 2*y\ng   3*x - 4*y - 2\n\ndfdx   sp.diff(f, x)\ndfdy   sp.diff(f, y)\ndgdx   sp.diff(g, x)\ndgdy   sp.diff(g, y)\n\njacobian   sp.Matrix([[dfdx, dfdy], [dgdx, dgdy]])\n\neigenvalues   jacobian.eigenvals()\n\nprint(all([sp.re(eigenvalue) < 0 for eigenvalue in eigenvalues.keys()]))\n\nx_range   np.arange(-5, 5, 0.1)\ny_range   np.arange(-5, 5, 0.1)\n\nx_mesh, y_mesh   np.meshgrid(x_range, y_range)\n\nx_mesh_f   x_mesh - 2*y_mesh\ny_mesh_f   3*x_mesh - 4*y_mesh - 2\n\nplt.streamplot(x_mesh, y_mesh, x_mesh_f, y_mesh_f)\nplt.show()\n\\end{lstlisting} \\\\\n\\hline\nProgram solution & \\includegraphics[height50mm]{18.03-q19-codex-output-plot.png} \\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & 1. Define the function $f(x,y)   x-2y$ and $g(x,y)   3x-4y-2$.\\newline\n2. Find the jacobian of f(x,y) and g(x,y) with respect to x and y.\\newline\n3. Find the eigenvalues of the jacobian.\\newline\n4. Use all([sp.re(eigenvalue)<0 for eigenvalue in eigenvalues.keys()]).\\newline\n5. Use streamplot to plot $x'(x,y)x-2y$ and $y'(x,y)3x-4y-2$.\\\\\n\\hline\nGPT-3 response & The critical point is (0,0). By Theorem 2, this critical point is a saddle point. This can be verified by constructing a phase portrait for the given system, which is shown below.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 20: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nFourier Systems\n\\\\\n\\hline\nOriginal question & \nSketch the graph of the function f defined for all t by the given formula, and determine whether it is periodic. If so, find its smallest period. $f(t)\\sin(3t)$\\\\\n\\hline\nCodex input &\nCalculate the period of $f(t)\\sin(3t)$ and plot it.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nt   np.linspace(0, 2*np.pi, 1000)\nf   np.sin(3*t)\n\nplt.plot(t, f)\nplt.show()\n\n# Calculate the period\nperiod   2*np.pi/3\nprint('The period is', period)\n\\end{lstlisting} \\\\\n\\hline\nProgram solution & \\newline \\includegraphics[height50mm]{18.03-q20-codex-output-plot.png} \\newline The period is $2.0943951023931953$ \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We create a time array from 0 to 2$\\pi$.\\newline\n2. We create a function array f(t)   sin(3t).\\newline\n3. We plot the function.\\newline\n4. We calculate the period of the function.\\newline\n5. We print the period.\\\\\n\\hline\nGPT-3 response & The graph of the function is periodic with a smallest period of 2$\\pi$/3.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 21: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nTransformation of Initial Value Problems\n\\\\\n\\hline\nOriginal question & \nApply Theorem 2 to find the inverse Laplace transforms of the functions. $\\frac{1}{s(s-3)}$\\\\\n\\hline\nCodex input &\nFind the inverse laplace transform on $1/(s*(s-3))$\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import inverse_laplace_transform, symbols, simplify\nfrom sympy.abc import s, t\n\nF   inverse_laplace_transform(1/(s*(s-3)), s, t)\nprint(F)\n\\end{lstlisting} \\\\\n\\hline\nProgram solution & $5\\cos(2t)$   \\\\\n\\hline\nSolution type & Automatic Few-Shot (1)\\\\\n\\hline\nCodex code explanation &\n1. We are importing the inverse\\_laplace\\_transform function from the sympy module.\\newline\n2. We are importing the symbols function from the sympy module.\\newline\n3. We are importing the simplify function from the sympy module.\\newline\n4. We are importing the abc module from the sympy module.\\newline\n5. We are creating a variable called F and assigning it the value of the inverse\\_laplace\\_transform function.\\newline\n6. We are passing the following arguments to the inverse\\_laplace\\_transform function:\\newline\n\\hspace*{3mm}1. 1/(s*(s-3)) \\newline\n\\hspace*{3mm}2. s\\newline\n\\hspace*{3mm}3. t\\newline\n7. We are printing the value of F.\n\\\\\n\\hline\nGPT-3 response & The inverse Laplace transform of $1/(s*(s-3))$ is $e^{3t}-e^{st}$.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 22: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nTranslation and Partial Fractions\\\\\n\\hline\nOriginal question & \nUse partial fractions to find the inverse Laplace transforms of the function. $\\frac{(2s^3-s^2)}{(4s^2-4s+5)^2}$\\\\\n\\hline\nCodex input &\nUse partial fractions to find the inverse laplace transform of $(2*s^3-s^2)/(4*s^2-4*s+5)^2$\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\nfrom sympy.integrals.transforms import inverse_laplace_transform\nfrom sympy.abc import s, t\n\na   symbols('a', positiveTrue)\n\n# Partial fractions\np   (2*s**3 - s**2)/((4*s**2 - 4*s + 5)**2)\nap   apart(p, s)\n\n# Inverse laplace\nit   inverse_laplace_transform(ap, s, t)\nprint(it)\n\\end{lstlisting} \\\\\n\\hline\nProgram solution & $\\frac{1}{64}e^{\\frac{t}{2}}[(4t+8)\\cos(t) +(4-3t)\\sin(t)]$\\\\\n\\hline\nSolution type & Automatic Few-Shot (1)\\\\\n\\hline\nCodex code explanation & 1. We import the inverse\\_laplace\\_transform function from the sympy module. \\newline\n2. We import the symbols function from the sympy module.\\newline\n3. We import the simplify function from the sympy module.\\newline\n4. We import the s and t variables from the sympy.abc module.\\newline\n5. We define the function F to be the inverse Laplace transform of the function 1/(s*(s-3)).\\newline\n6. We print the function F.\\\\\n\\hline\nGPT-3 response & (2*s**3-s**2)/(4*s**2-4*s+5)**2\\newline\n\n (2*s**3-s**2)/((2*s-1)**2+4)\\newline\n\n (2*s**3-s**2)/((2*s-1-2i)(2*s-1+2i))\\newline\n\n (2*s**3-s**2)/((2*s-1)**2-4)\\newline\n\n (2*s**3-s**2)/((2*s-1)**2-4)\\newline\n\n (2*s**3-s**2)/((2*s-1)**2-4)\\newline\n\n (2*s**3-s**2)/((2*s-1)**2-4)\\newline\n\n (2*s**3-s**2)/((2*s-1)**2-4)\\newline\n\n (2*s**3-s**2)/((2*s-1)**2-4)\\newline\n\n (2*s**3-s**2)/\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 23: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nDerivatives, Integrals, and Products of Transforms\n\\\\\n\\hline\nOriginal question & \nIn Problems 15 through 22, apply either Theorem 2 or Theorem 3 to find the Laplace transform of $f(t)   t^2\\cos(2t)$\\\\\n\\hline\nCodex input &\nCompute the laplace transform of f(t)t\\^{}2(cos(2t))\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\nfrom sympy.integrals.transforms import laplace_transform\nfrom sympy.abc import t,s,a\n\nf   t**2*cos(2*t)\nF   laplace_transform(f,t,s)\nprint(F)\n\\end{lstlisting} \\\\\n\\hline\nProgram solution & $\\frac{2s(s^2 - 12)}{(s^2 + 4)^3}, 0, True $\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We import the laplace\\_transform function from the sympy module.\\newline\n2. We import the cos function from the sympy module.\\newline\n3. We import the exp function from the sympy module.\\newline\n4. We import the symbols function from the sympy module.\\newline\n5. We import the abc module from the sympy module.\\newline\n6. We define the function f(t)   t**2*cos(2*t).\\newline\n7. We find the Laplace transform of f(t) with respect to t.\\newline\n8. We print the Laplace transform of f(t).\\\\\n\\hline\nGPT-3 response & 15. L{t**2*cos(2*t)}   (s**2 + 4) / (s**4 + 8*s**2 + 16)\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 24: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nHomogeneous Equations with Constant Coefficients\n\\\\\n\\hline\nOriginal question & \nFind a general solution of $y^{\\prime\\prime} - 2iy^\\prime + 3y   0$.\\\\\n\\hline\nCodex input &\nUse sympy dsolve to find the general solution to differential equation y''-2*I*y'+3*y0\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import Function, dsolve, Eq, Derivative, sin, cos, symbols\nfrom sympy.abc import x\n\ny   Function('y')\n\n#dsolve(Derivative(y(x), x, x) + 2*I*Derivative(y(x), x) + 3*y(x), y(x))\n\ndsolve(Derivative(y(x), x, x) - 2*I*Derivative(y(x), x) + 3*y(x), y(x))\n\\end{lstlisting} \\\\\n\\hline\nProgram solution & $y(x), C_1 e^{-Ix} + C_2e^{3Ix}$ \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We import the sympy module.\\newline\n2. We import the imaginary unit I from the sympy module.\\newline\n3. We create a symbolic variable x.\\newline\n4. We create a symbolic function y.\\newline\n5. We create a symbolic equation eq.\\newline\n6. We solve the equation eq for y(x).\\newline\n7. We print the solution.\\\\\n\\hline\nGPT-3 response & $y   c_1 e^{3t} + c_2 e^{-3t}$\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.03, Question 25: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nDifferential Equations and Mathematical Models\n\\\\\n\\hline\nOriginal question & \nVerify by substitution that each given function is a solution of the given differential equation. Throughout these problems, primes denote derivatives with respect to x. Show that the derivative of $x^{3}+7$ is $3x^{2}$.\\\\\n\\hline\nCodex input &\nShow that the derivative of x**3+7 is 3*x**2\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\n\nx   Symbol('x')\n\nf   x**3 + 7\n\ndf   diff(f, x)\n\nprint(df)\n\\end{lstlisting} \\\\\n\\hline\nProgram solution & $3x^{2}$ \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We import the sympy library.\\newline\n2. We create a symbol x.\\newline \n3. We create a function f.\\newline\n4. We take the derivative of f with respect to x.\\newline\n5. We print the derivative.\\\\\n\\hline\nGPT-3 response & $y   x^2 + 1$; $y'   2x + 0   2x$\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}",
  "title": "A Neural Network Solves, Explains, and Generates University Math Problems by Program Synthesis and Few-Shot Learning at Human Level"
}
