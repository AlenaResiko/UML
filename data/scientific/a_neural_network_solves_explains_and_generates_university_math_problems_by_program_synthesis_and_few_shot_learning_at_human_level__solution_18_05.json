{
  "authors": [
    "Iddo Drori",
    "Sarah Zhang",
    "Reece Shuttleworth",
    "Leonard Tang",
    "Albert Lu",
    "Elizabeth Ke",
    "Kevin Liu",
    "Linda Chen",
    "Sunny Tran",
    "Newman Cheng",
    "Roman Wang",
    "Nikhil Singh",
    "Taylor L. Patti",
    "Jayson Lynch",
    "Avi Shporer",
    "Nakul Verma",
    "Eugene Wu",
    "Gilbert Strang"
  ],
  "date_published": "2021-12-31",
  "raw_tex": "\\section{Solutions for MIT 18.05: Introduction to Probability and Statistics}\n\\label{sec:solution-18.05}\n\n\\paragraph{Prereq} Calculus II (GIR)\n\\paragraph{Units} 4-0-8\n\\paragraph{Syllabus} Elementary introduction with applications. Basic probability models. Combinatorics. Random variables. Discrete and continuous probability distributions. Statistical estimation and testing. Confidence intervals. Introduction to linear regression.\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 1: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Probability\\\\\n   \\hline\n   Original question & In class we worked with non-transitive dice: Red: 3 3 3 3 3 6; Green: 1 4 4 4 4 4; White: 2 2 2 5 5 5. Find the probability that white beats green.\\\\\n   \\hline\n   Codex input & Given non-transitive dice: Red: 3 3 3 3 3 6; Green: 1 4 4 4 4 4; White: 2 2 2 5 5 5, write a program that computes the probability that white beats green.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport itertools\n   \nred   [3, 3, 3, 3, 3, 6]\ngreen   [1, 4, 4, 4, 4, 4]\nwhite   [2, 2, 2, 5, 5, 5]\n\ndef prob_white_beats_green(red, green, white): \n   rolls   list(itertools.product(red, green, white))\n   wins   [1 for (r, g, w) in rolls if w > g]\n   return sum(wins) / len(rolls)\n\nprob_white_beats_green(red, green, white) \n   \\end{lstlisting}\n   \\\\\n   \\hline\n   Program solution & $\\frac{7}{12}$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & \n   1. Create a deck of cards. \\newline\n2. Deal a hand of 5 cards from the deck.\\newline\n3. Check if the hand has 3 cards of the same rank.\\newline\n4. Repeat steps 2 and 3 10000 times.\\newline\n5. Calculate the probability of getting 3 of a kind in a 5 card poker\nhand. \n   \\\\\n   \\hline\n   GPT-3 response & There are 13 possible values for a three-of-a-kind poker hand:\n\n2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace\n\nThere are 4 suits, so there are 4 ways to choose 1 suit.\n\nThere are 4*13   52 ways to choose 3 cards from a deck of 52 cards.\n\nThere are C(52,3)   52!/(3!*49!)   2,598,960 ways to choose 3 cards from a deck of 52 cards.\n\nThe probability of getting a three-of-a-kind poker hand is 4/52   1/13.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\ \n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 2: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Probability\\\\\n   \\hline\n   Original question & Calculate the probability of getting a two-pair poker hand.\\\\\n   \\hline\n   Codex input & A hand is a set of 5 cards that are drawn randomly from a standard 52 card deck with 13 ranks of 4 cards each. \\newline \\newline A two-pair poker hand is a hand that contains 3 unique ranks, where no more than 2 cards in the hand can share the same rank. That is, 3 or more cards cannot share the same rank. \\newline \\newline Write a program that generates simulations for calculating the average probability of getting a two-pair poker hand.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport random\n\ndef get_rank_counts(hand):\n   \"\"\"\n   Returns a dictionary with ranks as keys and the number of cards with that rank as values.\n   \"\"\"\n   rank_counts   {}\n   for card in hand:\n   rank   card[0]\n   if rank in rank_counts:\n   rank_counts[rank] + 1\n   else:\n   rank_counts[rank]   1\n   return rank_counts\n\ndef has_two_pair(hand):\n   \"\"\"\n   Returns True if the hand has two pairs, and False otherwise.\n   \"\"\"\n   rank_counts   get_rank_counts(hand)\n   two_pair   False\n   for rank in rank_counts:\n   if rank_counts[rank]   2:\n   if two_pair:\n   return True\n   else:\n   two_pair   True\n   return False\n\ndef run_simulation():\n   \"\"\"\n   Runs a simulation of drawing 5 cards randomly from a deck of 52 cards.\n   \"\"\"\n   two_pair   0\n   for i in range(1000000):\n   deck   [r+s for r in '23456789TJQKA' for s in 'SHDC']\n   random.shuffle(deck)\n   hand   deck[:5]\n   if has_two_pair(hand):\n   two_pair + 1\n   return two_pair/1000000\n\nprint(run_simulation())\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $0.047539$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & \n   1. Define a function roll that takes a die as an argument and returns a random roll of that die.\\newline\n2. Define a function simulate that takes a number of trials as an argument and returns the fraction of trials that white beats green.\\newline\n3. Print the result of calling simulate with 10000 as the argument.\\\\\n   \\hline\n   GPT-3 response & The probability that white beats green is 3/5.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 3: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Probability\\\\\n   \\hline\n   Original question & Calculate the probability of getting a three-of-a-kind poker hand.\\\\\n   \\hline\n   Codex input & A hand is a set of 5 cards that are drawn randomly from a standard 52 card deck with 13 ranks of 4 cards each. \\newline \\newline A three-pair poker hand is a hand that contains exactly 3 cards that share one rank, 1 card of another rank, and a final card of another rank. \\newline \\newline Write a program that generates simulations for calculating the average probability of getting a three-pair poker hand.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport random\n\ndef get_rank_counts(hand):\n   \"\"\"\n   Return a dictionary with ranks as keys and their counts as values.\n   \"\"\"\n   ranks   [card[0] for card in hand]\n   return {rank: ranks.count(rank) for rank in ranks}\n\ndef is_three_pair(hand):\n   \"\"\"\n   Return True if hand is a three pair hand.\n   \"\"\"\n   rank_counts   get_rank_counts(hand)\n   return 3 in rank_counts.values()\n\ndef get_three_pair_probability(n):\n   \"\"\"\n   Return the probability of getting a three pair hand.\n   \"\"\"\n   three_pair_count   0\n   for _ in range(n):\n   deck   [\n   '2C', '2D', '2H', '2S',\n   '3C', '3D', '3H', '3S',\n   '4C', '4D', '4H', '4S',\n   '5C', '5D', '5H', '5S',\n   '6C', '6D', '6H', '6S',\n   '7C', '7D', '7H', '7S',\n   '8C', '8D', '8H', '8S',\n   '9C', '9D', '9H', '9S',\n   'TC', 'TD', 'TH', 'TS',\n   'JC', 'JD', 'JH', 'JS',\n   'QC', 'QD', 'QH', 'QS',\n   'KC', 'KD', 'KH', 'KS',\n   'AC', 'AD', 'AH', 'AS'\n   ]\n   hand   random.sample(deck, 5)\n   if is_three_pair(hand):\n   three_pair_count + 1\n   return three_pair_count / n\n\nprint(get_three_pair_probability(1000000))\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $0.021128$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. Define a function that takes a list of dice and returns a random value from that list.\\newline\n2. Define a function that takes two lists of dice and a number of trials.\\newline\n3. Run the simulation a number of times and return the probability that the first dice wins.\n\\\\\n   \\hline\n   GPT-3 response & The probability that green beats red is 3/5.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 4: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Probability\\\\\n   \\hline\n   Original question & In class we worked with non-transitive dice: Red: 3 3 3 3 3 6; Green: 1 4 4 4 4 4; White: 2 2 2 5 5 5. Find the probability that green beats red.\\\\\n   \\hline\n   Codex input & Given two non-transitive dice: \\newline Red: 3 3 3 3 3 6; \\newline Green: 1 4 4 4 4 4. \\newline Write a program that computes the probability that green beats red.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\ndef dice_prob(dice1, dice2):\n   \"\"\"\n   dice1: list of dice 1\n   dice2: list of dice 2\n   \"\"\"\n   # Your code here\n   red_wins   0\n   green_wins   0\n   for i in dice1:\n   for j in dice2:\n   if i > j:\n   red_wins + 1\n   elif j > i:\n   green_wins + 1\n   return green_wins / (red_wins + green_wins)\n\n# Test Cases\ndice1   [3, 3, 3, 3, 3, 6]\ndice2   [1, 4, 4, 4, 4, 4]\nprint(dice_prob(dice1, dice2))\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $\\frac{25}{36}$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. We start by initializing the variables both\\_girls, older\\_girl, and either\\_girl to 0.\\newline\n2. We then loop 10000 times, each time randomly choosing a kid to be older and another to be younger.\\newline\n3. If the older kid is a girl, we increment older\\_girl.\\newline\n4. If both kids are girls, we increment both\\_girls.\\newline\n5. If at least one of the kids is a girl, we increment either\\_girl.\\newline\n6. Finally, we print the probabilities of both kids being girls given that the older kid is a girl, and given that at least one kid is a girl.\\\\\n   \\hline\n   GPT-3 response & There is a 1/4 chance that both children are girls.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 5: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Conditional Probability\\\\\n   \\hline\n   Original question & Mr. Smith has two children. At least one of them is a boy. What is the probability that both children are boys?\\\\\n   \\hline\n   Codex input & Write a program that computes the probability that both children are boys given that one of them is a boy. \\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\n# probability that one child is a boy\np_one_boy   1/4\n\n# probability that both children are boys\np_both_boys   1/4\n\n# probability that one of them is a boy\np_one_is_boy   3/4\n\n# probability that both children are boys given that one of them is a boy\np_both_boys_given_one_boy   p_both_boys / p_one_is_boy\n\nprint(p_both_boys_given_one_boy)\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $\\frac{1}{3}$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. We start by initializing the variables both\\_girls, older\\_girl, and either\\_girl to 0.\\newline\n2. We then simulate 10,000 families, and for each family we simulate two children.\\newline\n3. If the older child is a girl, we increment older\\_girl.\\newline\n4. If both children are girls, we increment both\\_girls.\\newline\n5. If at least one of the children is a girl, we increment either\\_girl.\\newline\n6. Finally, we compute the probabilities we are interested in.\\\\\n   \\hline\n   GPT-3 response & There is a 50\\ chance that both children are boys.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 6: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Discrete Random Variables, Standard Deviation\\\\\n   \\hline\n   Original question & Let X be the result of rolling a fair 4-sided die. Let Y be the result of rolling a fair 6-sided die. Let Z be the average of X and Y. Find the standard deviation of X.\\\\\n   \\hline\n   Codex input & In Probability, \\newline Write a program that computes the variance and standard deviation of rolling a fair 4-sided die 1000000 times.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport random\n\ndef variance(lst):\n   mean   sum(lst) / len(lst)\n   return sum((i - mean) ** 2 for i in lst) / len(lst)\n\ndef standard_deviation(lst):\n   return variance(lst) ** 0.5\n\ndef main():\n   lst   []\n   for i in range(1000000):\n   lst.append(random.randint(1, 4))\n   print(variance(lst))\n   print(standard_deviation(lst))\n\nif __name__   '__main__':\n   main()\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $1.118$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. It's defining a function called roll\\_die() that returns a random integer between 1 and 4.\\newline\n2. It's defining a function called roll\\_die\\_100000\\_times() that returns a list of 100000 random integers between 1 and 4.\\newline\n3. It's defining a function called standard\\_deviation() that returns the standard deviation of a list of numbers.\\newline\n4. It's defining a function called main() that prints the standard deviation of the list of 100000 random integers between 1 and 4.\\newline\n5. It's calling the main() function.\\\\\n   \\hline\n   GPT-3 response & The standard deviation of X is 1.41.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 7: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Discrete Random Variables, Standard Deviation\\\\\n\\hline\nOriginal question & Let X be the result of rolling a fair 4-sided die. Let Y be the result of rolling a fair 6-sided die. Let Z be the average of X and Y. Find the standard deviation of Y.\\\\\n\\hline\nCodex input & In Probability, Write a program that computes the variance and standard deviation of rolling a fair 6-sided die 1000000 times.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\n\ndef std_dev(n):\n   return np.std(np.random.randint(1,7,n))\n\nprint(std_dev(100000))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $1.708$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation &\n   1. It's creating a function called std\\_dev that takes one argument, n.\\newline\n2. It's creating a numpy array of random integers between 1 and 6, with n elements.\\newline\n3. It's calculating the standard deviation of the array.\\newline\n4. It's returning the standard deviation.\\newline\n5. It's printing the standard deviation of a numpy array of 100,000 random integers between 1 and 6.\n\\\\\n\\hline\nGPT-3 response & The standard deviation of Y is 2.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 8: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Discrete Random Variables, Standard Deviation\\\\\n   \\hline\n   Original question & Let X be the result of rolling a fair 4-sided die. Let Y be the result of rolling a fair 6-sided die. Let Z be the average of X and Y. Find the standard deviation of Z.\\\\\n   \\hline\n   Codex input & Let X be the result of rolling a fair 4-sided die. Let Y be the result of rolling a fair 6-sided die. Let Z be the average of X and Y. Write a program that computes the standard deviation of Z. \\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport random\n\ndef roll_die(sides):\n   return random.randint(1, sides)\n\ndef simulate_rolls(sides1, sides2, num_trials):\n   results   []\n   for _ in range(num_trials):\n   results.append((roll_die(sides1) + roll_die(sides2)) / 2)\n   return results\n\ndef standard_deviation(nums):\n   mean   sum(nums) / len(nums)\n   squared_diffs   [(num - mean) ** 2 for num in nums]\n   return (sum(squared_diffs) / len(nums)) ** 0.5\n\nprint(standard_deviation(simulate_rolls(4, 6, 100000)))\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $1.021$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\nCodex code explanation & \n1. We define a function called roll\\_die that takes in a number of sides and returns a random number between 1 and that number.\\newline\n2. We define a function called simulate\\_rolls that takes in two numbers of sides and a number of trials. It returns a list of the average of the two dice rolls for each trial.\\newline\n3. We define a function called standard\\_deviation that takes in a list of numbers and returns the standard deviation of those numbers.\\newline\n4. We print the standard deviation of the average of two dice rolls, each with 4 sides, for 100,000 trials.\n\\\\\n   \\hline\n   GPT-3 response &The standard deviation of Z is 2.5. \\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 9: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Discrete Random Variables, Expectation\\\\\n   \\hline\n   Original question & Let X be the result of rolling a fair 4-sided die. Let Y be the result of rolling a fair 6-sided die. You win 2X dollars if X>Y and lose 1 dollar otherwise. After playing this game 60 times, what is your expected total gain?\\\\\n   \\hline\n   Codex input & In Probability, \\newline X is the result of rolling a fair 4-sided die and Y is the result of rolling a fair 6-sided die. You win 2X if X > Y and lose 1 otherwise. \\newline Write a program that computes the expected total gain after rolling both dice 60 times.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport random\n\ndef roll_dice(): \n   return random.randint(1, 4)\n\ndef roll_dice_6():\n   return random.randint(1, 6)\n\ndef play_game():\n   total_gain   0\n   for i in range(60):\n   x   roll_dice()\n   y   roll_dice_6()\n   if x > y:\n   total_gain + 2 * x\n   else:\n   total_gain - 1\n   return total_gain\n\ndef main():\n   total_gain   0\n   for i in range(1000):\n   total_gain + play_game()\n   print(total_gain / 1000)\n\nif __name__   '__main__':\n   main()\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $55$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. It's creating a class called Die.\\newline\n2. It's defining a constructor for the class.\\newline\n3. It's defining a method called roll.\\newline\n4. It's defining a method called get\\_num\\_sides.\\newline\n5. It's defining a method called set\\_num\\_sides.\\\\\n   \\hline\n   GPT-3 response & Your expected total gain is 30 dollars.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 10: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Counting, Continuous Variables\\\\\n   \\hline\n   Original question & Boxes of Raisin Bran cereal are 30cm tall. Due to settling, boxes have a higher density of raisins at the bottom (h   0) than at the top (h   30). Suppose the density (in raisins per cm of height) is given by f(h)   40 - h. How many raisins are in a box?\\\\\n   \\hline\n   Codex input & Boxes of Raisin Bran cereal are 30cm tall. \\newline Suppose the density of raisins per cm of height is given by f(h)   40 - h. \\newline Using scipy.integrate, write a program that computes how many raisins are in a box.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport numpy as np\nimport scipy.integrate as integrate\n\ndef f(h):\n   return 40 - h\n\ndef integrate_f(a, b):\n   return integrate.quad(f, a, b)\n\nprint(integrate_f(0, 30))\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $750$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. Define a function f(h) that returns the density of raisins at height h.\\newline\n2. Define a function F(h) that returns the number of raisins between 0 and h.\\newline\n3. Print the number of raisins between 0 and 30.\\\\\n   \\hline\n   GPT-3 response & There are 1200 raisins in a box.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 11: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Probability, Continuous Variables\\\\\n   \\hline\n   Original question & Boxes of Raisin Bran cereal are 30cm tall. Due to settling, boxes have a higher density of raisins at the bottom (h   0) than at the top (h   30). Suppose the density (in raisins per cm of height) is given by f(h)   40 - h. What is the probability that a random raisin is in the bottom third of the box?\\\\\n   \\hline\n   Codex input & h ranges from 0 to 30. Integrate f(h)   40 - h from 0 to 10. Divide by the integration of h from 0 to 30.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\ndef f(h):\n   return 40 - h\n\ndef integrate(f, a, b, N):\n   \"\"\"\n   Integrates f from a to b using N intervals\n   \"\"\"\n   dx   (b - a) / N\n   total   0\n   for i in range(N):\n   total + f(a + i * dx)\n   return total * dx\n\nprint(integrate(f, 0, 10, 100000) / integrate(f, 0, 30, 100000))\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $\\frac{7}{15}$\\\\\n   \\hline\n   Solution type & Automatic Few-Shot (1)\\\\\n   \\hline\n   Codex code explanation & 1. f(h) is the density function. It gives the probability of a raisin being at height h.\\newline\n2. F(h) is the cumulative distribution function. It gives the probability of a raisin being at height h or below.\\newline\n3. The probability of a raisin being in the bottom third of the box is the probability of it being at height 10 or below, minus the probability of it being at height 0 or below.\\newline\n4. The probability of a raisin being at height 0 or below is 0.\\newline\n5. The probability of a raisin being at height 10 or below is F(10).\\newline\n6. The probability of a raisin being at height 30 or below is 1.\\newline\n7. The probability of a raisin being at height 30 or below is F(30).\\newline\n8. The probability of a raisin being at height 10 or below, minus the probability of it being at height 0 or below, is (F(10) - F(0))/(F(30) - F(0)).\\\\\n   \\hline\n   GPT-3 response & The probability that a random raisin is in the bottom third of the box is 0.75.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 12: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Prior Odds\\\\\n   \\hline\n   Original question & You have a drawer that contains 50 coins. 10 coins have probability p   0.3 of heads, 30 coins have probability p   0.5 and 10 coins have probability p   0.7. You pick one coin at random from the drawer and flip it. What are the (prior) odds you chose a 0.3 coin?\\\\\n   \\hline\n   Codex input & You have a drawer that contains 10 white coins and 40 black coins. \\newline You pick one coin at random from the drawer. Write a program that computes the odds that you chose a white coin. \\newline \\newline In probability, the odds of an event E is P(E)/P(E\\char`\\^c).\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\n# P(E)   10/50\n# P(E^c)   40/50\n# odds   P(E)/P(E^c)   10/40\n\nprint(10/40)\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $\\frac{1}{4}$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. Simulate T1, T2, and T3\\newline\n2. Simulate T   min(T1, T2, T3)\\newline\n3. Estimate E[T]\\\\\n   \\hline\n   GPT-3 response & The expected time before one of the bulbs fails is 1.67 years.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 13: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Joint Distributions\\\\\n   \\hline\n   Original question & Suppose X and Y have joint pdf $f(x, y)   c(x^2+xy)$ on [0, 1] \u00d7 [0, 1]. Find c.\\\\\n   \\hline\n   Codex input & Define variables x, y, c. \\newline Using Sympy, integrate f(x, y)   c(x\\char`\\^2+xy) from 0 to 1 for x and 0 to 1 for y; set it equal to 1 in an equation. Find c that makes the expression 1.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport sympy as sp\n\nx, y, c   sp.symbols('x y c')\n\nf   c * (x**2 + x*y)\n\nsp.integrate(f, (x, 0, 1), (y, 0, 1))\n\nsp.solve(sp.Eq(1, sp.integrate(f, (x, 0, 1), (y, 0, 1))), c)\n   \\end{lstlisting}\n   \\\\\n   \\hline\n   Program solution & $\\frac{12}{7}$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. The population proportion is 0.5\\newline\n2. The sample size is 400\\newline\n3. The sample proportion is 0.525\\newline\n4. The standard deviation of the sample proportion is\\newline\n5. The z-score is\\newline\n6. The probability is\\\\\n   \\hline\n   GPT-3 response & The central limit theorem says that the distribution of the sample mean will be normal for large sample sizes. We can use this to find the probability that at least 52.5\\ of those polled prefer Erika.\n\nWe know that the mean of the distribution is 0.5 and the standard deviation is 0.2. We can use the z-score formula to find the z-score corresponding to 52.5.\n\nz   (52.5\\ - 0.5) / 0.2\n\nz   2.5\n\nThe probability that the poll will result in at least 52.5\\ of people preferring Erika is 0.9938.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 14: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Central Limit Theorem, Probability\\\\\n   \\hline\n   Original question & To head the newly formed US Dept. of Statistics, suppose that 50\\ of the population supports Erika, 20\\ supports Ruthi, and the rest are split between Peter, Jon and Jerry. A poll asks 400 random people who they support. Use the central limit theorem to estimate the probability that at least 52.5\\ of those polled prefer Erika?\\\\\n   \\hline\n   Codex input & Suppose that 50\\ of the population supports Erika. A poll asks 400 random people who they support. \\newline Write a program that uses the central limit theorem to compute the probability that at least 52.5\\ of those polled support Erika.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport random\n\ndef poll(n):\n   \"\"\"\n   n: number of people polled\n   returns: percentage of people in favor of Erika\n   \"\"\"\n   # generate a list of n random numbers between 0 and 1\n   # if the number is less than 0.5, the person is in favor of Erika\n   # if the number is greater than 0.5, the person is in favor of Erica\n   # return the percentage of people in favor of Erika\n   count   0\n   for i in range(n):\n   if random.random() < 0.5:\n   count + 1\n   return count / n\n\ndef poll_prob(n, m):\n   \"\"\"\n   n: number of people polled\n   m: number of times the poll is conducted\n   returns: probability that at least 52.5 of the population supports Erika\n   \"\"\"\n   # run poll_prob() m times\n   # count the number of times the poll is in favor of Erika\n   # return the number of times the poll is in favor of Erika divided by m\n   count   0\n   for i in range(m):\n   if poll(n) > 0.525:\n   count + 1\n   return count / m\n\nprint(poll_prob(400, 10000))\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $0.16$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. The population proportion is 0.3\\newline\n2. The sample size is 400\\newline\n3. The sample proportion is 0.25\\newline\n4. The standard deviation of the sample proportion is\\newline\n5. The z-score is\\newline\n6. The probability is\\\\\n   \\hline\n   GPT-3 response & The central limit theorem states that the distribution of the sample mean will be normal for large sample sizes. In this case, the sample size is 400, which is considered large. The mean of the distribution will be the population mean, which is 50\\ for Erika, 20\\ for Ruthi, and 30\\ for Peter, Jon, and Jerry combined. The standard deviation of the distribution will be the population standard deviation divided by the square root of the sample size. The population standard deviation is unknown, but can be estimated using the sample standard deviation. The sample standard deviation can be calculated using the following formula:\n\ns   $\\sqrt{[(n-1)\\sum(x-\\mu)^2/n]}$\n\nwhere n is the sample size, x is each individual value, and $\\mu$ is the mean.\n\nIn this case, the mean is 30\\ and the sample size is 400. Plugging these values into the formula above gives us:\n\n$s   \\sqrt{[(400-1)\\sum(x-30)^2/400]}$\n\n$s   \\sqrt{[399\\sum(x-30)^2/400]}$\n\n$s   \\sqrt{[399(0.3^2+0.2^2+0.1^2+0.1^2+0.1^2)/400]}$\n\n$s   \\sqrt{[399(0.09+0.04+0.01+0.01+0.01)/400]}$\n\n$s   \\sqrt{[399(0.16)/400]}$\n\n$s   \\sqrt{[0.064]}$\n\n$s   0.25$\n\nThe standard deviation of the distribution is 0.25. The distribution will be normal with a mean of 30\\ and a standard deviation of 0.25.\n\nTo find the probability that less than 25\\ of those polled prefer Peter, Jon, or Jerry, we need to find the area under the curve to the left of 25\\. This can be done using a z-score. The z-score is calculated using the following formula:\n\n$z   (x-\\mu)/\\sigma$\n\nwhere x is the value, $\\mu$ is the mean, and $\\sigma$ is the standard deviation.\n\nIn this case, x is 25\\, $\\mu$ is 30\\, and $\\sigma$ is 0.25. Plugging these values into the formula above gives us:\n\nz   (0.25-0.3)/0.25\n\nz   -0.2/0.25\n\nz   -0.8\n\nThe z-score is -0.8. To find the area under the curve to the left of 25\\, we need to find the area under the curve to the left of -0.8. This can be done using a z-table. The area under the curve to the left of -0.8 is 0.22. This means that the probability that less than 25\\ of those polled prefer Peter, Jon, or Jerry is 0.22.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 15: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Central Limit Theorem, Probability\\\\\n   \\hline\n   Original question & To head the newly formed US Dept. of Statistics, suppose that 50\\ of the population supports Erika, 20\\ supports Ruthi, and the rest are split between Peter, Jon and Jerry. A poll asks 400 random people who they support. Use the central limit theorem to estimate the probability that less than 25\\ of those polled prefer Peter, Jon or Jerry?\\\\\n   \\hline\n   Codex input & Suppose that 30\\ of the population supports Peter. A poll asks 400 random people who they support. \\newline Write a program that uses the central limit theorem to compute the probability that less than 25\\ of those polled support Peter.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport random\n\ndef poll(n, p):\n   count   0\n   for i in range(n):\n   if random.random() < p:\n   count + 1\n   return count\n\ndef main():\n   peter_support   0.3\n   n   400\n   p   0.25\n   poll_size   1000\n   count   0\n   for i in range(poll_size):\n   if poll(n, peter_support) < p * n:\n   count + 1\n   print(count / poll_size)\n\nif __name__   \"__main__\":\n   main()\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $0.0145$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. Generate a random number between 0 and 60\\newline\n2. If the number is less than 30, add 1 to the count\\newline\n3. Repeat this process n times\\newline\n4. Divide the count by n to get the probability\\\\\n   \\hline\n   GPT-3 response & The probability that Alice arrives before 12:30 is 0.5.\\\\\n   \\hline\n   GPT-3 evaluation & Correct\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 16: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Uniform Random Variables, Probability\\\\\n   \\hline\n   Original question & Alice and Bob are trying to meet for lunch and both will arrive, independently of each other, uniformly and at random between noon and 1pm. Let A and B be the number of minutes after noon at which Alice and Bob arrive, respectively. Then A and B are independent uniformly distributed random variables on [0, 60]. Find the probability that Alice arrives before 12:30.\\\\\n   \\hline\n   Codex input & A and B are trying to meet for lunch between 12:00 and 1:00. Alice and Bob arriving for lunch are independent and uniformly distributed events. \\newline Write a function that finds the probability that A arrives before 12:30.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\ndef prob_a_before_1230(a, b):\n   return a / (a + b)\n\nprint(prob_a_before_1230(0.5, 0.5))\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $\\frac{1}{2}$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. Generate n random numbers between 0 and 60 for A and B\\newline\n2. Calculate the absolute difference between A and B\\newline\n3. Count the number of times the absolute difference is less than or equal to 15\\newline\n4. Divide the number of times the absolute difference is less than or equal to 15 by n\\\\\n   \\hline\n   GPT-3 response & The probability that Alice and Bob will have lunch together is 0.25.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 17: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Uniform Random Variables, Probability\\\\\n   \\hline\n   Original question & Alice and Bob are trying to meet for lunch and both will arrive, independently of each other, uniformly and at random between noon and 1pm. Let A and B be the number of minutes after noon at which Alice and Bob arrive, respectively. Then A and B are independent uniformly distributed random variables on [0, 60]. Now suppose that Alice and Bob are both rather impatient and will leave if they have to wait more than 15 minutes for the other to arrive. What is the probability that Alice and Bob will have lunch together?\\\\\n   \\hline\n   Codex input & Alice and Bob are trying to meet for lunch and both will arrive, independently of each other, uniformly and at random between 12pm and 1pm. Suppose that Alice and Bob are both rather impatient and will leave if they have to wait more than 15 minutes for the other to arrive. Write a function that randomly computes the probability that Alice and Bob will have lunch together.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport random\n\ndef lunch_together():\n   # Alice arrives at time\n   time_a   random.uniform(0, 60)\n   # Bob arrives at time\n   time_b   random.uniform(0, 60)\n   # If both arrive within 15 minutes of each other, they have lunch together\n   if abs(time_a - time_b) < 15:\n   return True\n   else:\n   return False\n\ndef prob_lunch_together():\n   # Run lunch_together() 10,000 times\n   count   0\n   for i in range(10000):\n   if lunch_together():\n   count + 1\n   # Return probability\n   return count / 10000\n\nprint(prob_lunch_together())\n   \\end{lstlisting} \\\\\n   \\hline\n   Program solution & $\\frac{7}{16}$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. It's creating a class called UniformDistribution.\\newline\n2. It's creating a method called \\_\\_init\\_\\_ which is a special method that is called when you create an instance of the class.\\newline\n3. It's creating a method called pdf which is a probability density function.\\newline\n4. It's creating a method called cdf which is a cumulative density function.\\newline\n5. It's creating a method called ppf which is a percent point function.\\newline\n6. It's creating a method called rvs which is a random variate function.\n\\\\\n   \\hline\n   GPT-3 response & The maximum likelihood estimate for the parameter a is 1.2.\\\\\n   \\hline\n   GPT-3 evaluation & Correct\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 18: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Prior Odds\\\\\n   \\hline\n   Original question & You have a drawer that contains 50 coins. 10 coins have probability p   0.3 of heads, 30 coins have probability p   0.5 and 10 coins have probability p   0.7. You pick one coin at random from the drawer and flip it. What are the (prior) odds you chose a 0.7 coin?\\\\\n   \\hline\n   Codex input & You have a drawer that contains 10 white coins and 40 black coins. \\newline You pick one coin at random from the drawer. Write a program that computes the odds that you chose a white coin. \\newline \\newline In probability, the odds of an event E is P(E)/P(E\\char`\\^c).\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\n# P(E)   10/50\n# P(E^c)   40/50\n# odds   P(E)/P(E^c)   10/40\n\nprint(10/40)\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $\\frac{1}{4}$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. It's initializing the class with a parameter a.\\newline\n2. It's defining a method called sample which takes a parameter n and returns n samples from the uniform distribution.\\newline\n3. It's defining a method called log\\_likelihood which takes a parameter x and returns the log likelihood of x.\\\\\n   \\hline\n   GPT-3 response & The maximum likelihood estimate for the parameter b is 10.5.\\\\\n   \\hline\n   GPT-3 evaluation & Correct\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 19: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Null Hypothesis Significance Testing, Type I Error\\\\\n   \\hline\n   Original question & One generates a number x from a uniform distribution on the interval $[0, \\theta]$. One decides to test H0: $\\theta$   2 against HA: $\\theta$   2 by rejecting H0 if x $\\leq$ 0.1 or x $\\geq$ 1.9. Compute the probability of a type I error.\\\\\n   \\hline\n   Codex input & One generates a number x from a uniform distribution on the interval [0, $\\theta$]. \\newline One decides to test H0: $\\theta$   2 against HA: $\\theta$   2 by rejecting H0 if x $\\leq$ 0.1 or x $\\geq$ 1.9. \\newline Using numpy, write a program that computes the probability of a type I error.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport numpy as np\n\ntheta   2\nn   100000\n\nx   np.random.uniform(0, theta, n)\n\ntype_I_error   np.sum(x < 0.1) + np.sum(x > 1.9)\n\nprint(type_I_error / n)\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $0.1$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. Generate a random number x from a uniform distribution on the interval [0, $\\theta$]\\newline\n2. Test the hypothesis that $\\theta$   2 by rejecting H0 if x $\\leq$ 0.1 or x $\\geq$ 1.9\\newline\n3. Simulate the probability of a type I error\\\\\n   \\hline\n   GPT-3 response & The probability of a type I error is 0.2.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 20: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Null Hypothesis Significance Testing, Type II Error\\\\\n   \\hline\n   Original question & One generates a number x from a uniform distribution on the interval $[0, \\theta]$. One decides to test H0: $\\theta$   2 against HA: $\\theta$   2 by rejecting H0 if x $\\leq$ 0.1 or x $\\geq$ 1.9. Compute the probability of a type II error if the true value of $\\theta$ is 2.5.\\\\\n   \\hline\n   Codex input & One generates a number x from a uniform distribution on the interval [0, $\\theta$]. \\newline \\newline One decides to test H0 : $\\theta$   2 against HA : $\\theta$   2 by rejecting H0 if x $\\leq$ 0.1 or x $\\geq$ 1.9, and accepted otherwise. \\newline \\newline Given that $\\theta$   2.5, write a program that computes the type II error. \\newline \\newline The type II error is the probability that the null hypothesis is mistakenly accepted.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport numpy as np\n\ntheta   2.5\n\ndef type_II_error(theta, x):\n   return 1 - np.sum(np.logical_or(x < 0.1, x > 1.9)) / len(x)\n\nx   np.random.uniform(0, theta, 100000)\n\nprint(type_II_error(theta, x))\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $0.72$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. Generate a random number x from a uniform distribution on the interval [0, $\\theta$].newline\n2. Test the hypothesis that $\\theta$   2.\\newline\n3. If the hypothesis is rejected, increment the number of type II errors.\\newline\n4. Repeat steps 1-3 a large number of times.\\newline\n5. Compute the probability of a type II error by dividing the number of type II errors by the number of simulations.\\\\\n   \\hline\n   GPT-3 response & The probability of a type II error is 0.4.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 21: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Uniform Random Variables, Maximum Likelihood Estimator\\\\\n   \\hline\n   Original question & Suppose we have data $1.2, 2.1, 1.3, 10.5, 5$ which we know is drawn independently from a uniform (a, b) distribution. Give the maximum likelihood estimate for the parameter a.\\\\\n   \\hline\n   Codex input & Suppose we have the data [1.2, 2.1, 1.3, 10.5, 5] which is drawn independently from a uniform distribution (a, b). Write a function that computes parameter a's maximum likelihood estimate.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport numpy as np\n\ndef mle(data):\n   return np.min(data)\n\ndata   [1.2, 2.1, 1.3, 10.5, 5]\nprint(mle(data))\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $1.2$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. We have a class called Coin.\\newline\n2. We have a method called \\_\\_init\\_\\_ which is the constructor.\\newline\n3. We have a method called flip which returns a random number between 0 and 1.\\newline\n4. We have a method called get\\_probability which returns the probability of the coin.\\newline\n5. We have a method called get\\_side which returns the side of the coin.\\\\\n   \\hline\n   GPT-3 response & There are 50 coins in the drawer. 10 of those coins have probability p   0.3 of heads, 30 coins have probability p   0.5 and 10 coins have probability p   0.7. This means that the probability of choosing a 0.3 coin is 10/50   0.2. The odds of choosing a 0.3 coin are 0.2 : 0.8.\\\\\n   \\hline\n   GPT-3 evaluation & Correct\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 22: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Exponential Random Variables\\\\\n   \\hline\n   Original question & Suppose we are testing 3 different brands of light bulbs B1, B2, and B3 whose lifetimes are exponential random variables with mean $\\frac{1}{2}$, $\\frac{1}{3}$, and $\\frac{1}{5}$ years, respectively. Assuming that all of the bulbs are independent, what is the expected time before one of the bulb fails.\\\\\n   \\hline\n   Codex input & We are testing 3 light bulbs B1, B2, and B3 whose lifetimes are exponential random variables with mean 1/2, 1/3, and 1/5 years, respectively. Write a function to compute the expected time before one of the bulb fails.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport numpy as np\n\ndef expected_time_before_one_bulb_fails(bulb1_mean, bulb2_mean, bulb3_mean):\n   return 1/((1/bulb1_mean) + (1/bulb2_mean) + (1/bulb3_mean))\n\nprint(expected_time_before_one_bulb_fails(1/2, 1/3, 1/5))\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $0.1$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. We have a class called Coin.\\newline\n2. We have a constructor that takes in the probability of heads.\\newline\n3. We have a method called flip that returns a random number between 0 and 1. If the random number is less than the probability of heads, we return heads. Otherwise, we return tails.\\\\\n   \\hline\n   GPT-3 response & The odds of choosing a 0.5 coin are 3:1.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 23: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Confidence Intervals\\\\\n   \\hline\n   Original question & Suppose $\\mu$ is the average height of a college male. You measure the heights (in inches) of twenty college men, getting data x1,...,x20, with sample mean x   69.55 in. and sample 2 variance s   14.26 $in^2$. Suppose that the xi are drawn from a normal distribution with unknown mean $\\mu$ and unknown variance $\\sigma^2$. Now suppose you are told that the height of a college male is normally distributed with standard deviation 3.77 in. How many people in total would you need to measure to bring the width of the 90\\ z\u2013confidence interval down to 1 inch?\\\\\n   \\hline\n   Codex input & A gaussian distribution has mean 69.55 and variance of 14.26. Calculate the stdev. Calculate the number of samples needed to make the 90\\ z-confidence interval 0.5. Square and round to the next highest number.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\n# Calculate the stdev\nstdev   14.26**0.5\n\n# Calculate the number of samples needed to make the 90 z-confidence interval 0.5\nn   (stdev*1.645)/0.5\n\n# Square and round to the next highest number\nn   int(n**2) + 1\n\nprint(n)\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $155$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. Import the math module\\newline\n2. Set the mean and variance\\newline\n3. Calculate the standard deviation\\newline\n4. Calculate the number of samples needed to make the 90\\ z-confidence interval 0.5\\\\\n   \\hline\n   GPT-3 response & You would need to measure a total of 90 people to bring the width of the 90\\ z\u2013confidence interval down to 1 inch.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 24: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Conditional Probability\\\\\n   \\hline\n   Original question & Mr. Jones has two children. The older child is a girl. What is the probability that both children are girls?\\\\\n   \\hline\n   Codex input & There probability of a person being a girl is 1/2. There are two people. One is a girl. Write a program to compute and print the probability of the other being a girl.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\ndef prob_girl(p):\n   return 1 - p\n\nprint(prob_girl(0.5))\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $\\frac{1}{2}$\\\\\n   \\hline\n   Solution type & Automatic Zero-Shot\\\\\n   \\hline\n   Codex code explanation & 1. Define the variables x and y\\newline\n2. Define the function $f(x, y)   c(x^2 + xy)$\\newline\n3. Integrate $f(x, y)$ over the region [0, 1] x [0, 1]\\newline\n4. Divide 1 by the integral to find c\\newline\n5. Simplify c\\\\\n   \\hline\n   GPT-3 response & c   1/3\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.05, Question 25: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n   \\hline\n   Topic & Uniform Random Variables, Maximum Likelihood Estimator\\\\\n   \\hline\n   Original question & Suppose we have data $1.2, 2.1, 1.3, 10.5, 5$ which we know is drawn independently from a uniform (a, b) distribution. Give the maximum likelihood estimate for the parameter b.\\\\\n   \\hline\n   Codex input & Suppose we have the data [1.2, 2.1, 1.3, 10.5, 5] which is drawn independently from a uniform distribution (a, b). Write a function that computes parameter b's maximum likelihood estimate.\\\\\n   \\hline\n   Codex code & \\begin{lstlisting}\nimport numpy as np\n\ndef mle(data):\n   return np.max(data)\n\ndata   np.array([1.2, 2.1, 1.3, 10.5, 5])\nprint(mle(data))\n   \\end{lstlisting}\\\\\n   \\hline\n   Program solution & $10.5$\\\\\n   \\hline\n   Solution type & Automatic Few-Shot (1)\\\\\n   \\hline\n   Codex code explanation & \n   1. Create a deck of cards.\\newline\n2. Deal a hand of 5 cards from the deck.\\newline\n3. Check if the hand has 2 pairs of cards.\\newline\n4. Repeat steps 2 and 3 10000 times.\\newline\n5. Calculate the probability of getting a two-pair hand.\\\\\n   \\hline\n   GPT-3 response & There are 13 possible pairs of cards: Aces-Aces, Aces-Twos, Aces-Threes, Aces-Fours, Aces-Fives, Aces-Sixes, Aces-Sevens, Aces-Eights, Aces-Nines, Aces-Tens, Aces-Jacks, Aces-Queens, Aces-Kings\n\nThere are 4 possible suits for each card: Hearts, Diamonds, Spades, Clubs\n\nThere are 2 possible ways to get a two-pair poker hand:\n\n1) You can have two pairs of the same card, such as two Aces and two Eights.\n\n2) You can have two pairs of different cards, such as an Ace and a King of Hearts, and an Ace and a King of Diamonds.\n\nThe probability of getting a two-pair poker hand is 2/13 * 4/13 * 4/13   8/2197.\\\\\n   \\hline\n   GPT-3 evaluation & Incorrect\\\\\n   \\hline\n\\end{longtable}",
  "title": "A Neural Network Solves, Explains, and Generates University Math Problems by Program Synthesis and Few-Shot Learning at Human Level"
}
