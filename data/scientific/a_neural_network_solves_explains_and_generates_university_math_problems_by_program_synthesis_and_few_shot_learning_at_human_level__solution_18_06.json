{
  "authors": [
    "Iddo Drori",
    "Sarah Zhang",
    "Reece Shuttleworth",
    "Leonard Tang",
    "Albert Lu",
    "Elizabeth Ke",
    "Kevin Liu",
    "Linda Chen",
    "Sunny Tran",
    "Newman Cheng",
    "Roman Wang",
    "Nikhil Singh",
    "Taylor L. Patti",
    "Jayson Lynch",
    "Avi Shporer",
    "Nakul Verma",
    "Eugene Wu",
    "Gilbert Strang"
  ],
  "date_published": "2021-12-31",
  "raw_tex": "\\section{Solutions for MIT 18.06: Introduction to Linear Algebra}\n\\label{sec:solution-18.06}\n\n\\paragraph{Prereq} Calculus II (GIR)\n\\paragraph{Units} 4-0-8\n\\paragraph{Syllabus} Basic subject on matrix theory and linear algebra, emphasizing topics useful in other disciplines, including systems of equations, vector spaces, determinants, eigenvalues, singular value decomposition, and positive definite matrices. Applications to least-squares approximations, stability of differential equations, networks, Fourier transforms, and Markov processes. Uses linear algebra software. Compared with 18.700, more emphasis on matrix algorithms and many applications.\n\\paragraph{Textbook} Strang, Gilbert, Introduction to Linear Algebra (5th ed.), Wellesley-Cambridge Press, ISBN\t9780980232776.\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 1: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & \nVectors and Linear Combinations \n\\\\\n\\hline\nOriginal question & \nIf $v + w   (5,1)$ and $v - w   (1,5)$, compute and draw the vectors $v$ and $w$.\n\\\\\n\\hline\nCodex input &\nGiven v+w   (5,1) and v-w(1,5).\nWrite a program to compute v and w.\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nimport numpy as np\n\nv_plus_w   np.array([5,1])\nv_minus_w   np.array([1,5])\n\nv   (v_plus_w + v_minus_w)/2\nw   (v_plus_w - v_minus_w)/2\n\nprint(\"v   \", v)\nprint(\"w   \", w)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $v   (3,3), w   (-2,-2)$\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. We define a function called main() \\newline\n2. We define two tuples called v and w\\newline\n3. We define two more tuples called v\\_plus\\_w and v\\_minus\\_w\\newline\n4. We print the values of v\\_plus\\_w and v\\_minus\\_w\\newline\n5. We call the main() function\\\\\n\\hline\nGPT-3 response & The vectors v and w can be drawn as follows:\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 2: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nVectors and Linear Algebra \n\\\\\n\\hline\nOriginal question & \nIf $v   (1,2)$ draw all vectors $w   (x,y)$ in the $xy$ plane with $v \\cdot w   x + 2y   5$.\nWhy do those $w$'s lie along a line?\nWhich is the shortest $w$?\n\\\\\n\\hline\nCodex input & \nIn Linear Algebra and Vectors and Linear Algebra, if $v   (1,2)$ draw all vectors $w   (x,y)$ in the $xy$ plane with $v \\cdot w   x + 2y   5$.\nWhy do those $w$'s lie along a line?\nWhich is the shortest $w$?\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nv   np.array([1,2])\n\n# w   (x,y)\n# x + 2y   5\n# y   5 - x\n\nx   np.linspace(-5,5,100)\ny   5 - x\n\nplt.plot(x,y)\nplt.show()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & [1,2]\n \\includegraphics[height100mm]{18.06-q3-codex-output-plot.png}\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. We create a vector v   (1,2)\\newline\n2. We create a vector w   (x,y)\\newline\n3. We create a vector x   (-5,5)\\newline\n4. We create a vector y   (5-x)\\newline\n5. We plot the vectors x and y\\newline\n6. We show the plot\\\\\n\\hline\nGPT-3 response & \nThe vectors w lie along a line because they are all perpendicular to v. The shortest w is the one that is closest to the origin.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 3: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nVectors and Linear Algebra \n\\\\\n\\hline\nOriginal question & \nFind the linear combination $3s_{1}\n+ 4s_{2} + 5s_{3}   b$. Then write $b$ as a matrix-vector multiplication $Sx$, with 3, 4, 5 in $x$. Compute the three dot products (rows of S) x:\n$s_{1}   \\begin{bmatrix}\n1\\\\\n1\\\\\n1\n\\end{bmatrix}$, $s_{2}   \\begin{bmatrix}\n0\\\\\n1\\\\\n1\n\\end{bmatrix}$, $s_{3}   \\begin{bmatrix}\n0\\\\\n0\\\\\n1\n\\end{bmatrix}$\n\\\\\n\\\\\n\\hline\nCodex input & \nWrite a function to calculate the linear combination 3*s1 + 4*s2 + 5*s3. Let s\\_1   [1;1;1], s\\_2   [0;1;1], s\\_3   [0;0;1]\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nimport numpy as np\n\nS   np.array([[1,0,0],[1,1,0],[1,1,1]])\nx   np.array([3,4,5])\n\nb   S.dot(x)\nprint(b)\n\nprint(S[0].dot(x))\nprint(S[1].dot(x))\nprint(S[2].dot(x))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & 3s1 + 4s2 + 5s3   (3, 7, 12). The same vector b comes from S times x   (3, 4, 5)\n \\includegraphics[height100mm]{18.06-q3-codex-output-plot.png}\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. Create a matrix S with three rows and three columns.\\newline\n2. Create a vector x with three elements.\\newline\n3. Compute the matrix-vector product Sx.\\newline\n4. Compute the dot product of each row of S with x.\\newline\n2. We return the linear combination of the three arguments.\\newline\n3. We create three numpy arrays: s1, s2, and s3.\\newline\n4. We print the result of calling linear\\_combination with s1, s2, and s3 as arguments.\\\\\n\\hline\nGPT-3 response & \n3s\\_1 + 4s\\_2 + 5s\\_3   b\n\nb   [3;7;5]\n\nSx   [3,4,5]\n\n[1,1,1]\u00b7[3,4,5]   3\n\n[0,1,1]\u00b7[3,4,5]   7\n\n[0,0,1]\u00b7[3,4,5]   5\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 4: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic & Vectors and Linear Algebra \n\\\\\n\\hline\nOriginal question & \nFind a combination $x_1*w_1+x_2*w_2+x_3*w_3$ that gives the zero vector with $x_1   1$\n$w_1$ is the vector (1;2;3)\n$w_2$ is the vector (4;5;6)\n$w_3$ is the vector (7;8;9)\\\\\n\\hline\nCodex input & \nWrite a program to find a combination y and z such that multiplying np.array([1, y, z]).T with np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])   0. Use sympy and numpy.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef find_combination(w1, w2, w3):\n   \"\"\"Find a combination x_1*w_1+x_2*w_2+x_3*w_3 that gives the zero vector with x_1   1\"\"\"\n   for x2 in range(-10, 10):\n   for x3 in range(-10, 10):\n   if w1[0] + w2[0] * x2 + w3[0] * x3   0 and w1[1] + w2[1] * x2 + w3[1] * x3   0 and w1[2] + w2[2] * x2 + w3[2] * x3   0:\n   return [1, x2, x3]\n   return None\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $[3\\: 7\\: 12]$\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. It's iterating over all possible values of x2 and x3.\\newline\n2. For each possible value of x2 and x3, it's checking if the combination of x1, x2, and x3 gives the zero vector.\\newline\n3. If it does, it returns the combination.\\newline\n4. If it doesn't, it returns None.\n\\\\\n\\hline\nGPT-3 response &\nThere is no combination of w\\_1, w\\_2, and w\\_3 that will give the zero vector when x\\_1 is 1.\n\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 5: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic & Vectors and Linear Algebra \n\\\\\n\\hline\nOriginal question & \nWhat 2 by 2 matrix R rotates every vector through 45 degrees? Example: the vector [1,0] goes to [sqrt(2)/2, sqrt(2)/2].\\\\\n\\hline\nCodex input & \nSame as original question.\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nimport numpy as np\n\ndef rotation_matrix(theta):\n   \"\"\"\n   Returns a 2D rotation matrix which rotates every vector through theta degrees.\n   \"\"\"\n   return np.array([[np.cos(theta), -np.sin(theta)], [np.sin(theta), np.cos(theta)]])\n\ndef main():\n   theta   np.pi/4\n   print(rotation_matrix(theta))\n\nif __name__   \"__main__\":\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $[0.70710678,\\: -0.70710678]$\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. We define a function called rotation\\_matrix which takes in a parameter theta. \\newline\n2. We return a 2D numpy array which is the rotation matrix.\\newline\n3. We call the function with theta   pi/4.\\newline\n4. We print the result.\n\\\\\n\\hline\nGPT-3 response & The matrix R is:   R   [cos(45), -sin(45);   sin(45),   cos(45)]\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 6: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic & \nElimination Using Matrices \n\\\\\n\\hline\nOriginal question & \nThe parabola $ya+bx+cx^{2}$ goes through the points $(x,y)   (1,4)$ and $(2,8)$ and $(3,14)$. Find and solve a matrix equation for the unknowns $(a,b,c)$.\n\\\\\n\\hline\nCodex input & \nThe parabola y   a + b*x + c*x\\^{}2 goes through the points (x1,y1)   (1,4) and (x2,y2)   (2,8) and (x3,y3)   (3,14).\ny1   a + b*x1 + c*x1\\^{}2\ny2   a + b*x2 + c*x2\\^{}2\ny3   a + b*x3 + c*x3\\^{}2\nSolve for (a, b, c)\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nimport numpy as np\n\nA   np.array([[1,1,1],[1,2,4],[1,3,9]])\nb   np.array([4,8,14])\n\nx   np.linalg.solve(A,b)\n\nprint(x)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $[2.\\: 1.\\: 1.]$\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. We create a matrix A with the first column being all 1's, the second column being the x values, and the third column being the x values squared.\\newline\n2. We create a vector b with the y values.\\newline\n3. We solve the matrix equation Axb for x.\\newline\n4. We print the solution.\n\\\\\n\\hline\nGPT-3 response & \n[1 1 1] [a]   [4]\n[1 2 4] [b]   [8]\n[1 3 9] [c]   [14]\n\n[a]   [4]\n[b]   [8]\n[c]   [14]\n\na   4\nb   8\nc   14\n\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 7: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic & \nRules for Matrix Operations \n\\\\\n\\hline\nOriginal question & \nFind a matrix such that $A^{2}$ does not equal $0$ but $A^{3}   0$.\n\\\\\n\\hline\nCodex input & \nLoop through random integer matrices with 0 until matrix A is found.\nA must satisfy conditions: A**2 not equals np.zeros((2,2)) and A*3 equals np.zeros((2,2)).\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nimport numpy as np\n\ndef find_matrix_A(n):\n   \"\"\"\n   Find matrix A with nxn dimensions.\n   \"\"\"\n   while True:\n   A   np.random.randint(0,10,(n,n))\n   if np.array_equal(A**2, np.zeros((n,n)))   False and np.array_equal(A*3, np.zeros((n,n)))   True:\n   return A\n\ndef main():\n   \"\"\"\n   Main function.\n   \"\"\"\n   n   int(input(\"Enter n: \"))\n   A   find_matrix_A(n)\n   print(A)\n\nif __name__   \"__main__\":\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $\\begin{bmatrix}\n0 & 1\\\\\n0 & 0\n\\end{bmatrix}$\n\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & \n1. It takes an input n from the user.\\newline\n2. It creates a random matrix A with dimensions nxn.\\newline\n3. It checks if $A^2$ is not equal to 0 and $A^3$ is equal to 0.\\newline\n4. If the above condition is true, it returns A.\\newline\n5. If the above condition is false, it goes back to step 2.\n\\\\\n\\hline\nGPT-3 response & A   [[1, 0], [0, 1]]\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 8: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic & Rules for Matrix Operations \n\\\\\n\\hline\nOriginal question & \nFind the inverses (directly or from the 2 by 2 formula) of A, B, C : $A   \\begin{bmatrix}\n0 & 4\\\\\n3 & 0\n\\end{bmatrix}$, $B   \\begin{bmatrix}\n2 & 0\\\\\n4 & 2\n\\end{bmatrix}$, and $C   \\begin{bmatrix}\n3 & 4\\\\\n5 & 7\n\\end{bmatrix}$.\n\\\\\n\\hline\nCodex input & \nFind the inverses of the matrices A, B, C : A   [0,4;3,0], B   [2,0;4,2], and C   [3,4;5,7].\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nA   np.array([[0,4],[3,0]])\nB   np.array([[2,0],[4,2]])\nC   np.array([[3,4],[5,7]])\n\nprint(\"A inverse:\")\nprint(np.linalg.inv(A))\nprint(\"B inverse:\")\nprint(np.linalg.inv(B))\nprint(\"C inverse:\")\nprint(np.linalg.inv(C))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n\\newline\n$\\begin{bmatrix}\n0.0 & 0.33\\\\\n0.25 & 0.0\n\\end{bmatrix}$ \\newline \\newline \\newline\n$\\begin{bmatrix}\n0.5 & 0.0\\\\\n-1.0 & 0.5\n\\end{bmatrix}$ \\newline \\newline \\newline\n$\\begin{bmatrix}\n7.0 & -4.0\\\\\n-5.0 & 3.0\n\\end{bmatrix}$ \\newline\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. We import the numpy library.\\newline\n2. We define the matrices A, B, and C.\\newline\n3. We print the inverse of each matrix.\n\\\\\n\\hline\nGPT-3 response & \nA   [-1/4, 1/3; -3/4, 0]\nB   [-1/2, 1/4; -1/2, 0]\nC   [-7/12, 4/12; -5/12, 3/12]\n\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 9: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic & \nRules for Matrix Operations \n\\\\\n\\hline\nOriginal question & \nSolve for the first column $(x, y)$ and second column $(t, z)$ of $A^{-1}$: $\\begin{bmatrix}\n10 & 20\\\\\n20 & 50\n\\end{bmatrix}\\begin{bmatrix}\nx\\\\\ny\n\\end{bmatrix}   \\begin{bmatrix}\n1\\\\\n0\n\\end{bmatrix}$ and $\\begin{bmatrix}\n10 & 20\\\\\n20 & 50\n\\end{bmatrix}\\begin{bmatrix}\nt\\\\\nz\n\\end{bmatrix}   \\begin{bmatrix}\n0\\\\\n1\n\\end{bmatrix}$.\n\\\\\n\\hline\nCodex input &\nSame as original question.\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nimport numpy as np\n\nA   np.array([[10,20],[20,50]])\n\nb   np.array([1,0])\n\nx   np.linalg.solve(A,b)\n\nprint(x)\n\nb   np.array([0,1])\n\ny   np.linalg.solve(A,b)\n\nprint(y)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \\newline\n$\\begin{bmatrix}\n0.5\\\\\n-0.2\n\\end{bmatrix}$ \\newline \\newline \\newline\n$\\begin{bmatrix}\n-0.2\\\\\n0.1\n\\end{bmatrix}$ \\newline\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. Create a matrix A \\newline\n2. Create a vector b\\newline\n3. Solve the linear system Ax   b for x\\newline\n4. Print the solution x\\newline\n5. Create a new vector b\\newline\n6. Solve the linear system Ax   b for x\\newline\n7. Print the solution x\n\\\\\n\\hline\nGPT-3 response & \nA\\^{}-1   [1/10, -2/5; -1/10, 1/5]\n\nFirst column:\n\n[1/10, -2/5]@[1;0]   [1/10; -1/10]\n\nSecond column:\n\n[1/10, -2/5]@[0;1]   [2/5; 1/5]\n\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 10: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic & \nInverse Matrices \n\\\\\n\\hline\nOriginal question & \nFind singular matrices $A$ and $B$ such that $A + B$ is invertible.\n\\\\\n\\hline\nCodex input & \nFind singular matrices A and B such that A+B is invertible.\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nimport numpy as np\n\nA   np.array([[1,2,3],[4,5,6],[7,8,9]])\nB   np.array([[1,2,3],[4,5,6],[7,8,9]])\n\nprint(np.linalg.det(A))\nprint(np.linalg.det(B))\nprint(np.linalg.det(A+B))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $[[0.91153894,\\; 0.17592188,\\; 0.20480473],$\\newline $\\;[0.57581588,\\; 0.45869253,\\; 0.71794637],$\\newline $\\;[0.81254802,\\; 0.87121136,\\; 0.53780518]]$ \\newline \\newline\n$[[0.81340659,\\; 0.77597977,\\; 0.28118202],$ \\newline $\\;[0.60945157,\\; 0.34865269,\\; 0.39726644],$ \\newline $\\;[0.92169277,\\; 0.75366849,\\; 0.1502148 ]]$ \\newline \\newline\n$[[1.72494553,\\; 0.95190165,\\; 0.48598676],$ \\newline $\\;[1.18526745,\\; 0.80734522,\\; 1.1152128 ],$ \\newline $\\;[1.73424078,\\; 1.62487985,\\; 0.68801997]]$\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. It creates a matrix A and B.\\newline\n2. It prints the determinant of A, B, and A+B.\\newline\n3. It prints the inverse of A, B, and A+B.\n\\\\\n\\hline\nGPT-3 response & \nA   [[1, 0], [0, 1]];\nB   [[-1, 0], [0, -1]];\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 11: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic & \nNullspaces \n\\\\\n\\hline\nOriginal question & \nConstruct a $2 \\times 2$ matrix whose nullspace equals its column space. This is possible.\n\\\\\n\\hline\nCodex input & \nSame as original question.\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\ndef main():\n   \"\"\"Main function\"\"\"\n   print(\"Construct a 2 by 2 matrix whose nullspace equals its column space.\")\n   print(\"Enter the elements of the matrix:\")\n   a   int(input(\"a: \"))\n   b   int(input(\"b: \"))\n   c   int(input(\"c: \"))\n   d   int(input(\"d: \"))\n   print(\"The matrix is:\")\n   print(\"[\", a, b, \"]\")\n   print(\"[\", c, d, \"]\")\n   print(\"The nullspace of the matrix is:\")\n   print(\"[\", -b, a, \"]\")\n   print(\"The column space of the matrix is:\")\n   print(\"[\", a, b, \"]\")\n   print(\"[\", c, d, \"]\")\n   print(\"The nullspace and column space of the matrix are equal.\")\n\n\nif __name__   \"__main__\":\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $[[1\\; 1], [1\\; 1]]$\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. The main function is called.\\newline\n2. The main function prints the problem statement.\\newline\n3. The main function asks the user to enter the elements of the matrix.\\newline\n4. The main function prints the matrix.\\newline\n5. The main function prints the nullspace of the matrix.\\newline\n6. The main function prints the column space of the matrix.\\newline\n7. The main function prints that the nullspace and column space of the matrix are equal.\n\\\\\n\\hline\nGPT-3 response & A   [1 1; 1 -1]\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 12: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic & \nOrthogonality of the Four Subspaces \n\\\\\n\\hline\nOriginal question & \nFind $A'A$ if the columns of $A$ are unit vectors, all mutually perpendicular.\n\\\\\n\\hline\nCodex input & \nFind A'A if the columns of A are unit vectors, all mutually perpendicular.\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nA   np.array([[1,0,0],[0,1,0],[0,0,1]])\n\nprint(A.T@A)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $[[1\\; 0\\; 0]$, \\newline $[0\\; 1\\; 0]$, \\newline $[0\\; 0\\; 1]]$\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. We create a 3x3 matrix A, which is a matrix of unit vectors.\\newline\n2. We take the transpose of A, and multiply it by A.\\newline\n3. The result is a 3x3 matrix, where each element is 1.\n\\\\\n\\hline\nGPT-3 response & \nA \n\n[1 0 0]\n\n[0 1 0]\n\n[0 0 1]\n\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 13: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic & Projections \n\\\\\n\\hline\nOriginal question & \nDraw the projection of $b$ onto $a$: $b   \\begin{bmatrix}\n1\\\\\n1\n\\end{bmatrix}$ and $a   \\begin{bmatrix}\n1\\\\\n-1\n\\end{bmatrix}$.\n\\\\\n\\hline\nCodex input & \nSame as original question.\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\na   np.array([1, -1])\nb   np.array([1, 1])\n\n# Projection of b onto a\nproj   (np.dot(b, a) / np.dot(a, a)) * a\n\n# Plotting\nplt.quiver(0, 0, a[0], a[1], angles'xy', scale_units'xy', scale1, color'r')\nplt.quiver(0, 0, b[0], b[1], angles'xy', scale_units'xy', scale1, color'b')\nplt.quiver(0, 0, proj[0], proj[1], angles'xy', scale_units'xy', scale1, color'g')\nplt.xlim(-2, 2)\nplt.ylim(-2, 2)\nplt.show()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \\newline \\includegraphics[height80mm]{18.06-q15-codex-output-plot.png}\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. We first define the vectors a and b.\\newline\n2. We then calculate the projection of b onto a.\\newline\n3. We then plot the vectors a, b, and the projection of b onto a.\n\\\\\n\\hline\nGPT-3 response & \nThe projection of b onto a is b proj a   (b dot a)/(a dot a)*a.\n\nb proj a   (1*1 + 1*(-1))/(1*1 + (-1)*(-1))*[1;-1]\n\nb proj a   (1 - 1)/(1 + 1)*[1;-1]\n\nb proj a   0*[1;-1]\n\nb proj a   [0;0]\n\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 14: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic & \nProjections \n\\\\\n\\hline\nOriginal question & \nWhat linear combination of $(1,2,-1)$ and $(1,0,1)$ is closest to $b   (2,1,1)$?\n\\\\\n\\hline\nCodex input & \nUsing scipy what linear combination of ((1),(2),(-1)) and (1,0,1) is closest to b(2,1,1)?.\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nfrom scipy.optimize import minimize\n\ndef f(x):\n   return np.linalg.norm(x[0]*np.array([1,2,-1]) + x[1]*np.array([1,0,1]) - np.array([2,1,1]))\n\nres   minimize(f, [0,0])\nprint(res.x)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $[0.499, 1.499]$\n\\\\\n\\hline\nSolution type & Automatic Few-shot\\\\\n\\hline\nCodex code explanation & \n1. It's creating a random matrix A of size n by n.\\newline\n2. It's creating a random vector b of size n.\\newline\n3. It's solving the linear system Ax   b using the backslash operator.\\newline\n4. It's computing the residual r   b - Ax.\\newline\n5. It's computing the norm of the residual.\\newline\n6. It's computing the condition number of A.\\newline\n7. It's computing the norm of the solution x.\\newline\n8. It's computing the norm of the matrix A.\\newline\n9. It's computing the norm of the vector b.\n\\\\\n\\hline\nGPT-3 response & \nThe linear combination of (1,2,-1) and (1,0,1) that is closest to b(2,1,1) is (1,1,0).\n\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 15: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic &\nLeast Squares Approximations \n\\\\\n\\hline\nOriginal question & \nFind the best line $C + Dt$ to fit $b   4,3,-1,0,0$ at times $t   -2,-1,0,1,2$.\n\\\\\n\\hline\nCodex input & \nSame as original question.\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nt   np.array([-2,-1,0,1,2])\nb   np.array([4,3,-1,0,0])\n\nA   np.vstack([t, np.ones(len(t))]).T\n\nm, c   np.linalg.lstsq(A, b, rcondNone)[0]\n\nprint(m,c)\n\nplt.plot(t, b, 'o', label'Original data', markersize10)\nplt.plot(t, m*t + c, 'r', label'Fitted line')\nplt.legend()\nplt.show()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & -1.1; 1.2; \\newline\n\\includegraphics[height100mm]{18.06-q17-codex-output-plot.png}\n\\\\\n\\hline\nSolution type & Automatic Few-shot\\\\\n\\hline\nCodex code explanation & \n1. The \\_\\_init\\_\\_ method is called when the object is created. It sets the initial values of the attributes.\\newline\n2. The \\_\\_str\\_\\_ method is called when the object is printed. It returns a string representation of the object.\\newline\n3. The \\_\\_add\\_\\_ method is called when the object is added to another object. It returns the result of the addition.\\newline\n4. The \\_\\_len\\_\\_ method is called when the len() function is called on the object. It returns the length of the object.\n\\\\\n\\hline\nGPT-3 response & C+Dt-1/3t+4\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 16: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic & \nCramer's Rule, Inverses and Volumes \n\\\\\n\\hline\nOriginal question & \nFind the area of the parallelogram with edges $v   (3,2)$ and $w   (1,4)$.\n\\\\\n\\hline\nCodex input & \nSame as original question.\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nv   (3,2)\nw   (1,4)\n\ndef area(v,w):\n   return abs(v[0]*w[1]-v[1]*w[0])\n\nprint(area(v,w))\n\nv   np.array([3,2])\nw   np.array([1,4])\n\narea   np.cross(v,w)\n\nprint(area)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$10$\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. Define the vectors v and w.\\newline\n2. Define a function that takes two vectors as arguments and returns the area of the parallelogram with edges v and w.\\newline\n3. Print the area of the parallelogram with edges v and w.\n\\\\\n\\hline\nGPT-3 response & The area of the parallelogram is 6. \\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 17: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic & \nIntroduction to Eigenvalues \n\\\\\n\\hline\nOriginal question & \nFind the eigenvalues of $A$ and $B$ (easy for triangular matrices) and $A + B$:\\newline $A   \\begin{bmatrix}\n3 & 0\\\\\n1 & 1\n\\end{bmatrix}$, $B   \\begin{bmatrix}\n1 & 1\\\\\n0 & 3\n\\end{bmatrix}$, $A + B   \\begin{bmatrix}\n4 & 1\\\\\n1 & 4\n\\end{bmatrix}$.\n\\\\\n\\hline\nCodex input &\nSame as original question.\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nimport numpy as np\n\nA   np.array([[3,0],[1,1]])\nB   np.array([[1,1],[0,3]])\n\nprint(np.linalg.eig(A))\nprint(np.linalg.eig(B))\nprint(np.linalg.eig(A+B))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $[1\\; 3];\\; [1\\; 3];\\; [5\\; 3]$\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. Create a matrix A and B\\newline\n2. Find the eigenvalues of A and B\\newline\n3. Find the eigenvalues of A + B\n\\\\\n\\hline\nGPT-3 response & \nA: 3 and 1\nB: 1 and 3\nA+B: 4 and 5\n\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 18: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nIntroduction to Eigenvalues \n\\\\\n\\hline\nOriginal question & \nFind the eigenvalues and eigenvectors for both of these Markov matrices $A$ and $A_{\\textrm{inf}}$.\\newline $A   \\begin{bmatrix}\n0.6 & 0.2\\\\\n0.4 & 0.8\n\\end{bmatrix}$, $A_{\\textrm{inf}}   \\begin{bmatrix}\n\\frac{1}{3} & \\frac{1}{3}\\\\\n\\frac{2}{3} & \\frac{2}{3}\n\\end{bmatrix}$.\n\\\\\n\\hline\nCodex input & \nFind the eigenvalues and eigenvectors for both of these Markov matrices A and Ainf. A   np.array([[.6, .2], [.4, .8]]). Ainf   np.array([[1/3, 1/3], [2/3, 2/3]]).\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nA   Matrix([[.6, .2], [.4, .8]])\nAinf   Matrix([[1/3, 1/3], [2/3, 2/3]])\n\nA.eigenvals()\n\nA.eigenvects()\n\nAinf.eigenvals()\n\nAinf.eigenvects()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$\\begin{bmatrix}\n0.4 \\\\\n1\n\\end{bmatrix}$\\newline \\newline\n$\\begin{bmatrix}\n-0.70710678 & -0.4472136\\\\\n0.70710678 & -0.89442719\n\\end{bmatrix}$\\newline \\newline\n$\\begin{bmatrix}\n0\\\\\n1\n\\end{bmatrix}$\\newline \\newline\n$\\begin{bmatrix} -0.70710678 & -0.4472136 \\\\ 0.70710678 & -0.89442719\\end{bmatrix}$\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. Define the two matrices A and A$\\inf$.\\newline\n2. Find the eigenvalues of A.\\newline\n3. Find the eigenvectors of A.\\newline\n4. Find the eigenvalues of A$\\inf$.\\newline\n5. Find the eigenvectors of A$\\inf$.\n\\\\\n\\hline\nGPT-3 response & \nA:   Eigenvalues: 1, 1 Eigenvectors: [1, 1], [-1, 1]   A$\\inf$:   Eigenvalues: 1, 1 Eigenvectors: [1, 1], [1, -1]\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 19: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nSymmetric Matrices \n\\\\\n\\hline\nOriginal question & \nFind a symmetric matrix $\\begin{bmatrix}\n1 & b\\\\\nb & 1\n\\end{bmatrix}$ that has a negative eigenvalue.\n\\\\\n\\hline\nCodex input & \nFind a 2x2 symmetric matrix [1,b;b,1] that has a negative eigenvalue.\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nb   -1\n   while True:\n   b + 0.01\n   A   np.array([[1, b], [b, 1]])\n   eigvals   np.linalg.eigvals(A)\n   if np.any(eigvals < 0):\n   return b\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $-1$\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. It starts with b   -1.\\newline\n2. It creates a matrix A   [1,b;b,1].\\newline\n3. It computes the eigenvalues of A.\\newline\n4. If any of the eigenvalues are negative, it returns b.\\newline\n5. If none of the eigenvalues are negative, it adds 0.01 to b and goes back to step 2.\n\\\\\n\\hline\nGPT-3 response & [1,-1;-1,1]\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 20: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nImage processing by Linear Algebra \n\\\\\n\\hline\nOriginal question & \nFind the eigenvalues and the singular values of this $2 \\times 2$ matrix $A   \\begin{bmatrix}\n2 & 1\\\\\n4 & 2\n\\end{bmatrix}$.\\newline The eigenvectors $(1,2)$ and $(1,-2)$ of $A$ are not orthogonal.\n\\\\\n\\hline\nCodex input & \nSame as original question.\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nimport sympy as sp\n\nA   sp.Matrix([[2,1],[4,2]])\n\nprint(\"Eigenvalues:\")\nprint(A.eigenvals())\n\nprint(\"Singular values:\")\nprint(A.singular_values())\n\nprint(\"Eigenvectors:\")\nprint(A.eigenvects())\n\nprint(\"Singular vectors:\")\nprint(A.S())\n\nprint(\"Eigenvalues and eigenvectors:\")\nprint(A.diagonalize())\n\nprint(\"Singular values and singular vectors:\")\nprint(A.diagonalize())\n\\end{lstlisting}\\\\\n\\hline\nProgram solution   & \\newline\n$\\begin{bmatrix} 4 & 0\\end{bmatrix}$ \\newline \\newline\n$\\begin{bmatrix}\n0.4472136 & -0.4472136\\\\\n0.89442719 & 0.89442719\n\\end{bmatrix}$\n\\newline \\newline \\newline\n$\\begin{bmatrix}\n-0.4472136 & -0.89442719 \\\\\n-0.89442719 &   0.4472136\n\\end{bmatrix}$\n\\newline \\newline \\newline\n$\\begin{bmatrix}\n5.00 & 1.04061363e^{-16}\\\\\n-0.89442719 & -0.4472136\n\\end{bmatrix}$\n\\newline \\newline \\newline\n$\\begin{bmatrix} -0.4472136 & 0.89442719 \\end{bmatrix}$ \\\\ \n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. It's creating a matrix A.\\newline\n2. It's finding the eigenvalues of A.\\newline\n3. It's finding the singular values of A.\\newline\n4. It's finding the eigenvectors of A.\\newline\n5. It's finding the singular vectors of A.\\newline\n6. It's finding the eigenvalues and eigenvectors of A.\\newline\n7. It's finding the singular values and singular vectors of A.\n\\\\\n\\hline\nGPT-3 response & The eigenvalues of A are 3 and 1. The singular values of A are 5 and 1.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 21: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & \nPrincipal Component Analysis \n\\\\\n\\hline\nOriginal question &\nSuppose $A_{0}$ holds these 2 measurements of 5 samples: $A_{0}   \\begin{bmatrix}\n5&4&3&2&1\\\\\n-1&1&0&1&-1\n\\end{bmatrix}$.\\newline Find the average of each row and subtract it to produce the centered matrix $A$. Compute the sample covariance matrix $S\\frac{AA'}{(n-1)}$ and find its eigenvalues. What line through the origin is closest to the 5 samples in the columns of $A$?\n\\\\\n\\hline\nCodex input & \nSame as original question.\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nimport numpy as np\n\nA0   np.array([[5,4,3,2,1],[-1,1,0,1,-1]])\n\nA   A0 - np.mean(A0, axis1).reshape(2,1)\n\nS   np.dot(A, A.T)/(A.shape[1]-1)\n\neigvals, eigvecs   np.linalg.eig(S)\n\nprint(eigvals)\nprint(eigvecs)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $\\begin{bmatrix}\n2.5 & 1\n\\end{bmatrix}$\\newline \n$\\begin{bmatrix}\n1 & 0\\\\\n0 & 1\n\\end{bmatrix}$\\newline\n$\\begin{bmatrix}\n1 & 0\n\\end{bmatrix}$\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & 1. A0 is a 2x5 matrix. \\newline\n2. A is a 2x5 matrix.\\newline\n3. S is a 2x2 matrix.\\newline\n4. eigvals is a 2x1 matrix.\\newline\n5. eigvecs is a 2x2 matrix.\n\\\\\n\\hline\nGPT-3 response & \nA   [5,4,3,2,1;-1,1,0,1,-1];\n\nA0   [5,4,3,2,1;-1,1,0,1,-1];\n\nA   A0 - mean(A0);\n\nS   A*A'/(n-1);\n\n[V,D]   eig(S);\n\nD   diag(D);\n\n[~,ind]   min(D);\n\nv   V(:,ind);\n\nline   v'*A;\n\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 22: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic & \nThe Idea of a Linear Transformation\n\\\\\n\\hline\nOriginal question & \nSuppose a linear T transforms (1,1) to (2,2) and (2,0) to (0,0). Find T(v), when v[2,2], v(3,1), v(-1,1), v(a,b).\n\\\\\n\\hline\nCodex input & \nUse a while True loop to find a random matrix M such that M*np.array([1,1])   np.array([2,2]) and M*np.array([2,0])   np.array([0,0]).\nFind M*np.array([2,2]).\nFind M*np.array([3,1]).\nFind M*np.array([-1,1]).\nUse Sympy to find Find M*np.array([a,b]).\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nimport numpy as np\nimport sympy as sp\n\na, b   sp.symbols('a b')\n\nwhile True:\n   M   np.random.randint(0, 10, (2, 2))\n   if np.array_equal(M.dot(np.array([1, 1])), np.array([2, 2])) and np.array_equal(M.dot(np.array([2, 0])), np.array([0, 0])):\n   break\n\nprint(M)\nprint(M.dot(np.array([2, 2])))\nprint(M.dot(np.array([3, 1])))\nprint(M.dot(np.array([-1, 1])))\nprint(M.dot(np.array([a, b])))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & T(v)   (4, 4); (2, 2); (2, 2); if v   (a, b)   b(1, 1) + ((a-b)/2)*(2, 0) then T(v)   b(2, 2) + (0, 0)\n\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & \n1. It's creating a random 2x2 matrix M.\\newline\n2. It's checking if M*np.array([1,1])   np.array([2,2]) and M*np.array([2,0])   np.array([0,0]).\\newline\n3. If the above is true, it breaks out of the while loop.\\newline\n4. If the above is false, it goes back to step 1.\n\\\\\n\\hline\nGPT-3 response & \nT(v)   (2,2) when v   (1,1)\n\nT(v)   (0,0) when v   (2,0)\n\nT(v)   (4,4) when v   (3,1)\n\nT(v)   (-2,-2) when v   (-1,1)\n\nT(v)   (2a,2b) when v   (a,b)\n\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 23: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\n\\hline\nTopic & \nLinear Algebra in Probability and Statistics \n\\\\\n\\hline\nOriginal question & \nWe know: $\\frac{1}{3}$ of all integers are divisible by $3$, and $\\frac{1}{7}$ of integers are divisible by $7$. What fraction of integers will be divisible by $3$ or $7$ or both?\n\\\\\n\\hline\nCodex input & \nWe know: 1/3 of all integers are divisible by 3 and 1/7 of integers are divisible by 7. Write a program to calculate the fraction of integers will be divisible by 3 or 7 or both ?\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nimport numpy as np\n\n# Create an array of integers from 1 to 100\nnumbers   np.arange(1, 101)\n\n# Find the numbers divisible by 3 or 7\ndivisible_by_3_or_7   numbers[(numbers   3   0) | (numbers   7   0)]\n\n# Print the number of numbers divisible by 3 or 7\nprint(divisible_by_3_or_7.size)\n\n# Print the fraction of numbers divisible by 3 or 7\nprint(divisible_by_3_or_7.size / numbers.size)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $\\frac{3}{7}$\n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. Create an array of integers from 1 to 100\\newline\n2. Find the numbers divisible by 3 or 7\\newline\n3. Print the number of numbers divisible by 3 or 7\\newline\n4. Print the fraction of numbers divisible by 3 or 7\n\\\\\n\\hline\nGPT-3 response & The fraction of integers divisible by 3 or 7 or both is 2/3.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 24: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & \nLinear Algebra in Probability and Statistics \n\\\\\n\\hline\nOriginal question & \nSample again from 1 to 1000 but look at the last digit of the sample squared. That square could end with x   0, 1, 4, 5, 6, or 9. What are the probabilities p0, p1, p4, p5, p6, p9? \n\\\\\n\\hline\nCodex input & \nSample again from 1 to 1000 but look at the last digit of the sample squared. That square could end with x   0, 1, 4, 5, 6, or 9. Write a program to find what are the probabilities p0, p1, p4, p5, p6, p9? \n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\ndef last_digit_squared(N):\n   \"\"\"Return the last digit of N squared\"\"\"\n   return (N**2)10\n\ndef last_digit_squared_probabilities(N):\n   \"\"\"Return the probabilities of the last digit of N squared\"\"\"\n   last_digits   [last_digit_squared(i) for i in range(1, N+1)]\n   return {i: last_digits.count(i)/N for i in range(10)}\n\nprint(last_digit_squared_probabilities(1000))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & ${0: 0.1, 1: 0.2, 2: 0.0, 3: 0.0, 4: 0.2, 5: 0.1, 6: 0.2, 7: 0.0, 8: 0.0, 9: 0.2}$\n\\\\\n\\hline\nSolution type & Automatic Few-shot (1)\\\\\n\\hline\nCodex code explanation & \n1. We define a function last\\_digit\\_squared that takes in a number N and returns the last digit of N squared.\\newline\n2. We define a function last\\_digit\\_squared\\_probabilities that takes in a number N and returns a dictionary of the probabilities of the last digit of N squared.\\newline\n3. We print the probabilities of the last digit of N squared for N from 1 to 1000.\n\\\\\n\\hline\nGPT-3 response & p0   1/6 p1   1/6 p4   1/6 p5   1/6 p6   1/6 p9   1/6\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MIT 18.06, Question 25: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & \nLinear Algebra in Probability and Statistics \n\\\\\n\\hline\nOriginal question & \nIf all 24 samples from a population produce the same age x   20, what are the sample mean \u00b5 and the sample variance S\\^{}2?\n\\\\\n\\hline\nCodex input & \nIf all 24 samples from a population produce the same age x   20, what are the sample mean \u00b5 and the sample variance S\\^{}2?\n\\\\\n\\hline\nCodex code   & \\begin{lstlisting}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\nimport math\nget_ipython().run_line_magic('matplotlib', 'inline')\n\n\n# In[2]:\n\n\n#Sample mean\nx   20\nn   24\nmean   x\nprint(\"Sample mean is:\",mean)\n\n\n# In[3]:\n\n\n#Sample variance\nvariance   0\nprint(\"Sample variance is:\",variance)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \u00b5   20, S\\^{}2   0 \n\\\\\n\\hline\nSolution type & Automatic Zero-shot\\\\\n\\hline\nCodex code explanation & \n1. The class is called \"Sample\" \\newline\n2. The class has a constructor that takes two arguments: x and n \\newline\n3. The constructor computes the sample mean and sample variance \\newline\n4. The constructor prints the sample mean and sample variance\n\\\\\n\\hline\nGPT-3 response & The sample mean is 20 and the sample variance is 0.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}",
  "title": "A Neural Network Solves, Explains, and Generates University Math Problems by Program Synthesis and Few-Shot Learning at Human Level"
}
