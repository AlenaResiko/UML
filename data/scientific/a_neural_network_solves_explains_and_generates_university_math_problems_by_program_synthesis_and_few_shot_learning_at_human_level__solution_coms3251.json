{
  "authors": [
    "Iddo Drori",
    "Sarah Zhang",
    "Reece Shuttleworth",
    "Leonard Tang",
    "Albert Lu",
    "Elizabeth Ke",
    "Kevin Liu",
    "Linda Chen",
    "Sunny Tran",
    "Newman Cheng",
    "Roman Wang",
    "Nikhil Singh",
    "Taylor L. Patti",
    "Jayson Lynch",
    "Avi Shporer",
    "Nakul Verma",
    "Eugene Wu",
    "Gilbert Strang"
  ],
  "date_published": "2021-12-31",
  "raw_tex": "\\section{Solutions for Columbia University COMS3251: Computational Linear Algebra}\n\\label{sec:solution-COMS3251}\n\n\\paragraph{Syllabus}\nFunctions and compositions. Vectors and linear functions, matrices and linear transforms, inverses and Gaussian elimination. Vector spaces, bases, subspaces, and dimension. Inner products, norms, and orthogonal projections. Eigenvectors and eigenvalues, spectral decomposition. Quadratic forms, and singular value decomposition.\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 1: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Matrix Algebra\\\\\n\\hline\nOriginal question & Compute the following expression: \n$\\left(\\begin{bmatrix}\n-1 & 0 & 2 \\\\\n0 & 1 & 4\n\\end{bmatrix}'*\\begin{bmatrix}\n-2 & 1\n\\end{bmatrix}\\right).(\\begin{bmatrix}\n3 & 1 \\\\\n0 & 0\\\\\n-2 & -1\n\\end{bmatrix}*(\\begin{bmatrix}\n5 & -3\n\\end{bmatrix}+\\begin{bmatrix}\n-4 & 2\n\\end{bmatrix}))$\n, where ' means transpose, * means matrix product, . means inner product.\\\\\n\\hline\nCodex input & Compute the following expression: $(\\textit{transpose}([-1,0,2; 0,1,4])*[-2;1]).([3,1;0,0;-2,-1]*\\textit{transpose}([5,-3]+[-4,2]))$\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\n\na   np.array([[-1,0,2],[0,1,4]])\nb   np.array([[-2],[1]])\nc   np.array([[3,1],[0,0],[-2,-1]])\nd   np.array([[5],[-3]])\ne   np.array([[-4],[2]])\n\nprint(np.dot(np.transpose(a),b))\nprint(np.dot(c,(d+e)))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $4$\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation &\n1. We import the sympy module and rename it as sp. \\newline\n2. We create a symbol x and a function y.\\newline\n3. We create an equation dy/dx2x+1.\\newline\n4. We create an initial condition y(0)3.\\newline\n5. We solve the differential equation using the dsolve() function.\\newline\n6. We print the solution. \\\\\n\\hline\nGPT-3 response & ([-1,0,2; 0,1,4]'*[-2;1]).([3,1;0,0;-2,-1]*([5,-3]+[-4,2])') \\newline\n ([-1,0,2; 0,1,4]'*[-2;1]).([3,1;0,0;-2,-1]*[1, -1; -1, 1]) \\newline\n ([-1,0,2; 0,1,4]'*[-2;1]).([3,1;0,0;-2,-1]*[0;0]) \\newline\n ([-1,0,2; 0,1,4]'*[-2;1]).([0;0;0]) \\newline\n ([-1,0,2; 0,1,4]'*[-2;1]).([0;0]) \\newline\n [0;0]\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 2: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Vectors, Lengths and Dot products \\\\\n\\hline\nOriginal question & \nCompute the squared $\\mathcal{L}_{2}$ norm of the vector \n$\\begin{bmatrix}\n1 & -4 & 2 & 8 & -1\n\\end{bmatrix}$\\\\\n\\hline\nCodex input & Same as original problem\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\n\ndef compute_squared_L2_norm(vector):\n   return np.sum(np.square(vector))\n\nvector   np.array([1, -4, 2, 8, -1])\nprint(compute_squared_L2_norm(vector))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $86$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. Create a numpy array x with the values [1, -4, 2, 8, -1] \\newline\n2. Use the numpy.linalg.norm function to compute the L2 norm of x \\newline\n3. Square the result \\\\\n\\hline\nGPT-3 response & The squared L2 norm of the vector [1;-4;2;8;-1] is $85$.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 3: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Solving Linear System of Equations\\\\\n\\hline\nOriginal question & Find a solution to the following system of four equations:\\newline\n   $4x - 2y   +   8z   +   w   3$\\newline\n   $-8x + 10y +   3w   -2$\\newline\n   $3x - 1y   +   10z   +   5w   -1$\\newline\n   $2x + 2y   +   9z   -   2w   8$\\\\\n\\hline\nCodex input & Write a program to find a solution to the system of four equations:\\newline\n   $4x - 2y   +   8z   +   w   3$\\newline\n   $-8x + 10y +   3w   + 2   0$\\newline\n   $3x - 1y   +   10z   +   5w   + 1   0$\\newline\n   $2x + 2y   +   9z   -   2w   8$\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\n\nx, y, z, w   symbols('x y z w')\n\neq1   4*x - 2*y + 8*z + w - 3\neq2   -8*x + 10*y + 3*w + 2\neq3   3*x - 1*y + 10*z + 5*w + 1\neq4   2*x + 2*y + 9*z - 2*w - 8\n\nsolve([eq1, eq2, eq3, eq4], [x, y, z, w])\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $x\\frac{11}{4}, y\\frac{97}{44}, z\\frac{-4}{11}, w\\frac{-15}{22}$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We create a matrix A and a vector b. \\newline\n2. We use the solve function to find the solution to the system of equations. \\newline\n3. We print the solution.\\\\\n\\hline\nGPT-3 response & x   1, y   2, z   -1, w   3\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 4: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Solving Linear System of Equations\\\\\n\\hline\nOriginal question & \nA mining company has two mines. One day's operation at mine A produces ore that contains 10 metric tons of copper and 120 kilograms of silver, while one day's operation at mine B produces ore containing 6 metric tons of copper and 140 kilograms of silver. Let $a\\begin{bmatrix}\n10\\\\\n120\n\\end{bmatrix}$ and $b\\begin{bmatrix}\n6\\\\\n140\n\\end{bmatrix}$. Then a and b represent the daily output of mines A and B, respectively. Suppose that the mining company operates mine A for x days and mine B for y days.\nCalculate how many number of days each mine should operate in order to produce $72$ tons of copper and $1340$ kilograms of silver.\n\\\\\n\\hline\nCodex input & \nLet a[10;120] and b[6;140].\nWrite a program to compute positive x and y such that x*a + y*b   [72;1340]\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\na   np.array([10, 120])\nb   np.array([6, 140])\nc   np.array([72, 1340])\n\n# Solve for x and y in the equation x*a + y*b   c using\n# the numpy linear algebra function linalg.solve(a, b)\nx, y   np.linalg.solve(np.vstack((a, b)).T, c)\nprint(\"x: \", x)\nprint(\"y: \", y)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $x   3$, $y   7$\\\\\n\\hline\nSolution type & Automatic Few-Shot\\\\\n\\hline\nCodex code explanation & 1. We're creating two variables, x and y, and assigning them to the symbols 'x' and 'y' \\newline\n2. We're creating three matrices, a, b, and c, and assigning them to the values [10, 120], [6, 140], and [72, 1340]\\newline\n3. We're using the solve function to solve the system of equations a[0]*x + b[0]*y - c[0] and a[1]*x + b[1]*y - c[1] for x and y\\newline\n4. We're printing the solution to the system of equations\\\\\n\\hline\nGPT-3 response & Let x be the number of days mine A operates and y be the number of days mine B operates. \\newline\nWe want to find x and y such that: \\newline\n10x+6y72 \\newline\n120x+140y1340 \\newline\n\nThis can be rewritten as: \\newline\n10x+6y-720 \\newline\n120x+140y-13400 \\newline\nThis is a system of linear equations that can be solved using substitution or elimination.\\newline\nUsing substitution, we can solve for y in the first equation and substitute this into the second equation.\\newline\n10x+6y-720 \\newline\n10x-6y+72 \\newline\ny(10/6)x-(72/6)\\newline\ny(5/3)x-12 \\newline\n120x+140(5/3)x-12(140)-13400\\newline\n120x+700x/3-1680-13400 \\newline\n120x+700x/3-30200 \\newline\n700x/3+120x-30200 \\newline\n700x/3+120x-30200 \\newline\n700x/33020-120x\\newline\n700x/32800 \\newline\nx4000/21 \\newline\ny(5/3)(4000/21)-12\\newline\ny1666.667-12 \\newline\ny1654.667\\newline\nTherefore, mine A should operate for 4000/21 days and mine B should operate for 1654.667 days.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 5: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Vectors, Lengths and Dot products\\\\\n\\hline\nOriginal question & \nAt noon, the minute and the hour hands of an analog clock coincide. What is the angle (in degrees) subtended by the minute and hour hands of an analog clock at 1:15?\n\\\\\n\\hline\nCodex input & \nAt noon, the minute and the hour hands of an analog clock coincide.\nWrite a program to compute the angle (in degrees) subtended by the hands of an analog clock at 1:15\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef clock_angle(hour, minute):\n   hour_angle   (hour * 30) + (minute * 0.5)\n   minute_angle   (minute * 6)\n   angle   abs(hour_angle - minute_angle)\n   return angle\n\nprint(clock_angle(1, 15))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$52.5$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. The hour hand moves 30 degrees every hour. \\newline\n2. The minute hand moves 6 degrees every minute. \\newline\n3. The hour hand moves 0.5 degrees every minute.\\\\\n\\hline\nGPT-3 response & The angle between the minute and hour hands at 1:15 is 90 degrees.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 6: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Matrix Algebra\\\\\n\\hline\nOriginal question & \nFor what matrix R, the following matrix equation is satisfied?\\newline\n$R*\\begin{bmatrix}\n1 & 0 & 0 & 0 & 0 \\\\\n1 & 1 & 0 & 0 & 0 \\\\\n1 & 2 & 1 & 0 & 0 \\\\\n1 & 3 & 3 & 1 & 0 \\\\\n1 & 4 & 6 & 4 & 1\n\\end{bmatrix}\\begin{bmatrix}\n1 & 0 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 & 0 \\\\\n0 & 1 & 1 & 0 & 0 \\\\\n0 & 1 & 2 & 1 & 0 \\\\\n0 & 1 & 3 & 3 & 1\n\\end{bmatrix}$\n\\\\\n\\hline\nCodex input & \nA   np.matrix([[1,0,0,0,0],[1,1,0,0,0],[1,2,1,0,0],[1,3,3,1,0],[1,4,6,4,1]])\\newline\nB   np.matrix([[1,0,0,0,0],[0,1,0,0,0],[0,1,1,0,0],[0,1,2,1,0],[0,1,3,3,1]])\\newline\nSolve X*A   B for X\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\n# Solve X*A   B for X\nX   np.linalg.solve(A,B)\nprint(X)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$\\begin{bmatrix}\n1 & 0 & 0 & 0 & 0 \\\\\n-1 & 1 & 0 & 0 & 0 \\\\\n0 & -1 & 1 & 0 & 0 \\\\\n0 & 0 & -1 & 1 & 0 \\\\\n0 & 0 & 0 & -1 & 1\n\\end{bmatrix}$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We create two matrices A and B. \\newline\n2. We calculate the inverse of A and multiply it with B. \\newline\n3. We print the result.\\\\\n\\hline\nGPT-3 response & R   [1,0,0,0,0;0,1,0,0,0;0,0,1,0,0;0,0,0,1,0;0,0,0,0,1]\\\\\n\\hline\nGPT-3 evaluation & Incorrect \\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 7: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Rank, Basis and Dimension\\\\\n\\hline\nOriginal question & \nGiven a d-dimensional non-zero vector $v$, compute the rank of the matrix $v*v'$\n\\\\\n\\hline\nCodex input & \nGiven a d-dimensional non-zero vector v, write a program to compute the rank of the matrix v*transpose(v)\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\n\ndef rank(v):\n   return np.linalg.matrix_rank(np.dot(v, v.T))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $1$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. It defines a function called rank that takes a vector v as input and returns the rank of the matrix v*v' \\newline\n2. It defines a vector v   [1, 2, 3] \\newline\n3. It prints the rank of the matrix v*v'\\\\\n\\hline\nGPT-3 response & The rank of the matrix v*v' is 1.\\\\\n\\hline\nGPT-3 evaluation & Correct \\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 8: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Four Fundamental Subspaces of a Matrix\\\\\n\\hline\nOriginal question & \nCompute the dimension of the null space of the following matrix. \n$\\begin{bmatrix}\n1 & 2 &0 &-1 \\\\\n-2 & -3 &4&5 \\\\\n2 & 4 & 0 &-2\n\\end{bmatrix}$\\\\\n\\hline\nCodex input & \nWrite a program that finds the finds the dimension the null space of the matrix [1,2,0,-1;-2,-3,4,5;2,4,0,-2]. Use scipy.linalg.null\\_space. Get the shape[1] of the null space.\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nfrom scipy import linalg\n\nA   np.array([[1,2,0,-1],[-2,-3,4,5],[2,4,0,-2]])\n\nprint(linalg.null_space(A))\n\nprint(linalg.null_space(A).shape[1])\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$2$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We import the numpy library as np. \\newline\n2. We create a numpy array called A. \\newline\n3. We print the rank of the matrix A.\\\\\n\\hline\nGPT-3 response & The dimension of the null space of the matrix is 2.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 9: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Four Fundamental Subspaces of a Matrix\\\\\n\\hline\nOriginal question & \nCompute the dimension of the left null space of the following matrix. \n$\\begin{bmatrix}\n1&2 \\\\\n2&4 \\\\\n3&6 \\\\\n4&8\n\\end{bmatrix}$\\\\\n\\hline\nCodex input & \nCompute the dimension of the left null space of the matrix [1,2;2,4;3,6;4,8]\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nA   np.array([[1,2],[2,4],[3,6],[4,8]])\nprint(np.linalg.matrix_rank(A))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$3$\n\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & 1. We are creating two symbols, x and y \\newline\n2. We are creating two equations, eq1 and eq2 \\newline\n3. We are solving the system of equations for x and y\\\\\n\\hline\nGPT-3 response & The coordinates of the vector [2;1] in the basis [2,-1/2],[1,1] are [1;2].\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 10: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Orthogonality and Projections\\\\\n\\hline\nOriginal question &\nCompute the orthogonal projection of the vector $\\begin{bmatrix}\n6\\\\\n-4\n\\end{bmatrix}$ onto the line spanned by the vector $\\begin{bmatrix}\n3\\\\\n2\n\\end{bmatrix}$\n\\\\\n\\hline\nCodex input & \nCompute the orthogonal projection of the vector [-6;4] onto the line spanned by the vector [3;2]\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\n\n# Define the two vectors\nv1   np.array([3, 2])\nv2   np.array([-6, 4])\n\n# Compute the orthogonal projection of v2 onto v1 and print it out\nproj   (np.dot(v1, v2) / np.dot(v1, v1)) * v1\nprint(proj)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$\\begin{bmatrix}\n\\frac{-30}{13}\\\\\n\\frac{-20}{13}\n\\end{bmatrix}$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We define the vector v and the line l.\\newline\n2. We compute the projection of v onto l by taking the dot product of v and l, dividing by the dot product of l and l, and then multiplying by l. \\newline\n3. We print the result.\\\\\n\\hline\nGPT-3 response & The orthogonal projection of the vector [-6;4] onto the line spanned by the vector [3;2] is [-2;1].\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 11: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Least Squares Approximation\\\\\n\\hline\nOriginal question & \nFind the least squares solution to the following matrix equation.\n$\\begin{bmatrix}\n0 &1\\\\\n1 &1 \\\\\n2 &1\n\\end{bmatrix} * x   \\begin{bmatrix}\n6\\\\\n0\\\\\n0\n\\end{bmatrix}$\n\\\\\n\\hline\nCodex input & \nWrite a program that finds the least squares solution to the matrix equation [0,1;1,1;2,1]*x   [6;0;0]\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nA   np.array([[0,1],[1,1],[2,1]])\nb   np.array([6,0,0])\nx   np.linalg.solve(A,b)\nprint(x)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$\\begin{bmatrix}\n-3 \\\\\n5\n\\end{bmatrix}$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We create a matrix A and a vector b.\\newline\n2. We use the lstsq function to find the least squares solution to the matrix equation Axb. \\newline\n3. We print the solution.\\\\\n\\hline\nGPT-3 response & x   [6;-3;2]\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 12: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Eigenvectors and Eigenvalues\\\\\n\\hline\nOriginal question & \nCompute the eigenvalue associated with with the eigenvector $\\begin{bmatrix}\n\\frac{-684}{721}\\\\\n\\frac{228}{721}\n\\end{bmatrix}$ of the matrix \n$\\begin{bmatrix}\n-6 & 3\\\\\n4 & 5\n\\end{bmatrix}$\n\\\\\n\\hline\nCodex input & \nWrite a program that finds the eigenvalue associated with with the eigenvector [-684/721;228/721] of the matrix [-6,3;4,5]\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nA   np.array([[-6,3],[4,5]])\neigenvalues, eigenvectors   np.linalg.eig(A)\nprint(eigenvalues)\nprint(eigenvectors)\nprint(eigenvalues[0]*eigenvectors[:,0])\nprint(eigenvalues[1]*eigenvectors[:,1])\n\\end{lstlisting}\\\\\n\\hline\nProgram solution &\n$-7$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We create a matrix A. \\newline\n2. We use the numpy.linalg.eig function to compute the eigenvalues and eigenvectors of A. \\newline\n3. We print the eigenvalues and eigenvectors.\\\\\n\\hline\nGPT-3 response & The eigenvalue is -2.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 13: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Matrix Algebra\\\\\n\\hline\nOriginal question & \nCompute the inverse of the following matrix:\n$\\begin{bmatrix}\n-1 & -2\\\\\n-2 & 0\n\\end{bmatrix}$\n\\\\\n\\hline\nCodex input & \nSame as original problem\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nA   np.array([[-1,-2],[-2,0]])\nprint(np.linalg.inv(A))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$\\begin{bmatrix}\n0 & -\\frac{1}{2}\\\\\n-\\frac{1}{2} & \\frac{1}{4}\n\\end{bmatrix}$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We import the numpy library as np. \\newline\n2. We create a 2x2 matrix A.\\newline\n3. We print the inverse of A.\\\\\n\\hline\nGPT-3 response & [1/3, 2/3; 2/3, -1]\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 14: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Determinants\\\\\n\\hline\nOriginal question & \nCompute the determinant of the following matrix:\n$\\begin{bmatrix}\n3 & -4 & 5\\\\\n0 & -1 & -5\\\\\n5 & -4 & 3\n\\end{bmatrix}$\n\\\\\n\\hline\nCodex input & \nSame as original problem\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nmatrix   np.array([[3,-4,5],[0,-1,-5],[5,-4,3]])\nprint(np.linalg.det(matrix))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $56$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We import the numpy library as np.\\newline\n2. We create a 3x3 matrix called A. \\newline\n3. We print the determinant of A using the numpy function linalg.det.\\\\\n\\hline\nGPT-3 response & The determinant of the matrix is -64.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 15: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Special Matrices\\\\\n\\hline\nOriginal question & \nFind the real numbers $a$, $b$ and $c$ so that the following matrix is symmetric.\n$\\begin{bmatrix}\n0 & a+b & c+2\\\\\na & 2 & c\\\\\n4 & a+b & 4\n\\end{bmatrix}$\n\\\\\n\\hline\nCodex input & \nUse sympy to find a, b, c so that [0,a+b,c+2;a,2,c;4,a+b,4]   transpose([0,a+b,c+2;a,2,c;4,a+b,4])\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy\n\na, b, c   sympy.symbols('a b c')\nA   sympy.Matrix([[0, a + b, c + 2], [a, 2, c], [4, a + b, 4]])\nB   A.transpose()\nprint(sympy.solve([A[i] - B[i] for i in range(3)], (a, b, c)))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$a   2$, $b   0$, $c   2$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. Define the matrix M.\\newline\n2. Print the matrix M. \\newline\n3. Check if M is symmetric. \\newline\n4. Solve the system of equations M[0, 1] - M[1, 0]   0, M[0, 2] - M[2, 0]   0, M[1, 2] - M[2, 1]   0 for a, b and c.\\\\\n\\hline\nGPT-3 response & a   0 \\newline\nb   0 \\newline\nc   0\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 16: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Matrix Decomposition\\\\\n\\hline\nOriginal question & \nFind an LU decomposition of the following matrix:\n$\\begin{bmatrix}\n-1 & -1 & 2\\\\\n2 & 0 & 3\\\\\n-3 & 2 & -1\n\\end{bmatrix}$\n\\\\\n\\hline\nCodex input & \nFind an LU decomposition of the following matrix:\n[-1,-1,2;2,0,3;-3,2,-1]\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nA   np.array([[-1,-1,2],[2,0,3],[-3,2,-1]])\nL   np.eye(3)\nU   A\nfor i in range(3):\n   for j in range(i+1,3):\n   L[j,i]   U[j,i]/U[i,i]\n   U[j,:]   U[j,:] - L[j,i]*U[i,:]\nprint(L)\nprint(U)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution &\n$\\begin{bmatrix}\n1 & 0 &0\\\\\n-2&1 &0\\\\\n3&\\frac{-5}{2}&1 \n\\end{bmatrix}*\\begin{bmatrix}\n-1&-1&2\\\\\n0&-2&7\\\\\n0&0&\\frac{21}{2}\n\\end{bmatrix}$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. The function lu() returns a tuple (P, L, U) where P is a permutation matrix, L is a lower triangular matrix, and U is an upper triangular matrix. \\newline\n2. The matrix A is decomposed into the product of P, L, and U. \\newline\n3. The matrix P is a permutation matrix. It is a square matrix with exactly one entry of 1 in each row and each column, and all other entries are 0. \\newline\n4. The matrix L is a lower triangular matrix. It is a square matrix with all entries above the main diagonal equal to 0. \\newline\n5. The matrix U is an upper triangular matrix. It is a square matrix with all entries below the main diagonal equal to 0.\\\\\n\\hline\nGPT-3 response & [-1,-1,2;2,0,3;-3,2,-1]   [-1,1,0;2,0,3;-3,2,-1]\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 17: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Matrix Decomposition\\\\\n\\hline\nOriginal question & \nFind an QR decomposition of the following matrix:\n$\\begin{bmatrix}\n1 & 0 & 2\\\\\n0 & 2 & 0\\\\\n0 & -1 & 1\n\\end{bmatrix}$\n\\\\\n\\hline\nCodex input &\nFind an QR decomposition of the following matrix:\n[1,0,2;0,2,0;0,-1,1]\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nA   np.array([[1,0,2],[0,2,0],[0,-1,1]])\nQ,R   np.linalg.qr(A)\nprint(Q)\nprint(R)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$\\begin{bmatrix}\n1 & 0 & 0\\\\\n0 & \\frac{2}{\\sqrt{5}} & \\frac{1}{\\sqrt{5}}\\\\\n0 & \\frac{-1}{\\sqrt{5}} & \\frac{2}{\\sqrt{5}}\n\\end{bmatrix}$\n$\\begin{bmatrix}\n1 & 0 & 2\\\\\n0 & \\sqrt{5} & \\frac{-1}{\\sqrt{5}}\\\\\n0 & 0 & \\frac{2}{\\sqrt{5}}\n\\end{bmatrix}$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We import the numpy library as np. \\newline\n2. We create a 3x3 matrix A. \\newline\n3. We use the qr() function to find the QR decomposition of A. \\newline\n4. We print the Q and R matrices. \\newline\n5. We print the product of Q and R.\\\\\n\\hline\nGPT-3 response & [1,0,2;0,2,0;0,-1,1]   [1,0,0;0,1,0;0,0,1]*[1,0,2;0,2,0;0,-1,1]*[1,0,0;0,1,0;0,0,1]\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 18: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Diagonalization and Eigenvectors/Eigenvalues\\\\\n\\hline\nOriginal question & \nDiagonalize the following matrix:\n$\\begin{bmatrix}\n2 & -3 & 0\\\\\n0 & -1 & 0\\\\\n1 & 3 & 1\n\\end{bmatrix}$\n\\\\\n\\hline\nCodex input & \nWrite a program that diagonalizes the matrix [2,-3,0;0,-1,0;1,3,1]\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nA   np.array([[2,-3,0],[0,-1,0],[1,3,1]])\nprint(A)\neig_val, eig_vec   np.linalg.eig(A)\nprint(eig_val)\nprint(eig_vec)\nD   np.diag(eig_val)\nprint(D)\nV   eig_vec\nprint(V)\nV_inv   np.linalg.inv(V)\nprint(V_inv)\nprint(np.dot(V,np.dot(D,V_inv)))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$\\begin{bmatrix}\n-1 & 0 & 1\\\\\n-1 & 0 & 0\\\\\n2 & 1 & 1\n\\end{bmatrix}$*\n$\\begin{bmatrix}\n-1 & 0 & 0\\\\\n0 & 1 & 0\\\\\n0 & 0 & 2\n\\end{bmatrix}$*\n$\\begin{bmatrix}\n0 & -1 & 0\\\\\n-1 & 3 & 1\\\\\n1 & -1 & 0\n\\end{bmatrix}$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We create a 3x3 matrix A. \\newline\n2. We use the numpy.linalg.eig function to find the eigenvalues and eigenvectors of A. \\newline\n3. We print the eigenvalues and eigenvectors.\\\\\n\\hline\nGPT-3 response & The eigenvalues of the matrix are -2, -1, and 4. The eigenvectors are [-3, 1, 0], [0, 0, 1], and [1, 3, 1].\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 19: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Matrix Algebra\\\\\n\\hline\nOriginal question & \nCompute the trace of the following matrix:\n$\\begin{bmatrix}\n3 & 8 & -2\\\\\n1 & 0 & 2\\\\\n-2 & -1 & 5\n\\end{bmatrix}$\n\\\\\n\\hline\nCodex input & \nCompute the trace of the following matrix:\n[3,8,-2;1,0,2;-2,-1,5]\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\nmatrix   np.array([[3,8,-2],[1,0,2],[-2,-1,5]])\nprint(matrix.diagonal().sum())\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$8$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We import the numpy library as np.\\newline\n2. We create a matrix using the np.array() function. \\newline\n3. We print the trace of the matrix using the np.trace() function.\\\\\n\\hline\nGPT-3 response & The trace of the matrix is 9.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 20: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Four Fundamental Subspaces of a Matrix\\\\\n\\hline\nOriginal question & \nWhich of the vectors $v\\begin{bmatrix} 3 \\\\ -3 \\\\ 1 \\end{bmatrix}$, $u\\begin{bmatrix} 1 \\\\ -2 \\\\ 1 \\end{bmatrix}$ is an element of the nullspace of the following matrix:\n[1,2,-3;-1,-1,0;-2,-3,3]\n\\\\\n\\hline\nCodex input & \nWrite a program that checks if a the vector is an element of the nullspace of a matrix\nUse the program to check if the vector [3;-3;1] is an element of the nullspace of the matrix [1,2,-3;-1,-1,0;-2,-3,3]\nUse the program to check if the vector [1;-2;1] is an element of the nullspace of the matrix [1,2,-3;-1,-1,0;-2,-3,3]\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\n\ndef is_nullspace(matrix, vector):\n   return np.allclose(np.dot(matrix, vector), 0)\n\n\nif __name__   '__main__':\n   matrix   np.array([[1, 2, -3], [-1, -1, 0], [-2, -3, 3]])\n   vector   np.array([[3], [-3], [1]])\n\n   print(is_nullspace(matrix, vector))\n\n   print(is_null([[1, 2, -3], [-1, -1, 0], [-2, -3, 3]], [1, -2, 1]))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$u\\begin{bmatrix} 1 \\\\ -2 \\\\ 1 \\end{bmatrix}$\n\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & 1. It is finding the rank of the matrix A. \\newline\n2. It is finding the rank of the matrix A with the vector v appended to it. \\newline\n3. It is finding the rank of the matrix A with the vector u appended to it.\\newline\nIf the rank of the matrix A is the same as the rank of the matrix A with the vector appended to it, then the vector is not an element of the nullspace of the matrix.\\\\\n\\hline\nGPT-3 response & The vector v[3;-3;1] is an element of the nullspace of the matrix.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 21: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Four Fundamental Subspaces of a Matrix\\\\\n\\hline\nOriginal question & \nFind the nullity of the following matrix:\n$\\begin{bmatrix} 3 & -2 & -1 & 0 & 2 \\\\ 1 & -2 & 1 & -2 & 4 \\\\ -4 & 4 & 0 & 2 & -6\\end{bmatrix}$\n\\\\\n\\hline\nCodex input & \nWrite a program to find the rank of the matrix [3,-2,-1,0,2;1,-2,1,-2,4;-4,4,0,2,-6]\n\nWrite a program to find the nullity, the number of columns minus the rank\n\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\n\nmatrix   np.array([[3,-2,-1,0,2],[1,-2,1,-2,4],[-4,4,0,2,-6]])\n\nprint(np.linalg.matrix_rank(matrix))\n\n\nprint(len(matrix[0]) - np.linalg.matrix_rank(matrix))\n\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$3$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We import the numpy library as np. \\newline\n2. We create a matrix A using the numpy array function. \\newline\n3. We print the rank of A using the matrix\\_rank function. \\newline\n4. We print the number of columns of A minus the rank of A.\\\\\n\\hline\nGPT-3 response & The nullity of the matrix is 3.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 22: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Solving Linear System of Equations\\\\\n\\hline\nOriginal question & \nCompute the reduced row echelon form of the following matrix: $\\begin{bmatrix} -1 & 2 & 1 & 0 \\\\ 2 & 1 & 0 & -1 \\\\ 5 & 0 & -2 & 6\\end{bmatrix}$\n\\\\\n\\hline\nCodex input & \nWrite a program to compute the reduced row echelon form (rref) of a matrix\nCompute the rref of the matrix [-1,2,1,0;2,1,0,-1;5,0,-2,6]\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef rref(matrix):\n   if not matrix: return\n   num_rows   len(matrix)\n   num_cols   len(matrix[0])\n\n   # Start at the last column and work backwards.\n   for col in range(num_cols - 1, -1, -1):\n\n   # Find the row with the leading non-zero entry in this column.\n   for row in range(num_rows):\n   if matrix[row][col] ! 0: break\n\n   # If there is no leading non-zero entry, then all entries are zero.\n   if row   num_rows: continue\n\n   # Swap the current row with the one that has the leading non-zero entry.\n   matrix[row], matrix[num_rows - 1]   matrix[num_rows - 1], matrix[row]\n\n   # Eliminate all other entries in this column.\n   for r in range(num_rows):\n   if r   num_rows - 1: continue   # skip pivot row; already done above\n\n   # Eliminate current row of all other entries in this column.\n   multiplier   matrix[r][col] / matrix[num_rows - 1][col]   # get multiplier to eliminate value at [r][c] from rest of row (except pivot)\n   for c in range(col, num_cols):\n   matrix[r][c] - multiplier * matrix[num_rows - 1][c]\n\n   return matrix\n\nif __name__   \"__main__\":\n   print(rref([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nCompute the rref of the matrix [-1,2,1,0;2,1,0,-1;5,0,-2,6]\n\"\"\"\n\nif __name__   \"__main__\":\n   print(rref([[-1, 2, 1, 0], [2, 1, 0, -1], [5, 0, -2, 6]]))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $\\begin{bmatrix} 1 & 0 & 0 & -2 \\\\ 0 & 1 & 0 & 3 \\\\ 0 & 0 & 1 & -8\\end{bmatrix}$\n\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & 1. Find the last column with a non-zero entry. \\newline\n2. Find the row with the leading non-zero entry in this column.\\newline\n3. Swap the current row with the one that has the leading non-zero entry.\\newline\n4. Eliminate all other entries in this column.\\newline\n5. Repeat steps 1-4 until all columns have been processed.\\\\\n\\hline\nGPT-3 response & [1,0,-1/2,1;0,1,1/2,-1;0,0,0,0]\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 23: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Orthogonality and Projections\\\\\n\\hline\nOriginal question & \nFor what value of a makes the following matrix orthogonal: $\\begin{bmatrix} 0 & 0 & 1 \\\\ -1 & 0 & 0 \\\\ 0 & a & 0 \\end{bmatrix}$\n\\\\\n\\hline\nCodex input & \ntranspose(A)*A   I\nUsing sympy, write a program that finds x such that the 3x3 matrix A[0,0,1;-1,0,0;0,x,0] is orthogonal \n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\n\nx   Symbol('x')\nA   Matrix([[0,0,1],[-1,0,0],[0,x,0]])\nprint(A.transpose()*A)\nprint(A.transpose()*A   eye(3))\nprint(solve(A.transpose()*A - eye(3), x))\n\"\"\"\nGiven a 3x3 matrix A[1,2,3;4,5,6;7,8,9], find the eigenvalues and eigenvectors of A. \n\"\"\"\nfrom sympy import *\ninit_printing()\nx   Symbol('x')\nA   Matrix([[1,2,3],[4,5,6],[7,8,9]])\neigenvals   A.eigenvals() # returns dictionary of eigenvalues and their multiplicity \neigenvals # {-1: 1, 3: 1}   # -1 is a real eigenvalue with multiplicity 1 and 3\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$a-1$ or $a1$\n\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & 1. We define a function is\\_orthogonal that takes a matrix as input and returns True if the matrix is orthogonal and False otherwise. \\newline\n2. We define a function main that loops over all values of a from -10 to 10 and prints out the value of a and whether the matrix is orthogonal. \\newline\n3. We call the main function.\\\\\n\\hline\nGPT-3 response & a   1\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 24: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Basis, Dimension and Span\\\\\n\\hline\nOriginal question & \nWhat is the dimension of the subspace spanned by the following vectors? $\\begin{bmatrix} 2 & -\\frac{1}{2} \\end{bmatrix}, \\begin{bmatrix} 1 & 1 \\end{bmatrix}, \\begin{bmatrix} 4 & 4 \\end{bmatrix}$\n\\\\\n\\hline\nCodex input & \nIn Linear Algebra, the vectors [2,-1/2], [1,1], and [4,4] span a subspace. Write a program that finds the dimension of the subspace \n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\n# Solution:\n# \n# The vectors [2,-1/2], [1,1], and [4,4] span a subspace.\n# \n# The vectors [2,-1/2], [1,1], and [4,4] are linearly independent.\n# \n# The dimension of the subspace is 2.\n\n# Solution\n# \n# We can use the `subspace_basis` function from the `linear_algebra` package to find a basis for the subspace.\nusing LinearAlgebra\n\n# Define the vectors\nv1   [2,-1/2]\nv2   [1,1]\nv3   [4,4]\n\n# Find the basis for the subspace\nsubspace_basis(v1,v2,v3)\n\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \n$2$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We create a matrix A with the given vectors as rows. \\newline\n2. We use the matrix\\_rank function from the numpy library to find the rank of A. \\newline\n3. The rank of A is the dimension of the subspace spanned by the given vectors.\\\\\n\\hline\nGPT-3 response & The dimension of the subspace spanned by the vectors is 2.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{COMS3251, Question 25: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Basis, Dimension and Span\\\\\n\\hline\nOriginal question & \nWhat are the coordinates of the vector $\\begin{bmatrix}\n2\\\\\n1\n\\end{bmatrix}$ in the following basis?\n$\\begin{bmatrix}\n2 & -\\frac{1}{2}\n\\end{bmatrix}$,\n$\\begin{bmatrix}\n1 & 1\n\\end{bmatrix}$\n\\\\\n\\hline\nCodex input & \nWhat are the coordinates of the vector $\\begin{bmatrix}\n2 & 1\n\\end{bmatrix}$ in the basis $\\begin{bmatrix}\n2 & -\\frac{1}{2} \\\\ 1 & 1\n\\end{bmatrix}$\nUse sympy to solve:\n2*x + y   2\n-0.5*x + y   1\n\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\n\nx   Symbol('x')\ny   Symbol('y')\nz   Symbol('z')\nprint(solve([2*x + y - 2, -0.5*x + y - 1], [x, y]))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution &\n$\\begin{bmatrix}\n0.4 & 1.2\n\\end{bmatrix}$\n\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. np.linalg.matrix\\_power(A, 4) is the same as A\\^4.\\\\\n\\hline\nGPT-3 response & A   [1, 2; -2, -3]\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n",
  "title": "A Neural Network Solves, Explains, and Generates University Math Problems by Program Synthesis and Few-Shot Learning at Human Level"
}
