{
  "authors": [
    "Iddo Drori",
    "Sarah Zhang",
    "Reece Shuttleworth",
    "Leonard Tang",
    "Albert Lu",
    "Elizabeth Ke",
    "Kevin Liu",
    "Linda Chen",
    "Sunny Tran",
    "Newman Cheng",
    "Roman Wang",
    "Nikhil Singh",
    "Taylor L. Patti",
    "Jayson Lynch",
    "Avi Shporer",
    "Nakul Verma",
    "Eugene Wu",
    "Gilbert Strang"
  ],
  "date_published": "2021-12-31",
  "raw_tex": "\\section{Solutions for MATH: Intermediate Algebra}\n\\label{sec:solution-MATH-Intermediate-Algebra}\n\n\\paragraph{Intermediate Algebra}\n\nIntermediate algebra problems cover more advanced algebraic topics, including advanced equations, polynomial roots, polynomial division, conic sections, sequences, and series.\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Intermediate Algebra, Question 1: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Intermediate Algebra\\\\\n\\hline\nOriginal question & Find all positive real numbers x that satisfy $x\\sqrt{12 - x} + \\sqrt{12x - x^3} > 12$. Enter all solutions, separated by commas.\\\\\n\\hline\nCodex input & Write a program to find all positive real numbers x that satisfy $x\\sqrt{12 - x} + \\sqrt{12x - x^3} \\geq 12$. Enter all solutions, separated by commas.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom sympy import *\n\nx   Symbol('x')\n\nexpr   x*sqrt(12 - x) + sqrt(12*x - x**3) - 12\n\nsolutions   solve(expr, x)\n\nprint(solutions)\n\\end{lstlisting}\\\\\n\\hline\nProgram Solution & 3 \\\\\n\\hline\nSolution Type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We import the sympy module. \\newline\n2. We create a symbol x.\\newline\n3. We create an expression that we want to solve.\\newline\n4. We solve the expression for x.\\newline\n5. We print the solutions. \\\\\n\\hline\nGPT-3 response & 3,4,5,6,7,8,9,10,11,12\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Intermediate Algebra, Question 2: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Intermediate Algebra\\\\\n\\hline\nOriginal question & Given that $x^2 + y^2   14x + 6y + 6$, find the largest possible value of $3x + 4y$.\\\\\n\\hline\nCodex input & Use scipy to minimize the negative of 3x + 4y with constraint 14x + 6y + 6 - x\\^2 - y\\^2   0. Compute 3x + 4y.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom scipy.optimize import minimize\nimport numpy as np\n\ndef objective(x):\n   return -(3*x[0] + 4*x[1])\n\ndef constraint(x):\n   return 14*x[0] + 6*x[1] + 6 - x[0]**2 - x[1]**2\n\nx0   [0, 0]\n\ncon   {'type': 'eq', 'fun': constraint}\n\nsol   minimize(objective, x0, method'SLSQP', constraintscon)\n\nprint(sol)\nprint(sol.x)\nprint(3*sol.x[0] + 4*sol.x[1])\n\\end{lstlisting}\\\\\n\\hline\nProgram Solution & 73 \\\\\n\\hline\nSolution Type & Manual \\\\\n\\hline\nCodex code explanation & \n1. The objective function is defined as a function of x. \\newline\n2. The constraint is defined as a function of x. \\newline\n3. The initial guess is defined as a list of two numbers.\\newline\n4. The constraint is defined as a dictionary.\\newline\n5. The minimize function is called with the objective function, the initial guess, the method, and the constraint.\\newline\n6. The solution is printed.\\newline\n7. The solution is printed.\\newline\n8. The objective function is evaluated at the solution.\n\\\\\n\\hline\nGPT-3 response & The largest possible value of 3x + 4y is 36.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Intermediate Algebra, Question 3: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Intermediate Algebra\\\\\n\\hline\nOriginal question & Let k be a real number such that k > 1 and\n \\[\\sum_{n1}^{\\infty} \\frac{5n-1}{k^n}   \\frac{13}{4}.\\] Find k.\\\\\n\\hline\nCodex input & Write a program. Let $k$ be a real number such that $k > 1$ and \\[\\sum_{n1}^{\\infty} \\frac{5n-1}{k^n}   \\frac{13}{4}.\\] Find $k.$\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef main():\n   \"\"\"Solve problem.\"\"\"\n   # Define variables.\n   k   1.0\n   k_step   0.1\n   k_max   10.0\n   k_min   0.0\n   k_tol   0.00001\n   k_max_iter   100\n   k_iter   0\n   k_found   False\n   sum_val   0.0\n   sum_tol   0.00001\n   sum_max_iter   100\n   sum_iter   0\n   sum_found   False\n\n   # Find k.\n   while k_iter < k_max_iter and not k_found:\n   k_iter + 1\n   sum_iter   0\n   sum_val   0.0\n   sum_found   False\n   while sum_iter < sum_max_iter and not sum_found:\n   sum_iter + 1\n   sum_val   0.0\n   for n in range(1, sum_iter + 1):\n   sum_val + (5.0 * n - 1.0) / k**n\n   if abs(sum_val - 13.0 / 4.0) < sum_tol:\n   sum_found   True\n   if sum_found:\n   k_found   True\n   else:\n   k + k_step\n   if k > k_max:\n   k   k_min\n   k_step / 10.0\n   if k_step < k_tol:\n   k_found   True\n\n   # Print result.\n   print(k)\n\nif __name__   \"__main__\":\n   main()\n\n\\end{lstlisting}\\\\\n\\hline\nProgram Solution & 3 \\\\\n\\hline\nSolution Type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. Define variables.\\newline\n2. Find k.\\newline\n3. Print result.\\newline\n\nThe variables are:\\newline\n* k: the value of k we're looking for\\newline\n* k\\_step: the step size for k\\newline\n* k\\_max: the maximum value of k\\newline\n* k\\_min: the minimum value of k\\newline\n* k\\_tol: the tolerance for k\\newline\n* k\\_max\\_iter: the maximum number of iterations for k\\newline\n* k\\_iter: the number of iterations for k\\newline\n* k\\_found: whether or not we've found k\\newline\n* sum\\_val: the value of the sum\\newline\n* sum\\_tol: the tolerance for the sum\\newline\n* sum\\_max\\_iter: the maximum number of iterations for the sum\\newline\n* sum\\_iter: the number of iterations for the sum\\newline\n* sum\\_found: whether or not we've found the sum\\newline\n\nThe first while loop is for finding k. The second while loop is for finding the sum.\\newline\n\nThe first while loop is a while loop that runs until either k\\_iter is greater than k\\_max\\_iter or k\\_found is True.\\newline\n\nThe second while loop is a while loop that runs until either sum\\_iter is greater than sum\\_max\\_iter or sum\\_found is True. \\\\\n\\hline\nGPT-3 response & $k   \\frac{13}{4}$\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Intermediate Algebra, Question 4: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Intermediate Algebra\\\\\n\\hline\nOriginal question & Find the number of permutations $(a_1, a_2, a_3, a_4, a_5, a_6)$ of $(1,2,3,4,5,6)$ that satisfy $(a_1 + 1)/2 * (a_2 + 2)/2 * (a_3 + 3)/2 * (a_4 + 4)/2 * (a_5 + 5)/2 * (a_6 + 6)/2 > 6!$.\\\\\n\\hline\nCodex input & Write a program to find the number of permutations $(a_1, a_2, a_3, a_4, a_5, a_6)$ of $(1,2,3,4,5,6)$ that satisfy $(a_1 + 1)/2 * (a_2 + 2)/2 * (a_3 + 3)/2 * (a_4 + 4)/2 * (a_5 + 5)/2 * (a_6 + 6)/2 > 6!$.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom itertools import permutations\n\ndef main():\n   count   0\n   for perm in permutations(range(1,7)):\n   if (perm[0] + 1)/2 * (perm[1] + 2)/2 * (perm[2] + 3)/2 * (perm[3] + 4)/2 * (perm[4] + 5)/2 * (perm[5] + 6)/2 > 720:\n   count + 1\n   print(count)\n\nif __name__   '__main__':\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram Solution & 719 \\\\\n\\hline\nSolution Type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We create a variable called count and set it to 0.\\newline\n2. We create a for loop that iterates through all permutations of (1,2,3,4,5,6).\\newline\n3. We create a condition that checks if the product of the permutation is greater than 720.\\newline\n4. If the condition is true, we add 1 to count.\\newline\n5. We print count. \\\\\n\\hline\nGPT-3 response & There are no such permutations.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Intermediate Algebra, Question 5: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Intermediate Algebra\\\\\n\\hline\nOriginal question & What is the value of the following expression: 1 - 4 + 7 - 10 + 13 - $\\cdots$ - 46 + 49 - 52 + 55 ?\\\\\n\\hline\nCodex input & Write a program using sympy to find the value of the following expression: 1 - 4 + 7 - 10 + 13 - ... - 46 + 49 - 52 + 55?\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef main():\n   \"\"\"Solve problem.\"\"\"\n   # Define variables.\n   n   55\n   sum_val   0.0\n\n   # Find sum.\n   for i in range(1, n + 1):\n   sum_val + (-1)**(i + 1) * i\n\n   # Print result.\n   print(sum_val)\n\nif __name__   \"__main__\":\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram Solution & 28 \\\\\n\\hline\nSolution Type & Automatic Few-Shot (2)\\\\\n\\hline\nCodex code explanation & \n1. Define variables.\\newline\n2. Find sum.\\newline\n3. Print result.\\\\\n\\hline\nGPT-3 response & The value of the expression is -60.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Intermediate Algebra, Question 6: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Intermediate Algebra\\\\\n\\hline\nOriginal question & Let r and s denote the two real roots of $x^2 - x \\sqrt{5} + 1   0$. Then determine $r^8 + s^8$.\\\\\n\\hline\nCodex input & Same as original question\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\n\ndef main():\n   r   (1 + np.sqrt(5)) / 2\n   s   (1 - np.sqrt(5)) / 2\n   print(r**8 + s**8)\n\nif __name__   '__main__':\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram Solution & 47 \\\\\n\\hline\nSolution Type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We define the two roots of the equation as r and s.\\newline\n2. We print the sum of the 8th powers of r and s.\\\\\n\\hline\nGPT-3 response & $r^8 + s^8   (r^4 + s^4)(r^4 - s^4)   (r^2 + s^2)^2 - (rs)^2   5 - 1   4.$\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Intermediate Algebra, Question 7: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Intermediate Algebra\\\\\n\\hline\nOriginal question & Let x and y be positive real numbers such that $4x + 9y   60$. Find the maximum value of $xy$.\\\\\n\\hline\nCodex input & Let x and y be positive real numbers such that $4x + 9y   60$.\nWrite a program that finds the maximum value of $x*y$\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom scipy.optimize import minimize\n\ndef objective(x):\n   x1   x[0]\n   x2   x[1]\n   return -x1*x2\n\ndef constraint1(x):\n   return 4*x[0] + 9*x[1] - 60\n\nx0   [1,1]\n\nb   (1.0, 5.0)\nbnds   (b,b)\ncon1   {'type': 'ineq', 'fun': constraint1}\ncons   [con1]\n\nsol   minimize(objective, x0, method'SLSQP', boundsbnds, constraintscons)\nprint(sol)\nprint(sol.x[0]*sol.x[1])\n\\end{lstlisting}\\\\\n\\hline\nProgram Solution & 25 \\\\\n\\hline\nSolution Type & Manual \\\\\n\\hline\nCodex code explanation & \n1. The objective function is defined as the product of x1 and x2. \\newline\n2. The constraint is defined as 4*x1 + 9*x2 < 60. \\newline\n3. The bounds are defined as 1 < x1 < 5 and 1 < x2 < 5.\\newline\n4. The initial guess is x1   1 and x2   1.\\newline\n5. The minimize function is used to minimize the objective function subject to the constraint and bounds.\\newline\n6. The solution is printed.\\newline\n7. The product of the solution is printed.\n\\\\\n\\hline\nGPT-3 response & The maximum value of xy is 45.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Intermediate Algebra, Question 8: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Intermediate Algebra\\\\\n\\hline\nOriginal question & Find the value of k so that $3 + (3 + k)/4 + (3 + 2k)/4^2 + (3 + 3k)/4^3 + ...   8$.\\\\\n\\hline\nCodex input & Write a program to find the value of k so that $3 + (3 + k)/4 + (3 + 2k)/4^2 + (3 + 3k)/4^3 + ...   8$.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef main():\n   k   0\n   while True:\n   sum_val   3.0\n   for n in range(1, 100):\n   sum_val + (3.0 + k * n) / 4**n\n   if abs(sum_val - 8.0) < 0.00001:\n   print(k)\n   break\n   k + 0.1\n\nif __name__   '__main__':\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram Solution & 9 \\\\\n\\hline\nSolution Type & Automatic Few-Shot (6) \\\\\n\\hline\nCodex code explanation & \n1. We start with k   0.\\newline\n2. We calculate the sum of the series with k   0.\\newline\n3. We check if the sum is equal to 8. If it is, we print k and break out of the loop.\\newline\n4. If the sum is not equal to 8, we increment k by 0.1 and go back to step 2. \\\\\n\\hline\nGPT-3 response & k   4\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Intermediate Algebra, Question 9: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Intermediate Algebra\\\\\n\\hline\nOriginal question & Find the remainder when $r^{13} + 1$ is divided by $r - 1$.\\\\\n\\hline\nCodex input & Same as original questions\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef main():\n   r   2\n   while True:\n   if (r**13 + 1)   (r - 1)   0:\n   print(r)\n   break\n   r + 1\n\nif __name__   '__main__':\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram Solution & 2 \\\\\n\\hline\nSolution Type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. r   2 \\newline\n2. (2**13 + 1) \\ (2 - 1)   0 \\newline\n3. print(2)\\newline\n4. break \\\\\n\\hline\nGPT-3 response & The remainder is 2.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Intermediate Algebra, Question 10: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Intermediate Algebra\\\\\n\\hline\nOriginal question & Compute\n $\\sum_{k1}^{1000} k(\\lceil \\log_{\\sqrt{2}}{k}\\rceil- \\lfloor\\log_{\\sqrt{2}}{k} \\rfloor).$\\\\\n\\hline\nCodex input & Use numpy to write a program that computes: $\\sum_{k1}^{1000} k(\\lceil \\log_{\\sqrt{2}}{k}\\rceil - \\lfloor\\log_{\\sqrt{2}}{k} \\rfloor).$\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\n\ndef sum_of_k_log_floor_log_sqrt_2(k):\n   return np.sum(k * (np.ceil(np.log2(k)) - np.floor(np.log2(k))))\n\nprint(sum_of_k_log_floor_log_sqrt_2(np.arange(1, 1001)))\n\\end{lstlisting}\\\\\n\\hline\nProgram Solution & 499477 \\\\\n\\hline\nSolution Type & Manual\\\\\n\\hline\nCodex code explanation & \n1. np.arange(1, 1001) creates an array of numbers from 1 to 1000 \\newline\n2. np.ceil(np.log2(k)) - np.floor(np.log2(k)) creates an array of numbers from 0 to 1 \\newline\n3. k * (np.ceil(np.log2(k)) - np.floor(np.log2(k))) creates an array of numbers from 0 to 1000 \\newline\n4. np.sum(k * (np.ceil(np.log2(k)) - np.floor(np.log2(k)))) sums up the array of numbers from 0 to 1000\n\\\\\n\\hline\nGPT-3 response & $\\sum_{k1}^{1000} k(\\lceil \\log_{\\sqrt{2}}{k}\\rceil- \\lfloor\\log_{\\sqrt{2}}{k} \\rfloor)   \\sum_{k1}^{1000} k(\\log_{\\sqrt{2}}{\\lceil k\\rceil}- \\log_{\\sqrt{2}}{\\lfloor k \\rfloor})   \\sum_{k1}^{1000} k(\\log_{\\sqrt{2}}{k} + \\log_{\\sqrt{2}}{1} - \\log_{\\sqrt{2}}{k} + \\log_{\\sqrt{2}}{1})   \\sum_{k1}^{1000} k(1 + \\log_{\\sqrt{2}}{1})   \\sum_{k}$\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Intermediate Algebra, Question 11: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Intermediate Algebra\\\\\n\\hline\nOriginal question & Find the positive value of x which satisfies $log_5 (x - 2) + log_{\\sqrt{5}} (x^3 - 2) + log_{1/5} (x - 2)   4$.\\\\\n\\hline\nCodex input & Write a function using math to compute x which rounds $(\\log_5 (x - 2) + \\log_(\\text{math.sqrt(5)}) (x^3 - 2) + \\log_(1/5) (x - 2))$ to 4. $\\log_5(x-2)$ is equivalent to math.log(x-2,5) in Python. x > 2.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\n\ndef sum_of_k_log_floor_log_sqrt_2(k):\n   return np.sum(k * (np.ceil(np.log2(k)) - np.floor(np.log2(k))))\n\nprint(sum_of_k_log_floor_log_sqrt_2(np.arange(1, 1001)))\n\\end{lstlisting}\\\\\n\\hline\nProgram Solution & 3 \\\\\n\\hline\nSolution Type & Manual\\\\\n\\hline\nCodex code explanation & \n1. The function is using math to compute x which rounds $(\\log_5 (x - 2) + \\log_(\\text{math.sqrt(5)}) (x^3 - 2) + \\log_(1/5) (x - 2))$ to 4. \\newline\n2. $\\log_5(x-2)$ is equivalent to math.log(x-2,5) in Python. \\newline\n3. x > 2.\n\\\\\n\\hline\nGPT-3 response & x   10\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Intermediate Algebra, Question 12: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Intermediate Algebra\\\\\n\\hline\nOriginal question & The polynomial $2x^3 + bx + 7$ has a factor of the form $x^2 + px + 1$. Find b.\\\\\n\\hline\nCodex input & \\\\\n\\hline\nCodex code & \\begin{lstlisting}\n\n\\end{lstlisting}\\\\\n\\hline\nProgram Solution & -45/2 \\\\\n\\hline\nSolution Type & Manual\\\\\n\\hline\nCodex code explanation &   \\begin{lstlisting}\n\n\\end{lstlisting}\\\\\n\\hline\nGPT-3 response & b   -1\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Intermediate Algebra, Question 13: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Intermediate Algebra\\\\\n\\hline\nOriginal question & Two reals a and b are such that $a+b7$ and $a^3+b^391$. Compute $ab$.\\\\\n\\hline\nCodex input & Two reals a and b are such that $a+b7$ and $a^3+b^391$. Compute $ab$.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef main():\n   for a in range(1, 8):\n   b   7 - a\n   if a**3 + b**3   91:\n   print(a * b)\n\nif __name__   '__main__':\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram Solution & 12 \\\\\n\\hline\nSolution Type & Manual\\\\\n\\hline\nCodex code explanation &\n1. We know that $a + b   7$, so we can iterate through all possible values of $a$, and then compute $b   7 - a$.\\newline\n2. We know that $a^3 + b^3   91$, so we can check if $a^3 + b^3   91$.\\newline\n3. If $a^3 + b^3   91$, then we have found the correct values of $a$ and $b$, so we can compute $a * b$.\n\\\\\n\\hline\nGPT-3 response & ab21\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Intermediate Algebra, Question 14: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Intermediate Algebra\\\\\n\\hline\nOriginal question & A sequence consists of 2010 terms.   Each term after the first is 1 larger than the previous term.   The sum of the 2010 terms is 5307.   When every second term is added up, starting with the first term and ending with the second last term, what is the sum?\\\\\n\\hline\nCodex input & \\\\\n\\hline\nCodex code & \\begin{lstlisting}\n\n\\end{lstlisting}\\\\\n\\hline\nProgram Solution & 2151 \\\\\n\\hline\nSolution Type & Manual\\\\\n\\hline\nCodex code explanation &   \n\\\\\n\\hline\nGPT-3 response & The sum of the terms when every second term is added up is 2654.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Intermediate Algebra, Question 15: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Intermediate Algebra\\\\\n\\hline\nOriginal question & If $z^2 - 8z + 37   0$, how many possible values are there for |z|?\\\\\n\\hline\nCodex input & Write a program to solve: $z^2 - 8z + 37   0$. Then, determine how many possible solutions there are for |z|.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport cmath\n\na   1\nb   -8\nc   37\n\nd   (b**2) - (4*a*c)\n\nsol1   (-b-cmath.sqrt(d))/(2*a)\nsol2   (-b+cmath.sqrt(d))/(2*a)\n\nprint('The solution are {0} and {1}'.format(sol1,sol2))\n\n# |z|   sqrt(x^2 + y^2)\n\nprint('|z|   {0}'.format(abs(sol1)))\nprint('|z|   {0}'.format(abs(sol2)))\n\\end{lstlisting}\\\\\n\\hline\nProgram Solution & 1 \\\\\n\\hline\nSolution Type & Manual\\\\\n\\hline\nCodex code explanation &   \n1. We import the cmath module to use the sqrt() function.\\newline\n2. We define the variables a, b, and c.\\newline\n3. We calculate the discriminant, d.\\newline\n4. We calculate the two solutions, sol1 and sol2.\\newline\n5. We print the solutions.\\newline\n6. We calculate the absolute value of the solutions.\\newline\n7. We print the absolute value of the solutions.\n\\\\\n\\hline\nGPT-3 response & The sum of the terms when every second term is added up is 2654.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}",
  "title": "A Neural Network Solves, Explains, and Generates University Math Problems by Program Synthesis and Few-Shot Learning at Human Level"
}
