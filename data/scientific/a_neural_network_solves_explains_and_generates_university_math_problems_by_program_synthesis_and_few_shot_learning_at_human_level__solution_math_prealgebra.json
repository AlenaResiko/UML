{
  "authors": [
    "Iddo Drori",
    "Sarah Zhang",
    "Reece Shuttleworth",
    "Leonard Tang",
    "Albert Lu",
    "Elizabeth Ke",
    "Kevin Liu",
    "Linda Chen",
    "Sunny Tran",
    "Newman Cheng",
    "Roman Wang",
    "Nikhil Singh",
    "Taylor L. Patti",
    "Jayson Lynch",
    "Avi Shporer",
    "Nakul Verma",
    "Eugene Wu",
    "Gilbert Strang"
  ],
  "date_published": "2021-12-31",
  "raw_tex": "\\section{Solutions for MATH: Prealgebra}\n\\label{sec:solution-MATH-Prealgebra}\n\n\\paragraph{Prealgebra}\nPrealgebra problems cover a basic topics from a variety of subjects within math. These include concepts of mean, median, and mode, primes and divisibility, working with fractions, decimals, and ratios, solving simple equations and inequalities, and simple counting problems.\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Prealgebra, Question 1: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Prealgebra\\\\\n\\hline\nOriginal question & How many different primes are in the prime factorization of $87\\cdot89\\cdot91\\cdot93$?\\\\\n\\hline\nCodex input & How many different primes are in the prime factorization of 87*89*91*93?\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nfrom math import sqrt\n\ndef is_prime(n):\n   if n   2:\n   return True\n   if n   2   0:\n   return False\n   for i in range(3, int(sqrt(n)) + 1, 2):\n   if n   i   0:\n   return False\n   return True\n\ndef prime_factors(n):\n   factors   []\n   for i in range(2, int(sqrt(n)) + 1):\n   if is_prime(i) and n   i   0:\n   factors.append(i)\n   return factors\n\ndef main():\n   n   87 * 89 * 91 * 93\n   print(len(set(prime_factors(n))))\n\nif __name__   '__main__':\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $6$ \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation &\n1. We define a function that checks if a number is prime.\\newline\n2. We define a function that returns a list of prime factors of a number.\\newline\n3. We define a function that calls the previous two functions and prints the length of the set of prime factors.\\newline\nThe set() function returns a set of unique elements from a list.\\newline\nThe main() function is called at the bottom of the code.\\\\\n\\hline\nGPT-3 response & There are six different primes in the prime factorization of 87*89*91*93.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Prealgebra, Question 2: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Prealgebra\\\\\n\\hline\nOriginal question & What is the greatest common factor of 84, 112 and 210?\\\\\n\\hline\nCodex input & What is the greatest common factor of 84, 112 and 210?\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef gcd(a, b):\n   if b   0:\n   return a\n   return gcd(b, a   b)\n\ndef main():\n   print(gcd(84, gcd(112, 210)))\n\nif __name__   '__main__':\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $14$ \\\\\n\\hline\nSolution type & Automatic Few-Shot\\\\\n\\hline\nCodex code explanation & 1. The function gcd(a, b) is a recursive function that returns the greatest common divisor of a and b.\\newline\n2. The function gcd(a, b) is called with the arguments 84 and gcd(112, 210).\\newline\n3. The function gcd(a, b) is called with the arguments 112 and gcd(210, 112).\\newline\n4. The function gcd(a, b) is called with the arguments 210 and gcd(112, 98).\\newline\n5. The function gcd(a, b) is called with the arguments 112 and gcd(98, 14).\\newline\n6. The function gcd(a, b) is called with the arguments 98 and gcd(14, 0).\\\\\n\\hline\nGPT-3 response & The greatest common factor of 84, 112 and 210 is 84.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Prealgebra, Question 3: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Prealgebra\\\\\n\\hline\nOriginal question & At Frank's Fruit Market, 3 bananas cost as much as 2 apples, and 6 apples cost as much as 4 oranges. How many oranges cost as much as 18 bananas?\\\\\n\\hline\nCodex input & We have 18 bananas.\n\napples to bananas rate: 2/3. \n\noranges to apples rate: 4/6.\n\nWrite a program to exchange bananas for apples.\n\nThen use that answer to create a program to exchange apples for oranges.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nbananas   18\napples   bananas * 2/3\noranges   apples * 4/6\n\nprint(\"We have\", bananas, \"bananas.\")\nprint(\"We have\", apples, \"apples.\")\nprint(\"We have\", oranges, \"oranges.\")\n\nprint(\"We can exchange\", bananas, \"bananas for\", apples, \"apples.\")\nprint(\"We can exchange\", apples, \"apples for\", oranges, \"oranges.\")\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $8$ \\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & 1. We have 18 bananas.\\newline\n2. We can exchange 18 bananas for 12 apples.\\newline\n3. We can exchange 12 apples for 8 oranges.\\\\\n\\hline\nGPT-3 response & 36 oranges\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Prealgebra, Question 4: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Prealgebra\\\\\n\\hline\nOriginal question & Robin bought a four-scoop ice cream cone having a scoop each of vanilla, chocolate, strawberry and cherry. In how many orders can the four scoops be stacked on the cone if they are stacked one on top of the other?\\\\\n\\hline\nCodex input & Robin bought a four-scoop ice cream cone having a scoop each of vanilla, chocolate, strawberry and cherry. In how many orders can the four scoops be stacked on the cone if they are stacked one on top of the other?\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport itertools\n\ndef main():\n   scoops   ['vanilla', 'chocolate', 'strawberry', 'cherry']\n   orders   list(itertools.permutations(scoops))\n   print(len(orders))\n\nif __name__   '__main__':\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $24$ \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We create a list of scoops.\\newline\n2. We create a list of all possible permutations of the scoops.\\newline\n3. We print the length of the list of orders.\\newline\nThe output of the above code is 24.\\\\\n\\hline\nGPT-3 response & There are 24 possible ways to stack the four scoops on the cone.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Prealgebra, Question 5: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Prealgebra\\\\\n\\hline\nOriginal question & The average age of the three Wilson children is 7 years. If the two younger children are 4 years old and 7 years old, how many years old is the oldest child?\\\\\n\\hline\nCodex input & The average age of the three Wilson children is 7 years. If the two younger children are 4 years old and 7 years old, how many years old is the oldest child?\\\\\n\\hline\nCodex code & \\begin{lstlisting}\n# The average age of the three Wilson children is 7 years.\n# If the two younger children are 4 years old and 7 years old,\n# how many years old is the oldest child?\n\n# Let x be the age of the oldest child\n# 4 + 7 + x   7 * 3\n# x   7 * 3 - 4 - 7\n# x   7 * 3 - 11\n# x   14\n\nprint(7 * 3 - 11)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $10$ \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We are creating a variable called x and assigning it the value of the oldest child's age.\\newline\n2. We are adding the ages of the two younger children and the oldest child.\\newline\n3. We are multiplying the average age by the number of children.\\newline\n4. We are subtracting the ages of the two younger children from the average age multiplied by the number of children.\\newline\n5. We are printing the value of the oldest child's age.\\\\\n\\hline\nGPT-3 response & The oldest child is 11 years old.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Prealgebra, Question 6: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Prealgebra\\\\\n\\hline\nOriginal question & Calculate 8 divided by $\\frac{1}{8}.$\\\\\n\\hline\nCodex input & Calculate 8 divided by 1/8.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nprint(8 / (1 / 8))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $64$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. 8 / (1 / 8)\\\\\n\\hline\nGPT-3 response & 8 divided by 1/8 is equal to 64.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Prealgebra, Question 7: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Prealgebra\\\\\n\\hline\nOriginal question & What is the value of $\\sqrt{36 \\times \\sqrt{16}}$?\\\\\n\\hline\nCodex input & What is the value of sqrt(36*sqrt(16))?\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport math\n\nprint(math.sqrt(36*math.sqrt(16)))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $12$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. import math \\newline\n2. def main():\\newline\n3. print(math.sqrt(36*math.sqrt(16)))\\newline\n4. if \\_\\_name\\_\\_   \"\"\\_\\_main\\_\\_\"\":\\newline\n5. main()\\\\\n\\hline\nGPT-3 response & The value of sqrt(36*sqrt(16)) is 12.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Prealgebra, Question 8: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Prealgebra\\\\\n\\hline\nOriginal question & The 5 a.m. temperatures for seven consecutive days were $-7^{\\circ}$, $-4^{\\circ}$, $-4^{\\circ}$, $-5^{\\circ}$, $1^{\\circ}$, $3^{\\circ}$ and $2^{\\circ}$ Celsius. What is the mean 5 a.m. temperature for the week in degrees Celsius?\\\\\n\\hline\nCodex input & The 5 a.m. temperatures for seven consecutive days were -7 degrees, -4 degrees, -4 degrees, -5 degrees, 1 degree, 3 degrees and 2 degrees Celsius. Write a program that finds the mean 5 a.m. temperature for the week in degrees Celsius.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ntemps   [-7, -4, -4, -5, 1, 3, 2]\n\nmean   sum(temps) / len(temps)\n\nprint(mean)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $-2$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We create a list of temperatures.\\newline\n2. We use the sum() function to add up all the temperatures in the list.\\newline\n3. We use the len() function to count the number of temperatures in the list.\\newline\n4. We divide the sum of the temperatures by the number of temperatures to find the mean.\\newline\n5. We print the mean.\\\\\n\\hline\nGPT-3 response & The mean 5 a.m. temperature for the week in degrees Celsius is -2.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Prealgebra, Question 9: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Prealgebra\\\\\n\\hline\nOriginal question & How many four-digit positive integers are there with thousands digit $2?$\\\\\n\\hline\nCodex input & Write a program that determines how many four-digit positive integers there are with thousands digit 2.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef main():\n   count   0\n   for i in range(1000, 10000):\n   if str(i)[0]   '2':\n   count + 1\n   print(count)\n\nif __name__   '__main__':\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $1000$ \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We create a variable called count and set it to 0.\\newline\n2. We create a for loop that iterates through the range of 1000 to 10000.\\newline\n3. We check if the first digit of the number is 2.\\newline\n4. If it is, we add 1 to the count variable.\\newline\n5. We print the count variable.\\\\\n\\hline\nGPT-3 response & There are 1,000 four-digit positive integers with thousands digit 2.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Prealgebra, Question 10: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Prealgebra\\\\\n\\hline\nOriginal question & Find the smallest positive $a$ such that $a$ is a multiple of $4$ and $a$ is a multiple of $14.$\\\\\n\\hline\nCodex input & Find the smallest positive a such that a is a multiple of 4 and a is a multiple of 14.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef smallest_multiple(n1, n2):\n   \"\"\"\n   Find the smallest positive a such that a is a multiple of n1 and a is a multiple of n2.\n   \"\"\"\n   a   1\n   while True:\n   if a   n1   0 and a   n2   0:\n   return a\n   a + 1\n\nprint(smallest_multiple(4, 14))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $28$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. It starts with a   1.\\newline\n2. It checks if a is a multiple of 4 and a is a multiple of 14.\\newline\n3. If it is, it returns a.\\newline\n4. If it isn't, it adds 1 to a and goes back to step 2.\\\\\n\\hline\nGPT-3 response & 56\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Prealgebra, Question 11: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Prealgebra\\\\\n\\hline\nOriginal question & What is 5/6 of 30? \\\\\nCodex input & What is 5/6 of 30?\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nprint(5/6*30)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $25$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. The first line is a comment. Comments are ignored by the computer.\\newline\n2. The second line is a print statement. It prints the string \"What is 5/6 of 30?\" to the screen.\\\\\n\\hline\nGPT-3 response & 5/6 of 30 is 25.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Prealgebra, Question 12: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Prealgebra\\\\\n\\hline\nOriginal question & What is the sum of the prime numbers between 10 and 20?\\\\\n\\hline\nCodex input & Write a program that finds the sum of the prime numbers between 10 and 20.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef is_prime(n):\n   if n   2 or n   3:\n   return True\n   if n < 2 or n   2   0:\n   return False\n   if n < 9:\n   return True\n   if n   3   0:\n   return False\n   r   int(n ** 0.5)\n   f   5\n   while f < r:\n   if n   f   0:\n   return False\n   if n   (f + 2)   0:\n   return False\n   f + 6\n   return True\n\nsum   0\nfor i in range(10, 21):\n   if is_prime(i):\n   sum + i\n\nprint(sum)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $60$\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & 1. We define a function called is\\_prime that takes in a number n.\\newline\n2. We check if n is 2 or 3, and if so, we return True.\\newline\n3. We check if n is less than 2 or if n is divisible by 2, and if so, we return False.\\newline\n4. We check if n is less than 9, and if so, we return True.\\newline\n5. We check if n is divisible by 3, and if so, we return False.\\newline\n6. We find the square root of n and store it in r.\\newline\n7. We set f to 5.\\newline\n8. We enter a while loop that runs as long as f is less than or equal to r.\\newline\n9. We check if n is divisible by f, and if so, we return False.\\newline\n10. We check if n is divisible by f + 2, and if so, we return False.\\newline\n11. We increment f by 6.\\newline\n12. We return True.\\newline\n13. We set sum to 0.\\newline\n14. We enter a for loop that runs from 10 to 21.\\newline\n15. We check if i is prime, and if so, we add it to sum.\\newline\n16. We print sum.\\\\\n\\hline\nGPT-3 response & There are six prime numbers between 10 and 20: 11, 13, 17, 19, 23, 29. The sum of these numbers is 116.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Prealgebra, Question 13: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Prealgebra\\\\\n\\hline\nCodex input & What is the largest prime factor of 3328?\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef is_prime(n):\n   if n   2 or n   3: return True\n   if n < 2 or n2   0: return False\n   if n < 9: return True\n   if n3   0: return False\n   r   int(n**0.5)\n   f   5\n   while f < r:\n   if nf   0: return False\n   if n(f+2)   0: return False\n   f +6\n   return True\n\ndef largest_prime_factor(n):\n   i   2\n   while i < n:\n   if n   i   0 and is_prime(i):\n   n   n / i\n   else:\n   i + 1\n   return n\n\nprint(largest_prime_factor(3328))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $13$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. It is checking if the number is a prime number.\\newline\n2. If it is a prime number, it is dividing the number by the prime number.\\newline\n3. If it is not a prime number, it is incrementing the number by 1.\\newline\n4. It is repeating the process until the number is a prime number.\\newline\n5. It is returning the prime number.\\\\\n\\hline\nGPT-3 response & The largest prime factor of 3328 is 37.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Prealgebra, Question 14: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Prealgebra\\\\\n\\hline\nCodex input & Sixty percent of a plane's passengers are women and ten percent of those women are in first class. What is the number of women in first class if the plane is carrying 200 passengers?\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef women_in_first_class(total_passengers):\n   \"\"\"\n   Calculate the number of women in first class.\n\n   :param total_passengers: The total number of passengers on the plane.\n   :return: The number of women in first class.\n   \"\"\"\n   return total_passengers * 0.6 * 0.1\n\n\nprint(women_in_first_class(200))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $12$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. The function women\\_in\\_first\\_class() is called with the argument 200.\\newline\n2. The function calculates the number of women in first class.\\newline\n3. The function returns the number of women in first class.\\newline\n4. The return value is printed.\\\\\n\\hline\nGPT-3 response & There are 20 women in first class.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Prealgebra, Question 15: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\\hline\nTopic & Prealgebra\\\\\n\\hline\nCodex input & Patty ordered a pizza to be delivered. The bill was 12. Patty pays 15 and tells the delivery person to keep the change as a tip. What percent tip did she give?\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nbill   12\npaid   15\ntip   paid - bill\ntip_percent   tip / bill * 100\nprint(tip_percent)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $25$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. We first define the bill and the amount paid.\\newline\n2. We then calculate the tip by subtracting the bill from the amount paid.\\newline\n3. We then calculate the tip percent by dividing the tip by the bill and multiplying by 100.\\newline\n4. We then print the tip percent.\\\\\n\\hline\nGPT-3 response & Patty gave a 20\\ tip.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}",
  "title": "A Neural Network Solves, Explains, and Generates University Math Problems by Program Synthesis and Few-Shot Learning at Human Level"
}
