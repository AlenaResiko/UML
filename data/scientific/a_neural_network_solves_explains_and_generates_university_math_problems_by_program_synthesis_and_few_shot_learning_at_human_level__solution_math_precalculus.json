{
  "authors": [
    "Iddo Drori",
    "Sarah Zhang",
    "Reece Shuttleworth",
    "Leonard Tang",
    "Albert Lu",
    "Elizabeth Ke",
    "Kevin Liu",
    "Linda Chen",
    "Sunny Tran",
    "Newman Cheng",
    "Roman Wang",
    "Nikhil Singh",
    "Taylor L. Patti",
    "Jayson Lynch",
    "Avi Shporer",
    "Nakul Verma",
    "Eugene Wu",
    "Gilbert Strang"
  ],
  "date_published": "2021-12-31",
  "raw_tex": "\\section{Solutions for MATH: Precalculus}\n\\label{sec:solution-MATH-Precalculus}\n\n\\paragraph{Precalculus}\n\nPrecalculus covers topics such as vectors, matrices, trigonometric functions, trigonometric expressions, and complex numbers.\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\n\\caption{MATH Precalculus, Question 1: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Precalculus\\\\\n\\hline\nOriginal question & If $\\|a\\|   3$ and $\\|b\\|   6,$ then find $(a + b) \\cdot (a - b).$\\\\\n\\hline\nCodex input & If ||a||   3 and ||b||   6, then find (a + b) * (a - b).\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport math\n\ndef main():\n   a   3\n   b   6\n   print(\"(a + b) * (a - b) \", (a + b) * (a - b))\n\nmain()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $-27$\\\\\n\\hline\nSolution type & Automatic Few-Shot (5)\\\\\n\\hline\nCodex code explanation & \n1. We import the math module. \\newline\n2. We define a function called main().\\newline\n3. We define two variables, a and b.\\newline\n4. We print the result of (a + b) * (a - b).\\newline\n5. We call the main() function. \\\\\n\\hline\nGPT-3 response & (a + b) * (a - b)   9\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\n\\end{longtable}\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Precalculus, Question 2: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Precalculus\\\\\n\\hline\nOriginal question & If tan(x)   2, then find tan(x + pi/4).\\\\\n\\hline\nCodex input & If tan(x)   2, then find tan(x + pi/4).\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport math\n\nx   math.atan(2)\nprint(math.tan(x + math.pi/4))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $-3$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & 1. math.atan(2) returns the arctangent of 2, which is 1.1071487177940904 \\newline\n2. math.tan(x + math.pi/4) returns the tangent of 1.1071487177940904 + 0.7853981633974483, which is 1.9999999999999998 \\\\\n\\hline\nGPT-3 response & If tan(x)   2, then tan(x + pi/4)   2.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Precalculus, Question 3: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Precalculus\\\\\n\\hline\nOriginal question & Evaluate $(2-w)(2-w^2)\\cdots(2-w^{10})$ where $we^{2\\pi i/11}.$\\\\\n\\hline\nCodex input & Evaluate (2-w)*(2-w\\^2)*...*(2-w\\^10) where we\\^(2pi*i/11).\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport math\n\ndef main():\n   w   math.e**(2*math.pi*1j/11)\n   print(w)\n   print(w**2)\n   print(w**3)\n   print(w**4)\n   print(w**5)\n   print(w**6)\n   print(w**7)\n   print(w**8)\n   print(w**9)\n   print(w**10)\n   print(2-w)\n   print((2-w)*(2-w**2)*(2-w**3)*(2-w**4)*(2-w**5)*(2-w**6)*(2-w**7)*(2-w**8)*(2-w**9)*(2-w**10))\n\nmain()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $2047$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation &\n1. It's defining a variable w to be the 11th root of unity.\\newline\n2. It's printing out the value of w, w\\^2, w\\^3, ..., w\\^10.\\newline\n3. It's printing out the value of 2-w.\\newline\n4. It's printing out the value of (2-w)(2-w\\^2)(2-w\\^3)...(2-w\\^10).\\\\\n\\hline\nGPT-3 response & 2(1-w)(1-w\\^2)(1-w\\^3)(1-w\\^4)(1-w\\^5)(1-w\\^6)(1-w\\^7)(1-w\\^8)(1-w\\^9)(1-w\\^10)\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\n\\end{longtable}\n\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Precalculus, Question 4: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Precalculus\\\\\n\\hline\nOriginal question & If $\\det(A)   5,$ then find $\\det(A^{3}).$\\\\\n\\hline\nCodex input & If the determinant of A is 5, find the determinant of A\\^3.\nWhat is the determinant of A\\^{}3.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\n\ndef det_power(det, power):\n   \"\"\"\n   If the determinant of A is 5, find the determinant of A^3.\n   \"\"\"\n   return det ** power\n\ndef main():\n   det   5\n   power   3\n   print(det_power(det, power))\n\nif __name__   \"__main__\":\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $125$\\\\\n\\hline\nSolution type & Automatic Few-Shot (1)\\\\\n\\hline\nCodex code explanation & \n1. We import the numpy library.\\newline\n2. We define a function called det\\_power that takes two arguments: det and power.\\newline\n3. We return the value of det to the power of power.\\newline\n4. We define a function called main that doesn't take any arguments.\\newline\n5. We print the value of det\\_power(det, power).\\newline\n6. We call the main function.\\\\\n\\hline\nGPT-3 response & The determinant of A\\^3 is 125.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Precalculus, Question 5: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Precalculus\\\\\n\\hline\nOriginal question & Let $S$ be a region in the plane with area 10.   When we apply the matrix\n\n\\[\\begin{bmatrix} 2 & 1 \\\\ 7 & -3 \\end{bmatrix}\\]to $S,$ we obtain the region $S'.$   Find the area of $S'.$\\\\\n\\hline\nCodex input & Let S be a region in the plane with area 10.   When we apply the matrix [2, 1; 7, -3] to S, we obtain S'. Find the area of S'.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\n\nS   10\n\nmatrix   np.array([[2, 1], [7, -3]])\n\nS_prime   np.linalg.det(matrix) * S\n\nprint(S_prime)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $130$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation &\n1. We create a matrix called matrix.\\newline\n2. We calculate the determinant of matrix.\\newline\n3. We multiply the determinant by S.\\newline\n4. We print the result.\\\\\n\\hline\nGPT-3 response & The area of S' is 4.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Precalculus, Question 6: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Precalculus\\\\\n\\hline\nOriginal question & If $\\det A   2$ and $\\det B   12,$ then find $\\det (AB).$\\\\\n\\hline\nCodex input & If the determinant of A is 2 and the determinant of B is 12, then find the determinant of A*B.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\n\ndef det_product(det1, det2):\n   \"\"\"\n   Given two determinants 2 and 12 from two matrices, find the determinant resulting from taking the product. \n   \"\"\"\n   return det1 * det2\n\ndef main():\n   det1   2\n   det2   12\n   print(det_product(det1, det2))\n\nif __name__   \"__main__\":\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $24$\\\\\n\\hline\nSolution type & Automatic Few-Shot (6)\\\\\n\\hline\nCodex code explanation &\n1. We import the numpy library.\\newline\n2. We define a function called det\\_product that takes two arguments, det\\_a and det\\_b.\\newline\n3. We return the product of det\\_a and det\\_b.\\newline\n4. We define a function called main that doesn't take any arguments.\\newline\n5. We define det\\_a and det\\_b.\\newline\n6. We print the result of det\\_product(det\\_a, det\\_b).\\newline\n7. We call the main function.\\\\\n\\hline\nGPT-3 response & The determinant of A*B is 24.\\\\\n\\hline\nGPT-3 evaluation & Correct\\\\\n\\hline\n\n\\end{longtable}\n\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Precalculus, Question 7: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Precalculus\\\\\n\\hline\nOriginal question & If the six solutions of $x^6-64$ are written in the form $a+bi$, where $a$ and $b$ are real, find the product of those solutions with $a>0.$\\\\\n\\hline\nCodex input & Write a program to find the six solutions of $x^6+640$ using sympy. Then, find the product of those solutions where the real component of the complex number is positive.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy\n\nx   sympy.symbols('x')\n\nsolutions   sympy.solve(x**6 + 64, x)\n\nprint(solutions)\n\npositive_solutions   [s for s in solutions if s.as_real_imag()[0] > 0]\n\nprint(positive_solutions)\n\nproduct   1\nfor s in positive_solutions:\n   product * s\n\nprint(product)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $4$\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation & \n1. We create a variable x that is a symbol.\\newline\n2. We solve the equation x**6 + 64   0 for x.\\newline\n3. We print the solutions.\\newline\n4. We create a list of the solutions that are positive.\\newline\n5. We print the positive solutions.\\newline\n6. We multiply the positive solutions together.\\newline\n7. We print the product.\\\\\n\\hline\nGPT-3 response & -4096\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Precalculus, Question 8: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Precalculus\\\\\n\\hline\nOriginal question & Simplify\n\\[\\frac{\\tan^3 75^\\circ + \\cot^3 75^\\circ}{\\tan 75^\\circ + \\cot 75^\\circ}.\\]\\\\\n\\hline\nCodex input & Simplify (tan\\^3(75) + cotan\\^3(75))/(tan(75) + cotan(75)). All angles are in degrees.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport math\n\ndef main():\n   print(\"\"This program simplifies (tan^3(75) + cotan^3(75))/(tan(75) + cotan(75)).\"\")\n   print(\"\"All angles are in degrees.\"\")\n   print()\n\n   tan   math.tan(math.radians(75))\n   cotan   1 / tan\n\n   print(\"\"tan(75) \"\", tan)\n   print(\"\"cotan(75) \"\", cotan)\n   print()\n\n   print(\"\"(tan^3(75) + cotan^3(75))/(tan(75) + cotan(75)) \"\", (tan**3 + cotan**3) / (tan + cotan))\n\nmain()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $13$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. It prints out the problem.\\newline\n2. It converts 75 degrees to radians and then calculates the tangent and cotangent of 75 degrees.\\newline\n3. It prints out the tangent and cotangent of 75 degrees.\\newline\n4. It calculates the problem and prints out the answer.\\\\\n\\hline\nGPT-3 response & (sin(75) + cos(75))/(sin(75) - cos(75))\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Precalculus, Question 9: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Precalculus\\\\\n\\hline\nOriginal question & Compute\n\\[\n\\begin{vmatrix} \\cos 1 & \\cos 2 & \\cos 3 \\\\ \\cos 4 & \\cos 5 & \\cos 6 \\\\ \\cos 7 & \\cos 8 & \\cos 9 \\end{vmatrix} \\]All the angles are in radians.\\\\\n\\hline\nCodex input & Compute the determinant of the matrix [cos 1, cos 2, cos 3; cos 4, cos 5, cos 6; cos 7, cos 8; cos 9]. All the angles are in radians.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\n\ndef main():\n   a   np.array([[np.cos(1), np.cos(2), np.cos(3)], [np.cos(4), np.cos(5), np.cos(6)], [np.cos(7), np.cos(8), np.cos(9)]])\n   print(np.linalg.det(a))\n\nif __name__   \"\"__main__\"\":\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $0$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We're creating a 3x3 matrix with cosine values of 1, 2, 3, 4, 5, 6, 7, 8, 9.\\newline\n2. We're printing the determinant of the matrix. \\\\\n\\hline\nGPT-3 response & The determinant of the matrix is -1.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Precalculus, Question 10: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Precalculus\\\\\n\\hline\nOriginal question & Find the area of the triangle with vertices $(-1,4),$ $(7,0),$ and $(11,5).$\\\\\n\\hline\nCodex input & Find the area of the triangle with vertices (-1,4), (7,0), and (11,5).\\\\\n\\hline\nCodex code & \\begin{lstlisting}\ndef area_of_triangle(x1, y1, x2, y2, x3, y3):\n   return abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n\nprint(area_of_triangle(-1, 4, 7, 0, 11, 5))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $28$ \\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. We define a function called area\\_of\\_triangle that takes in 6 parameters.\\newline\n2. We return the absolute value of the area of the triangle.\\newline\n3. We call the function with the coordinates of the triangle. \\\\\n\\hline\nGPT-3 response & The area of the triangle is 36.\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\n\\end{longtable}\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Precalculus, Question 11: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Precalculus\\\\\n\\hline\nOriginal question & Simplify $(1 + \\tan 20^\\circ)(1 + \\tan 25^\\circ).$\\\\\n\\hline\nCodex input & Simplify (1 + tan 20)(1 + tan 25). All angles are in degrees.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport math\n\ndef main():\n   print(\"\"This program simplifies (1 + tan 20)(1 + tan 25).\"\")\n   print(\"\"(1 + tan 20)(1 + tan 25) \"\", (1 + math.tan(math.radians(20))) * (1 + math.tan(math.radians(25))))\n\nmain()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $2$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation &\n1. It's printing the string \"\"This program simplifies (1 + tan 20)(1 + tan 25).\"\"\\newline\n2. It's printing the string \"\"(1 + tan 20)(1 + tan 25) \"\" and the result of the expression (1 + math.tan(math.radians(20))) * (1 + math.tan(math.radians(25)))\\newline\n3. It's calling the main() function\\\\\n\\hline\nGPT-3 response & 1 + tan 20)(1 + tan 25)   1 + tan 20 + tan 25 + tan 20 tan 25\\newline\n\n 1 + tan 20 + tan 25 + tan 45\\newline\n\n 1 + tan 20 + tan 25 + 1\\newline\n\n 2 + tan 20 + tan 25\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\n\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Precalculus, Question 12: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Precalculus\\\\\n\\hline\nOriginal question & The projection of [0; 3; z] onto [-3; 5; -1] is 12/35 * [-3; 5; -1]. Find z.\\\\\n\\hline\nCodex input & \\\\\n\\hline\nCodex code & \\begin{lstlisting}\n\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & \\\\\n\\hline\nSolution type & \\\\\n\\hline\nCodex code explanation & \\begin{lstlisting}\n\n\\end{lstlisting}\\\\\n\\hline\nGPT-3 response & z   -1\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Precalculus, Question 13: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Precalculus\\\\\n\\hline\nOriginal question & Let $l$, $m$, and $n$ be real numbers, and let $A$, $B$, $C$ be points such that the midpoint of $BC$ is $(l,0,0)$, the midpoint of $AC$ is $(0,m,0)$, and the midpoint of $AB$ is $(0,0,n)$. Find ($AB^2 + AC^2 + BC^2$)/($l^2 + m^2 + n^2$).\\\\\n\\hline\nCodex input & Same as original question \\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport numpy as np\n\ndef midpoint(A, B):\n   return (A + B) / 2\n\ndef distance(A, B):\n   return np.sqrt(np.sum((A - B)**2))\n\ndef main():\n   A   np.array([0, 0, 0])\n   B   np.array([1, 0, 0])\n   C   np.array([0, 1, 0])\n   l   midpoint(B, C)[0]\n   m   midpoint(A, C)[1]\n   n   midpoint(A, B)[2]\n   AB   distance(A, B)\n   AC   distance(A, C)\n   BC   distance(B, C)\n   print((AB**2 + AC**2 + BC**2) / (l**2 + m**2 + n**2))\n\nif __name__   '__main__':\n   main()\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $8$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation &\n1. We define a function called midpoint that takes two points and returns the midpoint of those two points.\\newline\n2. We define a function called distance that takes two points and returns the distance between those two points.\\newline\n3. We define the points A, B, and C.\\newline\n4. We find the midpoints of BC, AC, and AB.\\newline\n5. We find the distances AB, AC, and BC.\\newline\n6. We print the result.\\\\\n\\hline\nGPT-3 response & (AB\\^2 + AC\\^2 + BC\\^2)/(l\\^2 + m\\^2 + n\\^2)   (A-B)\\^2 + (A-C)\\^2 + (B-C)\\^2)/(l\\^2 + m\\^2 + n\\^2)   1/2\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Precalculus, Question 14: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Precalculus\\\\\n\\hline\nOriginal question & Evaluate $\\log_{10}(\\tan{1})+\\log_{10}(\\tan{2})+\\log_{10}(\\tan{3})+...+\\log_{10}(\\tan{88})+\\log_{10}(\\tan{89})$. All angles are in degrees.\\\\\n\\hline\nCodex input & Evaluate $\\log_{10}(\\tan{1})+\\log_{10}(\\tan{2})+\\log_{10}(\\tan{3})+...+\\log_{10}(\\tan{88})+\\log_{10}(\\tan{89})$. All angles are in degrees.\\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport math\n\nprint(sum(math.log10(math.tan(math.radians(i))) for i in range(1, 90)))\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & $0$\\\\\n\\hline\nSolution type & Automatic Zero-Shot\\\\\n\\hline\nCodex code explanation & \n1. math.log10(x) returns the base-10 logarithm of x.\\newline\n2. math.tan(x) returns the tangent of x radians.\\newline\n3. math.radians(x) converts x from degrees to radians.\\newline\n4. math.tan(math.radians(x)) returns the tangent of x degrees.\\newline\n5. math.log10(math.tan(math.radians(x))) returns the base-10 logarithm of the tangent of x degrees.\\newline\n6. sum(math.log10(math.tan(math.radians(i))) for i in range(1, 90)) returns the sum of the base-10 logarithms of the tangents of the angles from 1 to 89 degrees.\\\\\n\\hline\nGPT-3 response & $\\log_{10}(\\tan{1})+\\log_{10}(\\tan{2})+\\log_{10}(\\tan{3})+...+\\log_{10}(\\tan{88})+\\log_{10}(\\tan{89})$\\newline\n$\\log_{10}(\\tan{1}*\\tan{2}*\\tan{3}*...*\\tan{88}*\\tan{89})$\\newline\n$\\log_{10}(-1)$\\newline\n$-1$\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}\n\n\\begin{longtable}{|p{3.5cm}|p{11.5cm}|}\n\\caption{MATH Precalculus, Question 15: Original question, Codex input and code and code explanation, Program solution, Solution type, GPT-3 response and evaluation}\\\\\n\n\\hline\nTopic & Precalculus\\\\\n\\hline\nOriginal question & In rectangle ABCD, P is a point on side BC such that BP   16 and CP   8. If tan <APD   3, write a program that finds AB.\\\\\n\\hline\nCodex input & Write a program to solve the equation 576*x**2   9/10 * (256+x**2)*(64+x**2) \\\\\n\\hline\nCodex code & \\begin{lstlisting}\nimport sympy\nx   sympy.symbols('x')\nsolutions   sympy.solve(576*x**2 - 9/10 * (256+x**2)*(64+x**2), x)\nprint(solutions)\n\\end{lstlisting}\\\\\n\\hline\nProgram solution & 16\\\\\n\\hline\nSolution type & Manual\\\\\n\\hline\nCodex code explanation &\n1. sympy.symbols('x') creates a symbolic variable x. \\newline\n2. sympy.solve(576*x**2 - 9/10 * (256+x**2)*(64+x**2), x) solves the equation \n   for x. \\newline\n3. print(solutions) prints the solutions.\n\\\\\n\\hline\nGPT-3 response & AB   24\\\\\n\\hline\nGPT-3 evaluation & Incorrect\\\\\n\\hline\n\\end{longtable}",
  "title": "A Neural Network Solves, Explains, and Generates University Math Problems by Program Synthesis and Few-Shot Learning at Human Level"
}
