{
  "authors": [
    "Iddo Drori",
    "Nakul Verma"
  ],
  "date_published": "2021-11-16",
  "raw_tex": "\\section{Introduction to Linear Algebra: MIT 18.06}\n\\label{sec:appendix18.06}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nVectors and Linear Combinations (1.1, Q3)\n\\\\\n\\hline\nOriginal question & \nIf v+w   (5,1) and v-w(1,5), compute and draw the vectors v and w\n\\\\\n\\hline\nCodex input &\nv and w are 1 by2 vectors such that v + w   (5,1) and v - w   (1,5)\nWrite a program to find the vectors v and w\nDraw the vectors v and w\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\n# Solution\n# \n# We can solve this problem by using the following steps:\n# \n# 1. We know that $v + w   (5,1)$ and $v - w   (1,5)$\n# 2. We can subtract $v - w$ from both sides to get $v + w - (v-w)   (5,1) + (1,5) - ((1,5)-(5,1))$\n# 3. This gives us $2v   (6,6)$ and hence $v   (3,3)$\n# 4. Similarly we can find out that $w   (-2,-2)$\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.quiver(0, 0, v[0], v[1], angles'xy', scale_units'xy', scale1)\nplt.quiver(0, 0, w[0], w[1], angles'xy', scale_units'xy', scale1)\n\nplt.xlim(-10, 10)\nplt.ylim(-10, 10)\n\\end{lstlisting}\\\\\n\\hline\nSolution & \nThis problem gives the diagonals v + w and v - w of the parallelogram and asks for\nthe sides: The opposite of Problem 2. In this example v   (3, 3) and w   (2, -2).\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 1: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nVectors and Linear Combinations (1.1, Q11)\n\\\\\n\\hline\nOriginal question & \nFour of the eight corners of a unit cube are (0,0,0), (1,0,0), (0,1,0), (0,0,1). Find the coordinates of the center point of the cube.\n\\\\\n\\hline\nCodex input & \nFour of the eight corners of a unit cube are (0,0,0), (1,0,0), (0,1,0), (0,0,1). Find the coordinates of the center point of the cube.\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\ndef find_center(x,y,z):\n   return (x+0.5, y+0.5, z+0.5)\n\nprint(find_center(0,0,0))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n(0.5, 0.5, 0.5)\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 2: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nVectors and Linear Algebra (1.2 Q28)\n\\\\\n\\hline\nOriginal question & \nIf v   (1,2) draw all vectors w   (x,y) in the xy plane with dot(v,w)   x+ 2*y   5.\nWhy do those w's lie along a line?\nWhich is the shortest w?\n\\\\\n\\hline\nCodex input & \nIf v   (1,2) draw all vectors w   (x,y) in the xy plane with dot(v,w)   x+ 2*y   5.\nWhy do those w's lie along a line?\nWhich is the shortest w?\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx   np.linspace(-10, 10, 100)\ny   5 - x/2\nplt.plot(x, y)\nplt.show()\n\nplt.arrow(0, 0, 1, 2) # (x1, y1), (x2, y2) \nplt.show()\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n(1, 2)\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 3: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Vectors and Linear Algebra (1.3 Q1)\\\\\n\\hline\nOriginal question & \nFind the linear combination 3s1 + 4s2 + 5s3   b. Then write b as a matrix-vector multiplication Sx, with 3, 4, 5 in x. Compute the three dot products (row of S) x:\n$s_1$   [1;1;1], $s_2$   [0;1;1], $s_3$   [0;0;1]\n\\\\\n\\hline\nCodex input & \nWrite a function to calculate the linear combination 3*s1 + 4*s2 + 5*s3. Let s\\_1   [1;1;1], s\\_2   [0;1;1], s\\_3   [0;0;1]\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\ndef linear_combination(s1, s2, s3):\n   return 3*s1 + 4*s2 + 5*s3\n\ns1   np.array([1,1,1])\ns2   np.array([0,1,1])\ns3   np.array([0,0,1])\n\nprint(linear_combination(s1, s2, s3))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n3s1 + 4s2 + 5s3   (3, 7, 12). The same vector b comes from S times x   (3, 4, 5).\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 4: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Vectors and Linear Algebra (1.3, Q4)\\\\\n\\hline\nOriginal question & \nFind a combination x\\_1*w\\_1+x\\_2*w\\_2+x\\_3*w\\_3 that gives the zero vector with x\\_1   1\nw\\_1 is the vector (1;2;3)\nw\\_2 is the vector (4;5;6)\nw\\_3 is the vector (7;8;9)\n\\\\\n\\hline\nCodex input & \nWrite a program to find a combination y and z such that multiplying np.array([1, y, z]).T with np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])   0. Use sympy and numpy.\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport sympy as sp\nimport numpy as np\n\ny   sp.Symbol('y')\nz   sp.Symbol('z')\n\neq   np.array([1, y, z]).T @ np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nsp.solve(eq, [y, z])\n\n\\end{lstlisting}\\\\\n\\hline\nSolution & \nThe combination 0w1 + 0w2 + 0w3 always gives the zero vector, but this problem\nlooks for other zero combinations (then the vectors are dependent, they lie in a plane):\nw2   (w1 + w3)/2 so one combination that gives zero is w1 - 2w2 + w3   0.\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 5: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Vectors and Linear Equations (2.1, Q21)\\\\\n\\hline\nOriginal question & \nWhat 2 by 2 matrix R rotates every vector through 45 degrees? Example: the vector [1,0] goes to [sqrt(2)/2, sqrt(2)/2].\n\\\\\n\\hline\nCodex input & \nWhat 2 by 2 matrix R rotates every vector through 45 degrees? Example: the vector [1,0] goes to [sqrt(2)/2, sqrt(2)/2].\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\ndef rotate_45(vector):\n   return np.matmul(np.array([[np.sqrt(2)/2, np.sqrt(2)/2], [-np.sqrt(2)/2, np.sqrt(2)/2]]), vector)\n\nprint(rotate_45([1,0]))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \nR $(1/2)[\\sqrt{2},-\\sqrt{2};\\sqrt{2},\\sqrt{2}]$\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 6: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nElimination Using Matrices (2.3, Q17)\n\\\\\n\\hline\nOriginal question & \nThe paraboloa ya+bx+cx\\^{}2 goes through the points (x,y)   (1,4) and (2,8) and (3,14). Find and solve a matrix equation for the unknowns (a,b,c)\n\\\\\n\\hline\nCodex input & \nThe paraboloa y   a + b*x + c*x\\^{}2 goes through the points (x1,y1)   (1,4) and (x2,y2)   (2,8) and (x3,y3)   (3,14).\ny1   a + b*x1 + c*x1\\^{}2\ny2   a + b*x2 + c*x2\\^{}2\ny3   a + b*x3 + c*x3\\^{}2\nSolve for (a, b, c)\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\nx1   1\nx2   2\nx3   3\ny1   4\ny2   8\ny3   14\n\nA   np.array([[1, x1, x1**2], [1, x2, x2**2], [1, x3, x3**2]])\nb   np.array([y1, y2, y3])\n\nprint(np.linalg.solve(A, b))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \na   2, b   1, and c   1. \n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 7: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nRules for Matrix Operations (2.4, Q23b)\n\\\\\n\\hline\nOriginal question & \nFind a matrix that has A\\^{}2 does not equal 0 but A\\^{}3   0\n\\\\\n\\hline\nCodex input & \nLoop through random integer matrices with 0 until matrix A is found.\nA must satisfy conditions: A**2 not equals np.zeros((2,2)) and A*3 equals np.zeros((2,2)).\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\ndef find_matrix_A(n):\n   \"\"\"\"\"\"\n   Find matrix A with nxn dimensions.\n   \"\"\"\"\"\"\n   while True:\n   A   np.random.randint(0,10,(n,n))\n   if np.array_equal(A**2, np.zeros((n,n)))   False and np.array_equal(A*3, np.zeros((n,n)))   True:\n   return A\n\ndef main():\n   \"\"\"\"\"\"\n   Main function.\n   \"\"\"\"\"\"\n   n   int(input(\"\"Enter n: \"\"))\n   A   find_matrix_A(n)\n   print(A)\n\nif __name__   \"\"__main__\"\":\n   main()\n\\end{lstlisting}\\\\\n\\hline\nSolution & \nA \n[\n0,1;\n0,0\n]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 8: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Rules for Matrix Operations (2.5, Q1)\\\\\n\\hline\nOriginal question & \nFind the inverses (directly or from the 2 by 2 formula) of A, B, C : A   [0,4;3,0], B   [2,0;4,2], and C   [3,4;5,7].\n\\\\\n\\hline\nCodex input & \nFind the inverses of the matrices A, B, C : A   [0,4;3,0], B   [2,0;4,2], and C   [3,4;5,7].\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\nA   np.array([[0,4],[3,0]])\nB   np.array([[2,0],[4,2]])\nC   np.array([[3,4],[5,7]])\n\nprint(np.linalg.inv(A))\nprint(np.linalg.inv(B))\nprint(np.linalg.inv(C))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \ninv(A) [0, 1/4;1/3,0], inv(B) \n[1/2,0;-1,1/2],\nand inv(C) \n[7, -4;-5, 3].\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 9: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nRules for Matrix Operations (2.5, Q3)\n\\\\\n\\hline\nOriginal question & \nSolve for the first column (x, y) and second column (t, z) of A\\^{}-1: [10,20;20,50]@[x;y]   [1;0] and [10,20;20,50]@[t;z]   [0;1].\n\\\\\n\\hline\nCodex input &\nSolve for the first column (x, y) and second column (t, z) of A\\^{}-1: [10,20;20,50]@[x;y]   [1;0] and [10,20;20,50]@[t;z]   [0;1].\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\nA   np.array([[10,20],[20,50]])\nb   np.array([[1],[0]])\n\nx   np.linalg.inv(A)@b\n\nprint(x)\n\nA   np.array([[10,20],[20,50]])\nb   np.array([[0],[1]])\n\nx   np.linalg.inv(A)@b\n\nprint(x)\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n[x;y] \n[0.5;-0.2]\nand [t;z][-0.2;0.1]\nso inv(A) \n1/10*[5, -2;-2, 1]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 10: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nInverse Matrices (2.5, Q11b)\n\\\\\n\\hline\nOriginal question & \nFind singular matrices A and B such that A+B is invertible.\n\\\\\n\\hline\nCodex input & \nFind singular matrices A and B such that A+B is invertible.\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\nimport numpy.linalg as la\n\ndef find_singular_matrices(n):\n   \"\"\"\"\"\"\n   Find two matrices A and B such that A+B is invertible.\n   \"\"\"\"\"\"\n   A   np.random.rand(n,n)\n   B   np.random.rand(n,n)\n   while la.det(A+B)   0:\n   A   np.random.rand(n,n)\n   B   np.random.rand(n,n)\n   return A,B\n\ndef main():\n   \"\"\"\"\"\"\n   Test the find_singular_matrices function.\n   \"\"\"\"\"\"\n   A,B   find_singular_matrices(3)\n   print(A)\n   print(B)\n   print(A+B)\n\nif __name__   \"\"__main__\"\":\n   main()\n\\end{lstlisting}\\\\\n\\hline\nSolution &\nA [1, 0;0, 0]\nand B [0, 0;0, 1]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 11: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nNullspaces (3.2, Q20)\n\\\\\n\\hline\nOriginal question & \nConstruct a 2 by 2 matrix whose nullspace equals its column space. This is possible.\n\\\\\n\\hline\nCodex input & \nWrite a function that checks the nullspace of a matrix. Write a function that checks the column space of a matrix. Write a function to iteratively search for a 2 by 2 matrix np.array([[a, b], [c, d]]) and returns the values of the matrix whose nullspace equals its column space.\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\ndef check_nullspace(matrix):\n   '''\n   Checks the nullspace of a matrix.\n   '''\n   return np.linalg.matrix_rank(matrix)\n\ndef check_columnspace(matrix):\n   '''\n   Checks the column space of a matrix.\n   '''\n   return np.linalg.matrix_rank(matrix.T)\n\ndef iterative_search(matrix):\n   '''\n   Iteratively searches for a 2 by 2 matrix np.array([[a, b], [c, d]]) and returns the values of the matrix whose nullspace equals its column space.\n   '''\n   for a in range(1, 10):\n   for b in range(1, 10):\n   for c in range(1, 10):\n   for d in range(1, 10):\n   if check_nullspace(np.array([[a, b], [c, d]]))   check_columnspace(np.array([[a, b], [c, d]])):\n   return np.array([[a, b], [c, d]])\n\nprint(iterative_search(np.array([[1, 2], [3, 4]])))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \nA   [0,1; 0 0] \n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 12: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nIndependent, Basis and Dimension (3.4, Q1)\n\\\\\n\\hline\nOriginal question & \nShow that v1, v2, v3 are independent but v1,v2,v3,v4 are dependent. v1   [1;0;0], v2   [1;1;0], v3   [1;1;1], v4   [2;3;4]\n\\\\\n\\hline\nCodex input & \nLet v1   [1;0;0], v2   [1;1;0], v3   [1;1;1], v4   [2;3;4]. \nWrite a function to show that v1, v2, and v3 are linearly independent.\nIn linear algebra write a function that checks if vectors v1, v2, v3, v4 are independent.\nv1   (1,0,0), v2   (1,1,0), v3   (1,1,1), v4   (2,3,4)\nUse arrays for the vectors v1, v2, v3, v4 are check if they are independent\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\ndef lin_indep(v1, v2, v3):\n   return np.linalg.det(np.array([v1, v2, v3])) ! 0\n\nv1   np.array([1, 0, 0])\nv2   np.array([1, 1, 0])\nv3   np.array([1, 1, 1])\nv4   np.array([2, 3, 4])\n\nprint(lin_indep(v1, v2, v3))\n\ndef is_independent(v1, v2, v3, v4):\n   return not any([v1.dot(v2), v1.dot(v3), v1.dot(v4), v2.dot(v3), v2.dot(v4), v3.dot(v4)])\n\nv1   np.array([1,0,0])\nv2   np.array([1,1,0])\nv3   np.array([1,1,1])\nv4   np.array([2,3,4])\n\nis_independent(v1, v2, v3, v4)\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n[1, 1, 1;0, 1, 1;0, 0, 1]*[c1;c2;c3]   0 gives c3   c2   c1   0. So those 3 column vectors are\nindependent. But [1 1 1 2;0 1 1 3;0 0 1 4]*c   [0;0;0] is solved by c   (1,1,-4,1) then v1 + v2 - 4v3 + v4   0 (dependent)\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 13: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nOrthogonality of the Four Subspaces (4.1, Q25)\\\\\n\\hline\nOriginal question & \nFind A'A if the columns of A are unit vectors, all mutually perpendicular.\n\\\\\n\\hline\nCodex input & \nFind A'A if the columns of A are unit vectors, all mutually perpendicular.\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\ndef transpose_multiply(A):\n   return np.dot(A.T, A)\n\ndef main():\n   A   np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n   print(transpose_multiply(A))\n\nif __name__   \"\"__main__\"\":\n   main()\n\\end{lstlisting}\\\\\n\\hline\nSolution & \nI\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 14: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Projections (4.2, Q2b)\\\\\n\\hline\nOriginal question & \nDraw the projection of b onto a: b[1;1] and a[1;-1].\n\\\\\n\\hline\nCodex input & \nThe vector b is [1;1]\nThe vector a is [1;-1]\nPlot the projection of b onto a\n\nPlot the projection with circle marker\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\n\"\"\"\"\"\"\nThe vector b is [1;1]\nThe vector a is [1;-1]\nPlot the projection of b onto a\n\"\"\"\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\na   np.array([1, -1])\nb   np.array([1, 1])\n\n# Projection of b onto a\nproj_b_a   (np.dot(b, a) / np.dot(a, a)) * a\n\n# Plot\nplt.plot([0, a[0]], [0, a[1]], 'r', label'a')\nplt.plot([0, b[0]], [0, b[1]], 'g', label'b')\nplt.plot([0, proj_b_a[0]], [0, proj_b_a[1]], 'b', label'projection of b onto a')\nplt.axis('equal')\nplt.legend()\nplt.grid()\nplt.show()\n\n\"\"\"\"\"\"\nPlot the projection with circle marker\n\"\"\"\"\"\"\n\n# Plot\nplt.plot([0, a[0]], [0, a[1]], 'r', label'a')\nplt.plot([0, b[0]], [0, b[1]], 'g', label'b')\nplt.plot([0, proj_b_a[0]], [0, proj_b_a[1]], 'bo', label'projection of b onto a')\nplt.axis('equal')\nplt.legend()\nplt.grid()\nplt.show()\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n(0,0) with a corresponding plot.\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 15: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nProjections (4.2, Q16)\n\\\\\n\\hline\nOriginal question & \nWhat linear combination of (1,2,-1) and (1,0,1) is closest to b(2,1,1)?\n\\\\\n\\hline\nCodex input & \nUse scipy to optimize for x and y such that np.array([1,2,-1])*x+np.array([1,0,1])*y is closest to bnp.array([2,1,1]).\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef objective(x):\n   return np.sum(np.square(np.array([1,2,-1])*x[0]+\n   np.array([1,0,1])*x[1]-np.array([2,1,1])))\n\nx0   np.array([0,0])\n\nbnds   ((0,None),(0,None))\n\nres   minimize(objective,x0,method'SLSQP',boundsbnds)\n\nprint(res.x)\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n(2, 1, 1)\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 16: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic &\nLeast Squares Approximations (4.3, Q22)\n\\\\\n\\hline\nOriginal question & \nFind the best line C+Dt to fit b4,3,-1,0,0 at times t-2,-1,0,1,2.\n\\\\\n\\hline\nCodex input & \nFind the best fit line for xnp.array([-2,-1,0,1,2]) and ynp.array([4,3,-1,0,0])\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx   np.array([-2,-1,0,1,2])\ny   np.array([4,3,-1,0,0])\n\nplt.plot(x,y,'ro')\nplt.show()\n\n# y   mx + c\n# m   (mean(x)*mean(y) - mean(x*y)) / (mean(x)^2 - mean(x^2))\n# c   mean(y) - m*mean(x)\n\nm   (np.mean(x)*np.mean(y) - np.mean(x*y)) / (np.mean(x)**2 - np.mean(x**2))\nc   np.mean(y) - m*np.mean(x)\n\nprint(m,c)\n\ny_pred   m*x + c\n\nplt.plot(x,y,'ro')\nplt.plot(x,y_pred)\nplt.show()\n\\end{lstlisting}\\\\\n\\hline\nSolution & \nThe best line is b   1 - t. \n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 17: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nProperties of Determinents (5.1, Q1)\n\\\\\n\\hline\nOriginal question & \nIf a 4 by 4 matrix has det(A)1/2, find det(2A), det(-1A), det(A\\^{}2) and det(A\\^{}-1).\n\\\\\n\\hline\nCodex input & \nThe determinant of a 4 by 4 matrix A is 0.5. What is det(2A), det(-1A), det(A\\^{}2), and det(A\\^{}-1)? Write a function to calculate the determinant of 2A is 16 times the determinant of A. Write a function to calculate the determinant of -1A is -1 raised to the fourth power times the determinant of A. Write a function to calculate the determinant of A\\^{}2 is half the determinant of A. Write a function to calculate the determinant of A\\^{}-1 is 1/the determinant of A.\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\ndef det2A(A):\n   return 16*det(A)\n\ndef detMinus1A(A):\n   return -1**4*det(A)\n\ndef detA2(A):\n   return det(A)/2\n\ndef detAinv(A):\n   return 1/det(A)\n\\end{lstlisting}\\\\\n\\hline\nSolution & \ndet(2A) $2^4$*det(A)   8,\ndet(-A)   $(-1)^4$det(A)   0.5,\ndet($A^2$)   0.25,\ndet($A^-1$)   2\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 18: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nCramer's Rule, Inverses and Volumes (5.3, Q16a)\n\\\\\n\\hline\nOriginal question & \nFind the area of the parallelogram with edges v(3,2) and w(1,4).\n\\\\\n\\hline\nCodex input & \nFind the area of the parallelogram with edges v(3,2) and w(1,4).\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\n# Solution\n\nv   (3, 2)\nw   (1, 4)\narea   abs(v[0] * w[1] - v[1] * w[0])\nprint(area)\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n10 \n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 19: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nIntroduction to Eigenvalues (6.1, Q5)\n\\\\\n\\hline\nOriginal question & \nFind the eigenvalues of A and B (easy for triangular matrices) and A + B: A   [3,0;1,1], B   [1,1;0,3], A+B   [4,1;1,4].\n\\\\\n\\hline\nCodex input &\nFind the eigenvalues of A and B (easy for triangular matrices) and A + B: A   [3,0;1,1], B   [1,1;0,3], A+B   [4,1;1,4].\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\nA   np.array([[3,0],[1,1]])\nB   np.array([[1,1],[0,3]])\n\nprint(np.linalg.eigvals(A))\nprint(np.linalg.eigvals(B))\nprint(np.linalg.eigvals(A+B))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \nA and B have eigenvalues 1 and 3\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 20: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nIntroduction to Eigenvalues (6.1, Q10)\n\\\\\n\\hline\nOriginal question & \nFind the eigenvalues and eigenvectors for both of these Markov matrices A and Ainf. A   [.6, .2; .4, .8]. Ainf   [1/3, 1/3; 2/3, 2/3].\n\\\\\n\\hline\nCodex input & \nFind the eigenvalues and eigenvectors for both of these Markov matrices A and Ainf. A   np.array([[.6, .2], [.4, .8]]). Ainf   np.array([[1/3, 1/3], [2/3, 2/3]]).\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nA   np.array([[.6, .2], [.4, .8]])\nA_inf   np.array([[1/3, 1/3], [2/3, 2/3]])\n\neig_vals, eig_vecs   np.linalg.eig(A)\neig_vals_inf, eig_vecs_inf   np.linalg.eig(A_inf)\n\nprint(eig_vals)\nprint(eig_vecs)\nprint(eig_vals_inf)\nprint(eig_vecs_inf)\n\\end{lstlisting}\\\\\n\\hline\nSolution &\nA -- Eigenvalues: 1 and 0.4, with eigenvectors (1, 2) and\nx2   (1, -1). Ainf -- Eigenvalues: 1 and $(0.4)^100$, same eigenvectors.\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 21: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nSymmetric Matrices (6.4, Q9a)\n\\\\\n\\hline\nOriginal question & \nFind a symmetric matrix [1,b;b,1] that has a negative eigenvalue.\n\\\\\n\\hline\nCodex input & \nA   [1,b;b,1] is a symmetric matrix\nFind a value of b such that any one eigenvalue of A is negative.\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\n\"\"\"\"\"\"\nA   [[1,b],[b,1]] is a symmetric matrix\nFind a value of b such that any one eigenvalue of A is negative.\n\"\"\"\"\"\"\n\nimport numpy as np\nimport scipy.linalg as la\n\ndef find_b(n):\n   \"\"\"\"\"\"\n   Find a value of b such that any one eigenvalue of A is negative.\n   \"\"\"\"\"\"\n   A   np.array([[1,b],[b,1]])\n   eigvals   la.eigvals(A)\n   if any(eigvals < 0):\n   return b\n   else:\n   return find_b(n+1)\n\nb   find_b(1)\nprint(b)\n\\end{lstlisting}\\\\\n\\hline\nSolution &\nb2\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 22: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nPositive Definite Matrices (6.5, Q3)\n\\\\\n\\hline\nOriginal question & \nFor which numbers b is the following matrices positive definite? S[1,b;b,9], S[2,4;4,c], S[c,b;b,c].\n\\\\\n\\hline\nCodex input & \nFor which numbers b is the following matrices positive definite? S[1,b;b,9], S[2,4;4,c], S[c,b;b,c].\nWrite a program to search a value x and y for all three matrices to be positive definite: np.array([[1,x],[x,9]]), np.array([[2,4],[4,y]]), and np.array([[y,x],[x,y]]).\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\ndef is_pos_def(x):\n   return np.all(np.linalg.eigvals(x) > 0)\n\ndef main():\n   b   np.arange(1,10)\n   c   np.arange(1,10)\n   for i in b:\n   for j in c:\n   S1   np.array([[1,i],[i,9]])\n   S2   np.array([[2,4],[4,j]])\n   S3   np.array([[j,i],[i,j]])\n   if is_pos_def(S1) and is_pos_def(S2) and is_pos_def(S3):\n   print('S1   {}, S2   {}, S3   {}'.format(S1,S2,S3))\n\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n(a) -3 < b < 3, (b) c > 8, (c) c > b\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 23: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nImage processing by Linear Algebra (7.1, Q6)\n\\\\\n\\hline\nOriginal question & \nFind the eigenvalues and the singular values of this 2 by 2 matrix A[2,1;4,2]. The eigenvectors (1,2) and (1,-2) of A are not orthogonal.\n\\\\\n\\hline\nCodex input & \nWrite a function to find the eigenvalues and the singular values of this 2 by 2 matrix A[2,1;4,2]. The eigenvectors (1,2) and (1,-2) of A are not orthogonal.\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\nA   np.array([[2,1],[4,2]])\n\neigenvalues, eigenvectors   np.linalg.eig(A)\n\nprint(eigenvalues)\nprint(eigenvectors)\n\nsingular_values   np.linalg.svd(A)\n\nprint(singular_values)\n\\end{lstlisting}\\\\\n\\hline\nSolution & \nEigenvalues are 4 and 0\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 24: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nPrincipal Component Analysis (7.3,Q1)\n\\\\\n\\hline\nOriginal question &\nSuppose A0 holds these 2 measurements of 5 samples: A0   [5,4,3,2,1;-1,1,0,1,-1]. Find the average of each row and subtract it to produce the centered matrix A. Compute the sample covariance matrix SAA'/(n-1) and find its eigenvalues. What line through the origin is closest to the 5 samples in the columns of A?\n\\\\\n\\hline\nCodex input & \nSuppose A0 holds these 2 measurements of 5 samples: A0   [5,4,3,2,1;-1,1,0,1,-1]. Find the average of each row and subtract it to produce the centered matrix A. Compute the sample covariance matrix SAA'/(n-1) and find its eigenvalues. What line through the origin is closest to the 5 samples in the columns of A?\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\n\"\"\"\"\"\"\nSuppose A0 holds these 2 measurements of 5 samples: A0   [5,4,3,2,1;-1,1,0,1,-1].\nFind the average of each row and subtract it to produce the centered matrix A. \nCompute the sample covariance matrix SAA^T/(n-1) and find its eigenvalues.\n\"\"\"\"\"\"\n\nimport numpy as np\n\nA0   np.array([[5,4,3,2,1],[-1,1,0,1,-1]])\nA   A0 - np.mean(A0, axis1).reshape(2,1)\nS   np.dot(A, A.T) / (5-1)\neigvals, eigvecs   np.linalg.eig(S)\n\nprint(eigvals)\nprint(eigvecs)\n\n\"\"\"\"\"\"\nWhat line through the origin is closest to the 5 samples in the columns of A?\n\"\"\"\"\"\"\n\nimport numpy as np\n\nA0   np.array([[5,4,3,2,1],[-1,1,0,1,-1]])\nA   A0 - np.mean(A0, axis1).reshape(2,1)\nS   np.dot(A, A.T) / (5-1)\neigvals, eigvecs   np.linalg.eig(S)\n\nprint(eigvecs[:,0])\n\n\\end{lstlisting}\\\\\n\\hline\nSolution & \nThe vertical line passing through the origin is closest to the five datapoints.\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 25: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nThe Idea of a Linear Transformation (8.1, Q12)\n\\\\\n\\hline\nOriginal question & \nSuppose a linear T transforms (1,1) to (2,2) and (2,0) to (0,0). Find T(v), when v[2,2], v(3,1), v(-1,1), v(a,b).\n\\\\\n\\hline\nCodex input & \nUse a while True loop to find a random matrix M such that M*np.array([[1,1],[2,2]])   np.array([[2,2],[0,0]]).\nFind M*np.array([2,2]).\nFind M*np.array([3,1]).\nFind M*np.array([-1,1]).\nUse Sympy to find Find M*np.array([a,b]).\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\nimport sympy as sp\n\nwhile True:\n   M   np.random.randint(1,10,(2,2))\n   if np.array_equal(M.dot(np.array([[1,1],[2,2]])),\n   np.array([[2,2],[0,0]])):\n   print(M)\n   print(M.dot(np.array([2,2])))\n   print(M.dot(np.array([3,1])))\n   print(M.dot(np.array([-1,1])))\n   a,b   sp.symbols('a b')\n   print(M.dot(np.array([a,b])))\n   break\n\\end{lstlisting}\\\\\n\\hline\nSolution & \nT(v)   (4, 4); (2, 2); (2, 2); if v   (a, b)   b(1, 1) + a-b\n2\n(2, 0) then T(v)   b(2, 2) +\n(0, 0)\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 26: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nLinear Algebra in Probability and Statistics (12.1, Q2)\\\\\n\\hline\nOriginal question & \nWe know: 1/3 of all integers are divisible by 3 and 1/7 of integers are divisible by 7. What fraction of integers will be divisible by 3 or 7 or both ?\n\\\\\n\\hline\nCodex input & \nWe know: 1/3 of all integers are divisible by 3 and 1/7 of integers are divisible by 7. Write a program to calculate the fraction of integers will be divisible by 3 or 7 or both ?\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\n# Solution:\n\n# import fractions module\nimport fractions\n\n# define a function to calculate the fraction of integers divisible by 3 or 7 or both\ndef divisible_by_3_or_7():\n   # calculate the fraction of integers divisible by 3 or 7 or both\n   return fractions.Fraction(1, 3) + fractions.Fraction(1, 7) - fractions.Fraction(1, 21)\n\n# print the result\nprint(divisible_by_3_or_7())\n\n\\end{lstlisting}\\\\\n\\hline\nSolution & \nIf we add 1/3 to 1/7\n(fraction of integers divisible by 3 plus fraction divisible by 7) we\nhave double counted the integers divisible by both 3 and 7. This is a fraction 1/21 of all\nintegers (because these double counted numbers are multiples of 21). So the fraction\ndivisible by 3 or 7 or both is\n1/3+1/7-1/217/21+3/21-1/219/213/7\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 27: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nLinear Algebra in Probability and Statistics (12.1, Q4)\\\\\n\\hline\nOriginal question & \nSample again from 1 to 1000 but look at the last digit of the sample squared. That square could end with x   0, 1, 4, 5, 6, or 9. What are the probabilities p0, p1, p4, p5, p6, p9? \n\\\\\n\\hline\nCodex input & \nSuppose you sample from the numbers 1 to 1000 with equal probabilities 1/1000 and then square the number. What are the probabilities p0 to p9 that the last digit of your sample is 0, . . . , 9?\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\ndef prob_last_digit(n):\n   '''\n   n: number of samples\n   '''\n   # generate n samples\n   samples   np.random.randint(1, 1000, sizen)\n   # square the samples\n   samples   np.power(samples, 2)\n   # get the last digit of each sample\n   samples   samples   10\n   # count the number of times each digit appears\n   counts   np.bincount(samples)\n   # normalize the counts\n   counts   counts / n\n   return counts\n\n# print the probabilities\nprint(prob_last_digit(1000000))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \nFor numbers ending in 0, 1, 2, . . . , 9 the squares end in x   0, 1, 4, 9, 6, 5, 6, 9, 4, 1. So\nthe probabilities of x   0 and 5 are p   1/10 and the probabilities of x   1, 4, 6, 9 are p   1/5\nThe mean is m   $\\sum p_i x_i$ 0/0+5/10+(1/5)*(1 + 4 + 6 + 9)   4.5   same as before\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 28: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nLinear Algebra in Probability and Statistics (12.1, Q8)\n\\\\\n\\hline\nOriginal question & \nIf all 24 samples from a population produce the same age x   20, what are the sample mean $\\mu$ and the sample variance S\\^{}2?\n\\\\\n\\hline\nCodex input & \nIf all 24 samples from a population produce the same age x   20, what are the sample mean $\\mu$ and the sample variance S\\^{}2?\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\n# mu   20\n# S^2   0\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n$\\mu   20$, $S^2   0$\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 29: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & \nLinear Algebra in Probability and Statistics (12.1, Q9)\n\\\\\n\\hline\nOriginal question & \nFind the average A\\_N of a million random 0-1 samples! What is X   (A\\_N - 1/2)/(2*sqrt(N))?\n\\\\\n\\hline\nCodex input & \nFind the average A\\_N of a million random 0-1 samples! What is X   (A\\_N - 1/2)/(2*sqrt(N))?\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef get_average(N):\n   '''\n   N: number of samples\n   '''\n   samples   np.random.randint(0,2,N)\n   return np.mean(samples)\n\ndef get_X(N):\n   '''\n   N: number of samples\n   '''\n   return (get_average(N) - 0.5)/(2*np.sqrt(N))\n\ndef get_X_list(N):\n   '''\n   N: number of samples\n   '''\n   X_list   []\n   for i in range(N):\n   X_list.append(get_X(N))\n   return X_list\n\ndef get_X_mean(N):\n   '''\n   N: number of samples\n   '''\n   return np.mean(get_X_list(N))\n\ndef get_X_std(N):\n   '''\n   N: number of samples\n   '''\n   return np.std(get_X_list(N))\n\n\nN   1000000\nprint(get_X_mean(N))\nprint(get_X_std(N))\n\nplt.hist(get_X_list(N), bins100)\nplt.show()\n\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n$X   (A_N - 1/2)/(2\\sqrt{N})\n(A_N - 1/2)/2000$\nfor N   one million.\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{MIT 18.06, Question 30: Original question, Codex input and output, and solution.}\n\\end{table}",
  "title": "Solving Linear Algebra by Program Synthesis"
}
