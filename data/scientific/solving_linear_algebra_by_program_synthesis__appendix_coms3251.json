{
  "authors": [
    "Iddo Drori",
    "Nakul Verma"
  ],
  "date_published": "2021-11-16",
  "raw_tex": "\\section{Computational Linear Algebra: Columbia University COMS3251}\n\\label{sec:appendixCOMS3251}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Matrix Algebra\\\\\n\\hline\nOriginal question & Compute the following expression: $([-1,0,2; 0,1,4]'*[-2;1]).([3,1;0,0;-2,-1]*([5,-3]+[-4,2])')$, where ' means transpose, * means matrix product, . means inner product.\\\\\n\\hline\nCodex input & Compute the following expression: $(\\textit{transpose}([-1,0,2; 0,1,4])*[-2;1]).([3,1;0,0;-2,-1]*\\textit{transpose}([5,-3]+[-4,2]))$\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\na   np.array([[-1,0,2],[0,1,4]])\nb   np.array([[-2],[1]])\nc   np.array([[3,1],[0,0],[-2,-1]])\nd   np.array([[5],[-3]])\ne   np.array([[-4],[2]])\n\nprint(np.dot(np.transpose(a),b))\nprint(np.dot(c,(d+e)))\n\\end{lstlisting}\\\\\n\\hline\nSolution & $4$\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 1: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Vectors, Lengths and Dot products \\\\\n\\hline\nOriginal question & \nCompute the squared $L_{2}$ norm of the vector $[1;-4;2;8;-1]$.\\\\\n\\hline\nCodex input & Original question\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\ndef compute_squared_L2_norm(vector):\n   return np.sum(np.square(vector))\n\nvector   np.array([1, -4, 2, 8, -1])\nprint(compute_squared_L2_norm(vector))\n\\end{lstlisting}\\\\\n\\hline\nSolution & $86$\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 2: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Solving Linear System of Equations\\\\\n\\hline\nOriginal question & Find a solution to the following system of four equations:\n   $4x - 2y   +   8z   +   w   3,\n   -8x + 10y +   3w   -2,\n   3x - 1y   +   10z   +   5w   -1,\n   2x + 2y   +   9z   -   2w   8$.\\\\\n\\hline\nCodex input & Write a program to find a solution to the system of four equations:\n   $4x - 2y   +   8z   +   w   3,\n   -8x + 10y +   3w   + 2   0,\n   3x - 1y   +   10z   +   5w   + 1   0,\n   2x + 2y   +   9z   -   2w   8$\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nfrom sympy import *\n\nx, y, z, w   symbols('x y z w')\n\neq1   4*x - 2*y + 8*z + w - 3\neq2   -8*x + 10*y + 3*w + 2\neq3   3*x - 1*y + 10*z + 5*w + 1\neq4   2*x + 2*y + 9*z - 2*w - 8\n\nsolve([eq1, eq2, eq3, eq4], [x, y, z, w])\n\\end{lstlisting}\\\\\n\\hline\nSolution & $x11/4, y97/44, z-4/11, w-15/22$\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 3: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Solving Linear System of Equations\\\\\n\\hline\nOriginal question & \nA mining company has two mines. One day's operation at mine A produces ore that contains 10 metric tons of copper and 120 kilograms of silver, while one day's operation at mine B produces ore containing 6 metric tons of copper and 140 kilograms of silver. Let a[10;120] and b[6;140]. Then a and b represent the daily output of mines A and B, respectively. Suppose that the mining company operates mine A for x days and mine B for y days.\nCalculate how many number of days each mine should operate in order to produce 72 tons of copper and 1340 kilograms of silver.\n\\\\\n\\hline\nCodex input & \nLet a[10;120] and b[6;140].\nWrite a program to compute positive x and y such that x*a + y*b   [72;1340]\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\na   np.array([10, 120])\nb   np.array([6, 140])\nc   np.array([72, 1340])\n\n# Solve for x and y in the equation x*a + y*b   c using\n# the numpy linear algebra function linalg.solve(a, b)\nx, y   np.linalg.solve(np.vstack((a, b)).T, c)\nprint(\"\"x: \"\", x)\nprint(\"\"y: \"\", y)\n\\end{lstlisting}\\\\\n\\hline\nSolution & x3, y7\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 4: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Vectors, Lengths and Dot products\\\\\n\\hline\nOriginal question & \nAt noon, the minute and the hour hands of an analog clock coincide. What is the angle (in degrees) subtended by the minute and hour hands of an analog clock at 1:15?\n\\\\\n\\hline\nCodex input & \nAt noon, the minute and the hour hands of an analog clock coincide.\nWrite a program to compute the angle (in degrees) subtended by the hands of an analog clock at 1:15\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\ndef clock_angle(hour, minute):\n   hour_angle   (hour * 30) + (minute * 0.5)\n   minute_angle   (minute * 6)\n   angle   abs(hour_angle - minute_angle)\n   return angle\n\nprint(clock_angle(1, 15))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n52.5\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 5: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Matrix Algebra\\\\\n\\hline\nOriginal question & \nFor what matrix R, the following matrix equation is satisfied?\nR*[1,0,0,0,0;1,1,0,0,0;1,2,1,0,0;1,3,3,1,0;1,4,6,4,1][1,0,0,0,0;0,1,0,0,0;\n0,1,1,0,0;0,1,2,1,0;0,1,3,3,1]\n\\\\\n\\hline\nCodex input & \nA   np.matrix([[1,0,0,0,0],[1,1,0,0,0],[1,2,1,0,0],[1,3,3,1,0],[1,4,6,4,1]])\nB   np.matrix([[1,0,0,0,0],[0,1,0,0,0],[0,1,1,0,0],[0,1,2,1,0],[0,1,3,3,1]])\n\"\"\"\"\"\"\nSolve X*A   B for X\n\"\"\"\"\"\"\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\n# Solve X*A   B for X\nX   np.linalg.solve(A,B)\nprint(X)\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n[1,0,0,0,0;-1,1,0,0,0;0,-1,1,0,0;0,0,-1,1,0;0,0,0,-1,1]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 6: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Rank, Basis and Dimension\\\\\n\\hline\nOriginal question & \nGiven a d-dimensional non-zero vector v, compute the rank of the matrix v*v'\n\\\\\n\\hline\nCodex input & \nGiven a d-dimensional non-zero vector v, write a program to compute the rank of the matrix v*transpose(v)\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\ndef rank(v):\n   return np.linalg.matrix_rank(np.dot(v, v.T))\n\\end{lstlisting}\\\\\n\\hline\nSolution & 1\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 7: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Four Fundamental Subspaces of a Matrix\\\\\n\\hline\nOriginal question & \nCompute the dimension of the null space of the following matrix. [1,2,0,-1;-2,-3,4,5;2,4,0,-2]\n\\\\\n\\hline\nCodex input & \nWrite a program that finds the finds the dimension the null space of the matrix [1,2,0,-1;-2,-3,4,5;2,4,0,-2]. Use scipy.linalg.null\\_space. Get the shape[1] of the null space.\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\nfrom scipy import linalg\n\nA   np.array([[1,2,0,-1],[-2,-3,4,5],[2,4,0,-2]])\n\nprint(linalg.null_space(A))\n\nprint(linalg.null_space(A).shape[1])\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n2\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 8: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Four Fundamental Subspaces of a Matrix\\\\\n\\hline\nOriginal question & \nCompute the dimension of the left null space of the following matrix. [1,2;2,4;3,6;4,8]\n\\\\\n\\hline\nCodex input & \nCompute the dimension of the left null space of the matrix [1,2;2,4;3,6;4,8]\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\nA   np.array([[1,2],[2,4],[3,6],[4,8]])\nprint(np.linalg.matrix_rank(A))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n3\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 9: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Orthogonality and Projections\\\\\n\\hline\nOriginal question &\nCompute the orthogonal projection of the vector [-6;4] onto the line spanned by the vector [3;2]\n\\\\\n\\hline\nCodex input & \nCompute the orthogonal projection of the vector [-6;4] onto the line spanned by the vector [3;2]\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\n# Define the two vectors\nv1   np.array([3, 2])\nv2   np.array([-6, 4])\n\n# Compute the orthogonal projection of v2 onto v1 and print it out\nproj   (np.dot(v1, v2) / np.dot(v1, v1)) * v1\nprint(proj)\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n[-30/13;-20/13]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 10: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Least Squares Approximation\\\\\n\\hline\nOriginal question & \nFind the least squares solution to the following matrix equation.\n[0,1;1,1;2,1]*x[6;0;0]\n\\\\\n\\hline\nCodex input & \nWrite a program that finds the least squares solution to the matrix equation [0,1;1,1;2,1]*x   [6;0;0]\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\nA   np.array([[0,1],[1,1],[2,1]])\nb   np.array([6,0,0])\nx   np.linalg.solve(A,b)\nprint(x)\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n[-3;5]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 11: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Eigenvectors and Eigenvalues\\\\\n\\hline\nOriginal question & \nCompute the eigenvalue associated with with the eigenvector [-684/721;228/721] of the matrix [-6,3;4,5]\n\\\\\n\\hline\nCodex input & \nWrite a program that finds the eigenvalue associated with with the eigenvector [-684/721;228/721] of the matrix [-6,3;4,5]\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\nA   np.array([[-6,3],[4,5]])\neigenvalues, eigenvectors   np.linalg.eig(A)\nprint(eigenvalues)\nprint(eigenvectors)\nprint(eigenvalues[0]*eigenvectors[:,0])\nprint(eigenvalues[1]*eigenvectors[:,1])\n\\end{lstlisting}\\\\\n\\hline\nSolution &\n-7\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 12: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Matrix Algebra\\\\\n\\hline\nOriginal question & \nCompute the inverse of the following matrix:\n[-1,-2;-2,0]\n\\\\\n\\hline\nCodex input & \nCompute the inverse of the following matrix:\n[-1,-2;-2,0]\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\nA   np.array([[-1,-2],[-2,0]])\nprint(np.linalg.inv(A))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n[0,-1/2;-1/2,1/4]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 13: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Determinants\\\\\n\\hline\nOriginal question & \nCompute the determinant of the following matrix:\n[3,-4,5;0,-1,-5;5,-4,3]\n\\\\\n\\hline\nCodex input & \nCompute the determinant of the following matrix:\n[3,-4,5;0,-1,-5;5,-4,3]\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\nmatrix   np.array([[3,-4,5],[0,-1,-5],[5,-4,3]])\nprint(np.linalg.det(matrix))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n56\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 14: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Special Matrices\\\\\n\\hline\nOriginal question & \nFind the real numbers a, b and c so that the following matrix is symmetric.\n[0,a+b,c+2;a,2,c;4,a+b,4]\n\\\\\n\\hline\nCodex input & \nUse sympy to find a, b, c so that [0,a+b,c+2;a,2,c;4,a+b,4]   transpose([0,a+b,c+2;a,2,c;4,a+b,4])\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport sympy\n\na, b, c   sympy.symbols('a b c')\nA   sympy.Matrix([[0, a + b, c + 2], [a, 2, c], [4, a + b, 4]])\nB   A.transpose()\nprint(sympy.solve([A[i] - B[i] for i in range(3)], (a, b, c)))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \na2,b0,c2\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 15: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Matrix Decomposition\\\\\n\\hline\nOriginal question & \nFind an LU decomposition of the following matrix:\n[-1,-1,2;2,0,3;-3,2,-1]\n\\\\\n\\hline\nCodex input & \nFind an LU decomposition of the following matrix:\n[-1,-1,2;2,0,3;-3,2,-1]\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\nA   np.array([[-1,-1,2],[2,0,3],[-3,2,-1]])\nL   np.eye(3)\nU   A\nfor i in range(3):\n   for j in range(i+1,3):\n   L[j,i]   U[j,i]/U[i,i]\n   U[j,:]   U[j,:] - L[j,i]*U[i,:]\nprint(L)\nprint(U)\n\\end{lstlisting}\\\\\n\\hline\nSolution &\n[1,0,0;-2,1,0;3,-5/2,1]*[-1,-1,2;0,-2,7;0,0,21/2]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 16: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Matrix Decomposition\\\\\n\\hline\nOriginal question & \nFind an QR decomposition of the following matrix:\n[1,0,2;0,2,0;0,-1,1]\n\\\\\n\\hline\nCodex input &\nFind an QR decomposition of the following matrix:\n[1,0,2;0,2,0;0,-1,1]\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\nA   np.array([[1,0,2],[0,2,0],[0,-1,1]])\nQ,R   np.linalg.qr(A)\nprint(Q)\nprint(R)\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n[1,0,0;0,2/sqrt(5),1/sqrt(5);0,-1/sqrt(5),2/sqrt(5)]*[1,0,2;0,sqrt(5),-1/sqrt(5);0,0,2/sqrt(5)]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 17: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Diagonalization and Eigenvectors/Eigenvalues\\\\\n\\hline\nOriginal question & \nDiagonalize the following matrix:\n[2,-3,0;0,-1,0;1,3,1]\n\\\\\n\\hline\nCodex input & \nWrite a program that diagonalizes the matrix [2,-3,0;0,-1,0;1,3,1]\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\nA   np.array([[2,-3,0],[0,-1,0],[1,3,1]])\nprint(A)\neig_val, eig_vec   np.linalg.eig(A)\nprint(eig_val)\nprint(eig_vec)\nD   np.diag(eig_val)\nprint(D)\nV   eig_vec\nprint(V)\nV_inv   np.linalg.inv(V)\nprint(V_inv)\nprint(np.dot(V,np.dot(D,V_inv)))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n[-1,0,1;-1,0,0;2,1,1]*[-1,0,0;0,1,0;0,0,2]*[0,-1,0;-1,3,1;1,-1,0]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 18: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Matrix Algebra\\\\\n\\hline\nOriginal question & \nCompute the trace of the following matrix:\n[3,8,-2;1,0,2;-2,-1,5]\n\\\\\n\\hline\nCodex input & \nCompute the trace of the following matrix:\n[3,8,-2;1,0,2;-2,-1,5]\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\nmatrix   np.array([[3,8,-2],[1,0,2],[-2,-1,5]])\nprint(matrix.diagonal().sum())\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n8\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 19: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Four Fundamental Subspaces of a Matrix\\\\\n\\hline\nOriginal question & \nWhich of the vectors v[3;-3;1], u[1;-2;1] is an element of the nullspace of the following matirx:\n[1,2,-3;-1,-1,0;-2,-3,3]\n\\\\\n\\hline\nCodex input & \nWrite a program that checks if a the vector is an element of the nullspace of a matrix\nUse the program to check if the vector [3;-3;1] is an element of the nullspace of the matrix [1,2,-3;-1,-1,0;-2,-3,3]\nUse the program to check if the vector [1;-2;1] is an element of the nullspace of the matrix [1,2,-3;-1,-1,0;-2,-3,3]\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\ndef is_nullspace(matrix, vector):\n   return np.allclose(np.dot(matrix, vector), 0)\n\n\nif __name__   '__main__':\n   matrix   np.array([[1, 2, -3], [-1, -1, 0], [-2, -3, 3]])\n   vector   np.array([[3], [-3], [1]])\n\n   print(is_nullspace(matrix, vector))\n\n   print(is_null([[1, 2, -3], [-1, -1, 0], [-2, -3, 3]], [1, -2, 1]))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \nu[1;-2,1]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 20: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Four Fundamental Subspaces of a Matrix\\\\\n\\hline\nOriginal question & \nFind the nullity of the following matrix:\n[3,-2,-1,0,2;1,-2,1,-2,4;-4,4,0,2,-6]\n\\\\\n\\hline\nCodex input & \nWrite a program to find the rank of the matrix [3,-2,-1,0,2;1,-2,1,-2,4;-4,4,0,2,-6]\n\nWrite a program to find the nullity, the number of columns minus the rank\n\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\nmatrix   np.array([[3,-2,-1,0,2],[1,-2,1,-2,4],[-4,4,0,2,-6]])\n\nprint(np.linalg.matrix_rank(matrix))\n\n\nprint(len(matrix[0]) - np.linalg.matrix_rank(matrix))\n\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n3\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 21: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Solving Linear System of Equations\\\\\n\\hline\nOriginal question & \nCompute the reduced row echelon form of the following matrix:\n[-1,2,1,0;2,1,0,-1;5,0,-2,6]\n\\\\\n\\hline\nCodex input & \nWrite a program to compute the reduced row echelon form (rref) of a matrix\nCompute the rref of the matrix [-1,2,1,0;2,1,0,-1;5,0,-2,6]\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\ndef rref(matrix):\n   if not matrix: return\n   num_rows   len(matrix)\n   num_cols   len(matrix[0])\n\n   # Start at the last column and work backwards.\n   for col in range(num_cols - 1, -1, -1):\n\n   # Find the row with the leading non-zero entry in this column.\n   for row in range(num_rows):\n   if matrix[row][col] ! 0: break\n\n   # If there is no leading non-zero entry, then all entries are zero.\n   if row   num_rows: continue\n\n   # Swap the current row with the one that has the leading non-zero entry.\n   matrix[row], matrix[num_rows - 1]   matrix[num_rows - 1], matrix[row]\n\n   # Eliminate all other entries in this column.\n   for r in range(num_rows):\n   if r   num_rows - 1: continue   # skip pivot row; already done above\n\n   # Eliminate current row of all other entries in this column.\n   multiplier   matrix[r][col] / matrix[num_rows - 1][col]   # get multiplier to eliminate value at [r][c] from rest of row (except pivot)\n   for c in range(col, num_cols):\n   matrix[r][c] - multiplier * matrix[num_rows - 1][c]\n\n   return matrix\n\nif __name__   \"\"__main__\"\":\n   print(rref([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\"\"\"\nCompute the rref of the matrix [-1,2,1,0;2,1,0,-1;5,0,-2,6]\n\"\"\"\"\"\"\n\nif __name__   \"\"__main__\"\":\n   print(rref([[-1, 2, 1, 0], [2, 1, 0, -1], [5, 0, -2, 6]]))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n[1,0,0,-2;0,1,0,3;0,0,1,-8]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 22: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Orthogonality and Projections\\\\\n\\hline\nOriginal question & \nFor what value of a makes the following matrix orthogonal:\n[0,0,1;-1,0,0;0,a,0]\n\\\\\n\\hline\nCodex input & \ntranspose(A)*A   I\nUsing sympy, write a program that finds x such that the 3x3 matrix A[0,0,1;-1,0,0;0,x,0] is orthogonal \n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nfrom sympy import *\n\nx   Symbol('x')\nA   Matrix([[0,0,1],[-1,0,0],[0,x,0]])\nprint(A.transpose()*A)\nprint(A.transpose()*A   eye(3))\nprint(solve(A.transpose()*A - eye(3), x))\n\"\"\"\"\"\"\nGiven a 3x3 matrix A[1,2,3;4,5,6;7,8,9], find the eigenvalues and eigenvectors of A. \n\"\"\"\"\"\"\nfrom sympy import *\ninit_printing()\nx   Symbol('x')\nA   Matrix([[1,2,3],[4,5,6],[7,8,9]])\neigenvals   A.eigenvals() # returns dictionary of eigenvalues and their multiplicity \neigenvals # {-1: 1, 3: 1}   # -1 is a real eigenvalue with multiplicity 1 and 3\n\\end{lstlisting}\\\\\n\\hline\nSolution & \na-1\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 23: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Basis, Dimension and Span\\\\\n\\hline\nOriginal question & \nWhat is the dimension of the subspace spanned by the following vectors?\n[2,-1/2],[1,1],[4,4]\n\\\\\n\\hline\nCodex input & \nIn Linear Algebra, the vectors [2,-1/2], [1,1], and [4,4] span a subspace. Write a program that finds the dimension of the subspace \n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\n# Solution:\n# \n# The vectors [2,-1/2], [1,1], and [4,4] span a subspace.\n# \n# The vectors [2,-1/2], [1,1], and [4,4] are linearly independent.\n# \n# The dimension of the subspace is 2.\n\n# Solution\n# \n# We can use the `subspace_basis` function from the `linear_algebra` package to find a basis for the subspace.\nusing LinearAlgebra\n\n# Define the vectors\nv1   [2,-1/2]\nv2   [1,1]\nv3   [4,4]\n\n# Find the basis for the subspace\nsubspace_basis(v1,v2,v3)\n\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n2\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 24: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Basis, Dimension and Span\\\\\n\\hline\nOriginal question & \nWhat are the coordinates of the vector [2;1] in the following basis?\n[2,-1/2],[1,1]\n\\\\\n\\hline\nCodex input & \nWhat are the coordinates of the vector [2,1] in the basis [2,-1/2],[1,1]\nUse sympy to solve:\n2*x + y   2\n-0.5*x + y   1\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nfrom sympy import *\n\nx   Symbol('x')\ny   Symbol('y')\nz   Symbol('z')\nprint(solve([2*x + y - 2, -0.5*x + y - 1], [x, y]))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n[0.4, 1.2]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 25: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Orthogonality and Projection\\\\\n\\hline\nOriginal question & \nFind the projection matrix onto the column space of A [3, 6, 6; 4, 8, 8].\n\\\\\n\\hline\nCodex input & \nWrite a program that finds the projection matrix onto the column space of A [3, 6, 6; 4, 8, 8].\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\nA   np.array([[3, 6, 6], [4, 8, 8]])\n\nprint(np.linalg.svd(A)[2][0])\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n[9/25, 12/25; 12/25, 16/25]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 26: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Linear Combination and Span\\\\\n\\hline\nOriginal question & \nFind a combination of the vectors [1; 2; 3], [4; 5; 6], and [7; 8; 9] that give the zero vector.\n\\\\\n\\hline\nCodex input & \nWrite a program that finds the linear combination of the vectors [1; 2; 3], [4; 5; 6], [7; 8; 9] that give [0;0;0]\nOriginal question should state non-zero combination\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\na   np.array([1, 2, 3])\nb   np.array([4, 5, 6])\nc   np.array([7, 8, 9])\nd   np.array([0, 0, 0])\n\n\ndef linear_combination(a, b):\n   return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n\n\ndef find_vector(a, b):\n   return d - linear_combination(a, d) / linear_combination(a, a) * a - linear_combination(b, d) / linear_combination(b, b) * b\n\n\nprint(\"\"The vector that gives [0;0;0] is: \"\", find_vector(a, c))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n[1, -2, 1], also [0,0,0]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 27: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Diagonalization and Eigenvectors/eigenvalues\\\\\n\\hline\nOriginal question & \nFind the eigenvalues of [-0.2, 0.3; 0.2, -0.3].\n\\\\\n\\hline\nCodex input & \nWrite a program to find the eigenvalues of [-0.2, 0.3; 0.2, -0.3].\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\nA   np.array([[-0.2, 0.3], [0.2, -0.3]])\n\nprint(np.linalg.eigvals(A))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n[0, 1/2]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 28: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Matrix Algebra\\\\\n\\hline\nOriginal question & \nIf A   [1, 2; -2, -3], compute A\\^{}4.\n\\\\\n\\hline\nCodex input & \nIf A   [1, 2; -2, -3], write a program that computes A\\^{}4.\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\nA   np.array([[1, 2], [-2, -3]])\nprint(A)\nprint(A**4)\n\\end{lstlisting}\\\\\n\\hline\nSolution & \n[-7, -8; 8, 9]\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 29: Original question, Codex input and output, and solution.}\n\\end{table}\n\n\\begin{table}[h]\n\\small\n\\centering\n\\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n\\hline\nTopic & Special Matrices\\\\\n\\hline\nOriginal question & \nGive an example of two positive definite matrices A and B, whose difference is not positive definite\n\\\\\n\\hline\nCodex input & \nGive an example of two positive definite matrices A and B, whose difference is not positive definite\n\\\\\n\\hline\nCodex output & \\begin{lstlisting}\nimport numpy as np\n\ndef generate_matrices(n):\n   A   np.random.rand(n, n)\n   B   np.random.rand(n, n)\n   while np.linalg.det(A - B) > 0:\n   B   np.random.rand(n, n)\n   return A, B\n\nA, B   generate_matrices(3)\nprint(A)\nprint(B)\nprint(A - B)\nprint(np.linalg.det(A - B))\n\\end{lstlisting}\\\\\n\\hline\nSolution & \nA   B   I\n\\\\\n\\hline\n\\end{tabular}\n\\caption*{COMS3251, Question 30: Original question, Codex input and output, and solution.}\n\\end{table}",
  "title": "Solving Linear Algebra by Program Synthesis"
}
