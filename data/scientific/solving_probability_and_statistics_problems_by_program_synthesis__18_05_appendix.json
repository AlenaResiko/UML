{
  "authors": [
    "Leonard Tang",
    "Elizabeth Ke",
    "Nikhil Singh",
    "Nakul Verma",
    "Iddo Drori"
  ],
  "date_published": "2021-11-16",
  "raw_tex": "\\section{MIT 18.05: Introduction to Probability and Statistics}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Probability\\\\\n   \\hline\n   Original question & In class we worked with non-transitive dice: Red: 3 3 3 3 3 6; Green: 1 4 4 4 4 4; White: 2 2 2 5 5 5. Find the probability that white beats green.\\\\\n   \\hline\n   Codex input & Given non-transitive dice: Red: 3 3 3 3 3 6; Green: 1 4 4 4 4 4; White: 2 2 2 5 5 5, write a program that computes the probability that white beats green.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\nimport itertools\n   \nred   [3, 3, 3, 3, 3, 6]\ngreen   [1, 4, 4, 4, 4, 4]\nwhite   [2, 2, 2, 5, 5, 5]\n\ndef prob_white_beats_green(red, green, white): \n   rolls   list(itertools.product(red, green, white))\n   wins   [1 for (r, g, w) in rolls if w > g]\n   return sum(wins) / len(rolls)\n\nprob_white_beats_green(red, green, white) \n   \\end{lstlisting}\n   \\\\\n   \\hline\n   Solution & 7/12\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 1 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Probability\\\\\n   \\hline\n   Original question & Calculate the probability of getting a two-pair poker hand.\\\\\n   \\hline\n   Codex input & A hand is a set of 5 cards that are drawn randomly from a standard 52 card deck with 13 ranks of 4 cards each. \\newline \\newline A two-pair poker hand is a hand that contains 3 unique ranks, where no more than 2 cards in the hand can share the same rank. That is, 3 or more cards cannot share the same rank. \\newline \\newline Write a program that generates simulations for calculating the average probability of getting a two-pair poker hand.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\nimport random\n\ndef get_rank_counts(hand):\n   \"\"\"\"\"\"\n   Returns a dictionary with ranks as keys and the number of cards with that rank as values.\n   \"\"\"\"\"\"\n   rank_counts   {}\n   for card in hand:\n   rank   card[0]\n   if rank in rank_counts:\n   rank_counts[rank] + 1\n   else:\n   rank_counts[rank]   1\n   return rank_counts\n\ndef has_two_pair(hand):\n   \"\"\"\"\"\"\n   Returns True if the hand has two pairs, and False otherwise.\n   \"\"\"\"\"\"\n   rank_counts   get_rank_counts(hand)\n   two_pair   False\n   for rank in rank_counts:\n   if rank_counts[rank]   2:\n   if two_pair:\n   return True\n   else:\n   two_pair   True\n   return False\n\ndef run_simulation():\n   \"\"\"\"\"\"\n   Runs a simulation of drawing 5 cards randomly from a deck of 52 cards.\n   \"\"\"\"\"\"\n   two_pair   0\n   for i in range(1000000):\n   deck   [r+s for r in '23456789TJQKA' for s in 'SHDC']\n   random.shuffle(deck)\n   hand   deck[:5]\n   if has_two_pair(hand):\n   two_pair + 1\n   return two_pair/1000000\n\nprint(run_simulation())\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 0.047539\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 2 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Probability\\\\\n   \\hline\n   Original question & Calculate the probability of getting a three-of-a-kind poker hand.\\\\\n   \\hline\n   Codex input & A hand is a set of 5 cards that are drawn randomly from a standard 52 card deck with 13 ranks of 4 cards each. \\newline \\newline A three-pair poker hand is a hand that contains exactly 3 cards that share one rank, 1 card of another rank, and a final card of another rank. \\newline \\newline Write a program that generates simulations for calculating the average probability of getting a three-pair poker hand.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\nimport random\n\ndef get_rank_counts(hand):\n   \"\"\"\n   Return a dictionary with ranks as keys and their counts as values.\n   \"\"\"\n   ranks   [card[0] for card in hand]\n   return {rank: ranks.count(rank) for rank in ranks}\n\ndef is_three_pair(hand):\n   \"\"\"\n   Return True if hand is a three pair hand.\n   \"\"\"\n   rank_counts   get_rank_counts(hand)\n   return 3 in rank_counts.values()\n\ndef get_three_pair_probability(n):\n   \"\"\"\n   Return the probability of getting a three pair hand.\n   \"\"\"\n   three_pair_count   0\n   for _ in range(n):\n   deck   [\n   '2C', '2D', '2H', '2S',\n   '3C', '3D', '3H', '3S',\n   '4C', '4D', '4H', '4S',\n   '5C', '5D', '5H', '5S',\n   '6C', '6D', '6H', '6S',\n   '7C', '7D', '7H', '7S',\n   '8C', '8D', '8H', '8S',\n   '9C', '9D', '9H', '9S',\n   'TC', 'TD', 'TH', 'TS',\n   'JC', 'JD', 'JH', 'JS',\n   'QC', 'QD', 'QH', 'QS',\n   'KC', 'KD', 'KH', 'KS',\n   'AC', 'AD', 'AH', 'AS'\n   ]\n   hand   random.sample(deck, 5)\n   if is_three_pair(hand):\n   three_pair_count + 1\n   return three_pair_count / n\n\nprint(get_three_pair_probability(1000000))\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 0.021128\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 3 from 18.05}\n\\end{table*}\n\n\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Probability\\\\\n   \\hline\n   Original question & In class we worked with non-transitive dice: Red: 3 3 3 3 3 6; Green: 1 4 4 4 4 4; White: 2 2 2 5 5 5. Find the probability that green beats red.\\\\\n   \\hline\n   Codex input & Given two non-transitive dice: \\newline Red: 3 3 3 3 3 6; \\newline Green: 1 4 4 4 4 4. \\newline Write a program that computes the probability that green beats red.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\ndef dice_prob(dice1, dice2):\n   '''\n   dice1: list of dice 1\n   dice2: list of dice 2\n   '''\n   # Your code here\n   red_wins   0\n   green_wins   0\n   for i in dice1:\n   for j in dice2:\n   if i > j:\n   red_wins + 1\n   elif j > i:\n   green_wins + 1\n   return green_wins / (red_wins + green_wins)\n\n# Test Cases\ndice1   [3, 3, 3, 3, 3, 6]\ndice2   [1, 4, 4, 4, 4, 4]\nprint(dice_prob(dice1, dice2))\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 25/36\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 4 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Conditional Probability\\\\\n   \\hline\n   Original question & Mr. Smith has two children. At least one of them is a boy. What is the probability that both children are boys?\\\\\n   \\hline\n   Codex input & Write a program that computes the probability that both children are boys given that one of them is a boy. \\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\n# probability that one child is a boy\np_one_boy   1/4\n\n# probability that both children are boys\np_both_boys   1/4\n\n# probability that one of them is a boy\np_one_is_boy   3/4\n\n# probability that both children are boys given that one of them is a boy\np_both_boys_given_one_boy   p_both_boys / p_one_is_boy\n\nprint(p_both_boys_given_one_boy)\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 1/3\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 5 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Discrete Random Variables, Standard Deviation\\\\\n   \\hline\n   Original question & Let X be the result of rolling a fair 4-sided die. Let Y be the result of rolling a fair 6-sided die. Let Z be the average of X and Y. Find the standard deviation of X.\\\\\n   \\hline\n   Codex input & In Probability, \\newline Write a program that computes the variance and standard deviation of rolling a fair 4-sided die 1000000 times.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\nimport random\n\ndef variance(lst):\n   mean   sum(lst) / len(lst)\n   return sum((i - mean) ** 2 for i in lst) / len(lst)\n\ndef standard_deviation(lst):\n   return variance(lst) ** 0.5\n\ndef main():\n   lst   []\n   for i in range(1000000):\n   lst.append(random.randint(1, 4))\n   print(variance(lst))\n   print(standard_deviation(lst))\n\nif __name__   '__main__':\n   main()\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 1.118\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 6 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Discrete Random Variables, Standard Deviation\\\\\n   \\hline\n   Original question & Let X be the result of rolling a fair 4-sided die. Let Y be the result of rolling a fair 6-sided die. Let Z be the average of X and Y. Find the standard deviation of Y.\\\\\n   \\hline\n   Codex input & In Probability, Write a program that computes the variance and standard deviation of rolling a fair 6-sided die 1000000 times.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\nimport statistics\n\ndef variance_and_standard_deviation():\n   data   []\n   for i in range(1000000):\n   data.append(random.randint(1,6))\n   print(statistics.variance(data))\n   print(statistics.stdev(data))\n\nvariance_and_standard_deviation()\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 1.708\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 7 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Discrete Random Variables, Standard Deviation\\\\\n   \\hline\n   Original question & Let X be the result of rolling a fair 4-sided die. Let Y be the result of rolling a fair 6-sided die. Let Z be the average of X and Y. Find the standard deviation of Z.\\\\\n   \\hline\n   Codex input & Let X be the result of rolling a fair 4-sided die. Let Y be the result of rolling a fair 6-sided die. Let Z be the average of X and Y. Write a program that computes the standard deviation of Z. \\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\nimport math\n\ndef standard_deviation(lst):\n   mean   sum(lst) / len(lst)\n   return math.sqrt(sum([(x - mean) ** 2 for x in lst]) / len(lst))\n\ndef main():\n   X   [1, 2, 3, 4]\n   Y   [1, 2, 3, 4, 5, 6]\n   Z   []\n   for i in X:\n   for j in Y:\n   Z.append((i + j) / 2)\n   print(standard_deviation(Z))\n\nif __name__   \"__main__\":\n   main()\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 1.021\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 8 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Discrete Random Variables, Expectation\\\\\n   \\hline\n   Original question & Let X be the result of rolling a fair 4-sided die. Let Y be the result of rolling a fair 6-sided die. You win 2X dollars if X>Y and lose 1 dollar otherwise. After playing this game 60 times, what is your expected total gain?\\\\\n   \\hline\n   Codex input & In Probability, \\newline X is the result of rolling a fair 4-sided die and Y is the result of rolling a fair 6-sided die. You win 2X if X > Y and lose 1 otherwise. \\newline Write a program that computes the expected total gain after rolling both dice 60 times.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\nimport random\n\ndef roll_dice(): \n   return random.randint(1, 4)\n\ndef roll_dice_6():\n   return random.randint(1, 6)\n\ndef play_game():\n   total_gain   0\n   for i in range(60):\n   x   roll_dice()\n   y   roll_dice_6()\n   if x > y:\n   total_gain + 2 * x\n   else:\n   total_gain - 1\n   return total_gain\n\ndef main():\n   total_gain   0\n   for i in range(1000):\n   total_gain + play_game()\n   print(total_gain / 1000)\n\nif __name__   '__main__':\n   main()\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 55\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 9 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Counting, Continuous Variables\\\\\n   \\hline\n   Original question & Boxes of Raisin Bran cereal are 30cm tall. Due to settling, boxes have a higher density of raisins at the bottom (h   0) than at the top (h   30). Suppose the density (in raisins per cm of height) is given by f(h)   40 - h. How many raisins are in a box?\\\\\n   \\hline\n   Codex input & Boxes of Raisin Bran cereal are 30cm tall. \\newline Suppose the density of raisins per cm of height is given by f(h)   40 - h. \\newline Using scipy.integrate, write a program that computes how many raisins are in a box.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\nimport numpy as np\nimport scipy.integrate as integrate\n\ndef f(h):\n   return 40 - h\n\ndef integrate_f(a, b):\n   return integrate.quad(f, a, b)\n\nprint(integrate_f(0, 30))\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 750\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 10 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Probability, Continuous Variables\\\\\n   \\hline\n   Original question & Boxes of Raisin Bran cereal are 30cm tall. Due to settling, boxes have a higher density of raisins at the bottom (h   0) than at the top (h   30). Suppose the density (in raisins per cm of height) is given by f(h)   40 - h. What is the probability that a random raisin is in the bottom third of the box?\\\\\n   \\hline\n   Codex input & h ranges from 0 to 30. Integrate f(h)   40 - h from 0 to 10. Divide by the integration of h from 0 to 30.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\ndef f(h):\n   return 40 - h\n\ndef integrate(f, a, b, N):\n   \"\"\"\n   Integrates f from a to b using N intervals\n   \"\"\"\n   dx   (b - a) / N\n   total   0\n   for i in range(N):\n   total + f(a + i * dx)\n   return total * dx\n\nprint(integrate(f, 0, 10, 100000) / integrate(f, 0, 30, 100000))\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 7/15\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 11 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Prior Odds\\\\\n   \\hline\n   Original question & You have a drawer that contains 50 coins. 10 coins have probability p   0.3 of heads, 30 coins have probability p   0.5 and 10 coins have probability p   0.7. You pick one coin at random from the drawer and flip it. What are the (prior) odds you chose a 0.3 coin?\\\\\n   \\hline\n   Codex input & You have a drawer that contains 10 white coins and 40 black coins. \\newline You pick one coin at random from the drawer. Write a program that computes the odds that you chose a white coin. \\newline \\newline In probability, the odds of an event E is P(E)/P(E\\char`\\^c).\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\n# P(E)   10/50\n# P(E^c)   40/50\n# odds   P(E)/P(E^c)   10/40\n\nprint(10/40)\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 1/4\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 12 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Joint Distributions\\\\\n   \\hline\n   Original question & Suppose X and Y have joint pdf $f(x, y)   c(x^2+xy)$ on [0, 1] \u00d7 [0, 1]. Find c.\\\\\n   \\hline\n   Codex input & Define variables x, y, c. \\newline Using Sympy, integrate f(x, y)   c(x\\char`\\^2+xy) from 0 to 1 for x and 0 to 1 for y; set it equal to 1 in an equation. Find c that makes the expression 1.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\nimport sympy as sp\n\nx, y, c   sp.symbols('x y c')\n\nf   c * (x**2 + x*y)\n\nsp.integrate(f, (x, 0, 1), (y, 0, 1))\n\nsp.solve(sp.Eq(1, sp.integrate(f, (x, 0, 1), (y, 0, 1))), c)\n   \\end{lstlisting}\n   \\\\\n   \\hline\n   Solution & 12/7\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 13 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Central Limit Theorem, Probability\\\\\n   \\hline\n   Original question & To head the newly formed US Dept. of Statistics, suppose that 50\\ of the population supports Erika, 20\\ supports Ruthi, and the rest are split between Peter, Jon and Jerry. A poll asks 400 random people who they support. Use the central limit theorem to estimate the probability that at least 52.5\\ of those polled prefer Erika?\\\\\n   \\hline\n   Codex input & Suppose that 50\\ of the population supports Erika. A poll asks 400 random people who they support. \\newline Write a program that uses the central limit theorem to compute the probability that at least 52.5\\ of those polled support Erika.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\nimport random\n\ndef poll(n):\n   \"\"\"\n   n: number of people polled\n   returns: percentage of people in favor of Erika\n   \"\"\"\n   # generate a list of n random numbers between 0 and 1\n   # if the number is less than 0.5, the person is in favor of Erika\n   # if the number is greater than 0.5, the person is in favor of Erica\n   # return the percentage of people in favor of Erika\n   count   0\n   for i in range(n):\n   if random.random() < 0.5:\n   count + 1\n   return count / n\n\ndef poll_prob(n, m):\n   \"\"\"\n   n: number of people polled\n   m: number of times the poll is conducted\n   returns: probability that at least 52.5 of the population supports Erika\n   \"\"\"\n   # run poll_prob() m times\n   # count the number of times the poll is in favor of Erika\n   # return the number of times the poll is in favor of Erika divided by m\n   count   0\n   for i in range(m):\n   if poll(n) > 0.525:\n   count + 1\n   return count / m\n\nprint(poll_prob(400, 10000))\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 0.16\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 14 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Central Limit Theorem, Probability\\\\\n   \\hline\n   Original question & To head the newly formed US Dept. of Statistics, suppose that 50\\ of the population supports Erika, 20\\ supports Ruthi, and the rest are split between Peter, Jon and Jerry. A poll asks 400 random people who they support. Use the central limit theorem to estimate the probability that less than 25\\ of those polled prefer Peter, Jon or Jerry?\\\\\n   \\hline\n   Codex input & Suppose that 30\\ of the population supports Peter. A poll asks 400 random people who they support. \\newline Write a program that uses the central limit theorem to compute the probability that less than 25\\ of those polled support Peter.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\nimport random\n\ndef poll(n, p):\n   count   0\n   for i in range(n):\n   if random.random() < p:\n   count + 1\n   return count\n\ndef main():\n   peter_support   0.3\n   n   400\n   p   0.25\n   poll_size   1000\n   count   0\n   for i in range(poll_size):\n   if poll(n, peter_support) < p * n:\n   count + 1\n   print(count / poll_size)\n\nif __name__   \"__main__\":\n   main()\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 0.0145\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 15 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Uniform Random Variables, Probability\\\\\n   \\hline\n   Original question & Alice and Bob are trying to meet for lunch and both will arrive, independently of each other, uniformly and at random between noon and 1pm. Let A and B be the number of minutes after noon at which Alice and Bob arrive, respectively. Then A and B are independent uniformly distributed random variables on [0, 60]. Find the probability that Alice arrives before 12:30.\\\\\n   \\hline\n   Codex input & A and B are trying to meet for lunch between 12:00 and 1:00. Alice and Bob arriving for lunch are independent and uniformly distributed events. \\newline Write a function that finds the probability that A arrives before 12:30.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\ndef prob_a_before_1230(a, b):\n   return a / (a + b)\n\nprint(prob_a_before_1230(0.5, 0.5))\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 1/2\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 16 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Uniform Random Variables, Probability\\\\\n   \\hline\n   Original question & Alice and Bob are trying to meet for lunch and both will arrive, independently of each other, uniformly and at random between noon and 1pm. Let A and B be the number of minutes after noon at which Alice and Bob arrive, respectively. Then A and B are independent uniformly distributed random variables on [0, 60]. Now suppose that Alice and Bob are both rather impatient and will leave if they have to wait more than 15 minutes for the other to arrive. What is the probability that Alice and Bob will have lunch together?\\\\\n   \\hline\n   Codex input & Alice and Bob are trying to meet for lunch and both will arrive, independently of each other, uniformly and at random between 12pm and 1pm. Suppose that Alice and Bob are both rather impatient and will leave if they have to wait more than 15 minutes for the other to arrive. Write a function that randomly computes the probability that Alice and Bob will have lunch together.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\nimport random\n\ndef lunch_together():\n   # Alice arrives at time\n   time_a   random.uniform(0, 60)\n   # Bob arrives at time\n   time_b   random.uniform(0, 60)\n   # If both arrive within 15 minutes of each other, they have lunch together\n   if abs(time_a - time_b) < 15:\n   return True\n   else:\n   return False\n\ndef prob_lunch_together():\n   # Run lunch_together() 10,000 times\n   count   0\n   for i in range(10000):\n   if lunch_together():\n   count + 1\n   # Return probability\n   return count / 10000\n\nprint(prob_lunch_together())\n   \\end{lstlisting} \\\\\n   \\hline\n   Solution & 7/16\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 17 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Prior Odds\\\\\n   \\hline\n   Original question & You have a drawer that contains 50 coins. 10 coins have probability p   0.3 of heads, 30 coins have probability p   0.5 and 10 coins have probability p   0.7. You pick one coin at random from the drawer and flip it. What are the (prior) odds you chose a 0.7 coin?\\\\\n   \\hline\n   Codex input & You have a drawer that contains 10 white coins and 40 black coins. \\newline You pick one coin at random from the drawer. Write a program that computes the odds that you chose a white coin. \\newline \\newline In probability, the odds of an event E is P(E)/P(E\\char`\\^c).\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\n# P(E)   10/50\n# P(E^c)   40/50\n# odds   P(E)/P(E^c)   10/40\n\nprint(10/40)\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 1/4\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 18 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Null Hypothesis Significance Testing, Type I Error\\\\\n   \\hline\n   Original question & One generates a number x from a uniform distribution on the interval $[0, \\theta]$. One decides to test H0: $\\theta$   2 against HA: $\\theta$   2 by rejecting H0 if x $\\leq$ 0.1 or x $\\geq$ 1.9. Compute the probability of a type I error.\\\\\n   \\hline\n   Codex input & One generates a number x from a uniform distribution on the interval [0, $\\theta$]. \\newline One decides to test H0: $\\theta$   2 against HA: $\\theta$   2 by rejecting H0 if x $\\leq$ 0.1 or x $\\geq$ 1.9. \\newline Using numpy, write a program that computes the probability of a type I error.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\nimport numpy as np\n\ntheta   2\nn   100000\n\nx   np.random.uniform(0, theta, n)\n\ntype_I_error   np.sum(x < 0.1) + np.sum(x > 1.9)\n\nprint(type_I_error / n)\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 0.1\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 19 from 18.05}\n\\end{table*}\n\n\\begin{table*}[h]\n\\small \\centering\n   \\begin{tabular}{|p{3.5cm}|p{11.5cm}|}\n   \\hline\n   Topic & Null Hypothesis Significance Testing, Type II Error\\\\\n   \\hline\n   Original question & One generates a number x from a uniform distribution on the interval $[0, \\theta]$. One decides to test H0: $\\theta$   2 against HA: $\\theta$   2 by rejecting H0 if x $\\leq$ 0.1 or x $\\geq$ 1.9. Compute the probability of a type II error if the true value of $\\theta$ is 2.5.\\\\\n   \\hline\n   Codex input & One generates a number x from a uniform distribution on the interval [0, $\\theta$]. \\newline \\newline One decides to test H0 : $\\theta$   2 against HA : $\\theta$   2 by rejecting H0 if x $\\leq$ 0.1 or x $\\geq$ 1.9, and accepted otherwise. \\newline \\newline Given that $\\theta$   2.5, write a program that computes the type II error. \\newline \\newline The type II error is the probability that the null hypothesis is mistakenly accepted.\\\\\n   \\hline\n   Codex output & \\begin{lstlisting}\nimport numpy as np\n\ntheta   2.5\n\ndef type_II_error(theta, x):\n   return 1 - np.sum(np.logical_or(x < 0.1, x > 1.9)) / len(x)\n\nx   np.random.uniform(0, theta, 100000)\n\nprint(type_II_error(theta, x))\n   \\end{lstlisting}\\\\\n   \\hline\n   Solution & 0.72\\\\\n   \\hline\n   \\end{tabular}\n\\caption*{Question 20 from 18.05}\n\\end{table*}\n",
  "title": "Solving Probability and Statistics Problems by Program Synthesis"
}
